

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Jul 05 08:33:29 2021

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F688
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	intentry,global,class=CODE,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	dabs	1,0x7E,2
    47  0000                     
    48                           ; Version 1.41
    49                           ; Generated 25/01/2017 GMT
    50                           ; 
    51                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC16F688 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     	;# 
    83  0001                     	;# 
    84  0002                     	;# 
    85  0003                     	;# 
    86  0004                     	;# 
    87  0005                     	;# 
    88  0007                     	;# 
    89  000A                     	;# 
    90  000B                     	;# 
    91  000C                     	;# 
    92  000E                     	;# 
    93  000E                     	;# 
    94  000F                     	;# 
    95  0010                     	;# 
    96  0011                     	;# 
    97  0012                     	;# 
    98  0013                     	;# 
    99  0014                     	;# 
   100  0015                     	;# 
   101  0016                     	;# 
   102  0017                     	;# 
   103  0018                     	;# 
   104  0019                     	;# 
   105  001A                     	;# 
   106  001E                     	;# 
   107  001F                     	;# 
   108  0081                     	;# 
   109  0085                     	;# 
   110  0087                     	;# 
   111  008C                     	;# 
   112  008E                     	;# 
   113  008F                     	;# 
   114  0090                     	;# 
   115  0091                     	;# 
   116  0095                     	;# 
   117  0095                     	;# 
   118  0096                     	;# 
   119  0096                     	;# 
   120  0097                     	;# 
   121  0098                     	;# 
   122  0099                     	;# 
   123  009A                     	;# 
   124  009A                     	;# 
   125  009B                     	;# 
   126  009C                     	;# 
   127  009D                     	;# 
   128  009E                     	;# 
   129  009F                     	;# 
   130  0000                     	;# 
   131  0001                     	;# 
   132  0002                     	;# 
   133  0003                     	;# 
   134  0004                     	;# 
   135  0005                     	;# 
   136  0007                     	;# 
   137  000A                     	;# 
   138  000B                     	;# 
   139  000C                     	;# 
   140  000E                     	;# 
   141  000E                     	;# 
   142  000F                     	;# 
   143  0010                     	;# 
   144  0011                     	;# 
   145  0012                     	;# 
   146  0013                     	;# 
   147  0014                     	;# 
   148  0015                     	;# 
   149  0016                     	;# 
   150  0017                     	;# 
   151  0018                     	;# 
   152  0019                     	;# 
   153  001A                     	;# 
   154  001E                     	;# 
   155  001F                     	;# 
   156  0081                     	;# 
   157  0085                     	;# 
   158  0087                     	;# 
   159  008C                     	;# 
   160  008E                     	;# 
   161  008F                     	;# 
   162  0090                     	;# 
   163  0091                     	;# 
   164  0095                     	;# 
   165  0095                     	;# 
   166  0096                     	;# 
   167  0096                     	;# 
   168  0097                     	;# 
   169  0098                     	;# 
   170  0099                     	;# 
   171  009A                     	;# 
   172  009A                     	;# 
   173  009B                     	;# 
   174  009C                     	;# 
   175  009D                     	;# 
   176  009E                     	;# 
   177  009F                     	;# 
   178  0000                     	;# 
   179  0001                     	;# 
   180  0002                     	;# 
   181  0003                     	;# 
   182  0004                     	;# 
   183  0005                     	;# 
   184  0007                     	;# 
   185  000A                     	;# 
   186  000B                     	;# 
   187  000C                     	;# 
   188  000E                     	;# 
   189  000E                     	;# 
   190  000F                     	;# 
   191  0010                     	;# 
   192  0011                     	;# 
   193  0012                     	;# 
   194  0013                     	;# 
   195  0014                     	;# 
   196  0015                     	;# 
   197  0016                     	;# 
   198  0017                     	;# 
   199  0018                     	;# 
   200  0019                     	;# 
   201  001A                     	;# 
   202  001E                     	;# 
   203  001F                     	;# 
   204  0081                     	;# 
   205  0085                     	;# 
   206  0087                     	;# 
   207  008C                     	;# 
   208  008E                     	;# 
   209  008F                     	;# 
   210  0090                     	;# 
   211  0091                     	;# 
   212  0095                     	;# 
   213  0095                     	;# 
   214  0096                     	;# 
   215  0096                     	;# 
   216  0097                     	;# 
   217  0098                     	;# 
   218  0099                     	;# 
   219  009A                     	;# 
   220  009A                     	;# 
   221  009B                     	;# 
   222  009C                     	;# 
   223  009D                     	;# 
   224  009E                     	;# 
   225  009F                     	;# 
   226  0000                     	;# 
   227  0001                     	;# 
   228  0002                     	;# 
   229  0003                     	;# 
   230  0004                     	;# 
   231  0005                     	;# 
   232  0007                     	;# 
   233  000A                     	;# 
   234  000B                     	;# 
   235  000C                     	;# 
   236  000E                     	;# 
   237  000E                     	;# 
   238  000F                     	;# 
   239  0010                     	;# 
   240  0011                     	;# 
   241  0012                     	;# 
   242  0013                     	;# 
   243  0014                     	;# 
   244  0015                     	;# 
   245  0016                     	;# 
   246  0017                     	;# 
   247  0018                     	;# 
   248  0019                     	;# 
   249  001A                     	;# 
   250  001E                     	;# 
   251  001F                     	;# 
   252  0081                     	;# 
   253  0085                     	;# 
   254  0087                     	;# 
   255  008C                     	;# 
   256  008E                     	;# 
   257  008F                     	;# 
   258  0090                     	;# 
   259  0091                     	;# 
   260  0095                     	;# 
   261  0095                     	;# 
   262  0096                     	;# 
   263  0096                     	;# 
   264  0097                     	;# 
   265  0098                     	;# 
   266  0099                     	;# 
   267  009A                     	;# 
   268  009A                     	;# 
   269  009B                     	;# 
   270  009C                     	;# 
   271  009D                     	;# 
   272  009E                     	;# 
   273  009F                     	;# 
   274                           
   275                           	psect	idataBANK1
   276  092E                     __pidataBANK1:	
   277                           
   278                           ;initializer for UART_Send@F988
   279  092E  3440               	retlw	64
   280  092F  3430               	retlw	48
   281  0930  3430               	retlw	48
   282  0931  3430               	retlw	48
   283  0932  3430               	retlw	48
   284  0933  3430               	retlw	48
   285  0934  3430               	retlw	48
   286  0935  3400               	retlw	0
   287                           
   288                           ;initializer for _F_VALUE
   289  0936  3432               	retlw	50
   290  0937  3400               	retlw	0
   291  0015                     _TXREG	set	21
   292  0014                     _RCREG	set	20
   293  0017                     _RCSTAbits	set	23
   294  0016                     _TXSTAbits	set	22
   295  0013                     _SPBRG	set	19
   296  000C                     _PIR1bits	set	12
   297  0001                     _TMR0	set	1
   298  000B                     _INTCONbits	set	11
   299  0007                     _PORTC	set	7
   300  000E                     _TMR1L	set	14
   301  000F                     _TMR1H	set	15
   302  0010                     _T1CONbits	set	16
   303  001F                     _ADCON0bits	set	31
   304  001E                     _ADRESH	set	30
   305  001F                     _ADCON0	set	31
   306  0019                     _CMCON0	set	25
   307  0061                     _TXIF	set	97
   308  00BC                     _CREN	set	188
   309  00B9                     _OERR	set	185
   310  00F9                     _GO_DONE	set	249
   311  008C                     _PIE1bits	set	140
   312  0087                     _TRISCbits	set	135
   313  0081                     _OPTION_REGbits	set	129
   314  0087                     _TRISC	set	135
   315  0085                     _TRISA	set	133
   316  009E                     _ADRESL	set	158
   317  009F                     _ADCON1	set	159
   318  0091                     _ANSEL	set	145
   319                           
   320                           	psect	strings
   321  07E1                     __pstrings:	
   322  07E1                     stringtab:	
   323  07E1                     __stringtab:	
   324                           
   325                           ;	String table - string pointers are 1 byte each
   326  07E1  1BFF               	btfsc	btemp+1,7
   327  07E2  2FEB               	ljmp	stringcode
   328  07E3  1383               	bcf	3,7
   329  07E4  187F               	btfsc	btemp+1,0
   330  07E5  1783               	bsf	3,7
   331  07E6  0800               	movf	0,w
   332  07E7  0A84               	incf	4,f
   333  07E8  1903               	skipnz
   334  07E9  0AFF               	incf	btemp+1,f
   335  07EA  0008               	return
   336  07EB                     stringcode:	
   337  07EB                     stringdir:	
   338  07EB  3007               	movlw	high stringdir
   339  07EC  008A               	movwf	10
   340  07ED  0804               	movf	4,w
   341  07EE  0A84               	incf	4,f
   342  07EF  0782               	addwf	2,f
   343  07F0                     __stringbase:	
   344  07F0  3400               	retlw	0
   345  07F1                     __end_of__stringtab:	
   346  07F1                     STR_1:	
   347  07F1  3457               	retlw	87	;'W'
   348  07F2  3445               	retlw	69	;'E'
   349  07F3  344C               	retlw	76	;'L'
   350  07F4  3443               	retlw	67	;'C'
   351  07F5  344F               	retlw	79	;'O'
   352  07F6  344D               	retlw	77	;'M'
   353  07F7  3445               	retlw	69	;'E'
   354  07F8  3420               	retlw	32	;' '
   355  07F9  344D               	retlw	77	;'M'
   356  07FA  3441               	retlw	65	;'A'
   357  07FB  3441               	retlw	65	;'A'
   358  07FC  344D               	retlw	77	;'M'
   359  07FD  3400               	retlw	0
   360                           
   361                           ; #config settings
   362  0000                     
   363                           	psect	cinit
   364  0013                     start_initialization:	
   365  0013                     __initialization:	
   366                           
   367                           ; Initialize objects allocated to BANK1
   368  0013  1383               	bcf	3,7	;select IRP bank0
   369  0014  30ED               	movlw	low (__pdataBANK1+10)
   370  0015  00FD               	movwf	btemp+-1
   371  0016  3009               	movlw	high __pidataBANK1
   372  0017  00FE               	movwf	btemp
   373  0018  302E               	movlw	low __pidataBANK1
   374  0019  00FF               	movwf	btemp+1
   375  001A  30E3               	movlw	low __pdataBANK1
   376  001B  0084               	movwf	4
   377  001C  158A  213C  118A   	fcall	init_ram0
   378                           
   379                           ; Clear objects allocated to BANK1
   380  001F  30A0               	movlw	low __pbssBANK1
   381  0020  0084               	movwf	4
   382  0021  30CB               	movlw	low (__pbssBANK1+43)
   383  0022  158A  211D         	fcall	clear_ram0
   384                           
   385                           ; Clear objects allocated to COMMON
   386  0024  01F0               	clrf	__pbssCOMMON& (0+127)
   387  0025  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   388  0026  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   389  0027  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   390  0028  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   391  0029                     end_of_initialization:	
   392                           ;End of C runtime variable initialization code
   393                           
   394  0029                     __end_of__initialization:	
   395  0029  0183               	clrf	3
   396  002A  158A  2A8F         	ljmp	_main	;jump to C main() function
   397                           
   398                           	psect	bssCOMMON
   399  0070                     __pbssCOMMON:	
   400  0070                     Measure@in:	
   401  0070                     	ds	1
   402  0071                     _CHAR_STATE:	
   403  0071                     	ds	1
   404  0072                     _ZERO_CROSS:	
   405  0072                     	ds	1
   406  0073                     _TIME_S:	
   407  0073                     	ds	1
   408  0074                     _PF_SIGN:	
   409  0074                     	ds	1
   410                           
   411                           	psect	bssBANK1
   412  00A0                     __pbssBANK1:	
   413  00A0                     _TIME_MS:	
   414  00A0                     	ds	2
   415  00A2                     _PF_VALUE:	
   416  00A2                     	ds	2
   417  00A4                     _A_VALUE:	
   418  00A4                     	ds	2
   419  00A6                     _V_VALUE:	
   420  00A6                     	ds	2
   421  00A8                     Button_Press@switch_state:	
   422  00A8                     	ds	1
   423  00A9                     Toggle_Relay@read:	
   424  00A9                     	ds	1
   425  00AA                     _PF_FLAG:	
   426  00AA                     	ds	1
   427  00AB                     _FREQUENCY_ARRAY:	
   428  00AB                     	ds	8
   429  00B3                     _POWER_FACTOR_ARRAY:	
   430  00B3                     	ds	8
   431  00BB                     _CURRENT_ARRAY:	
   432  00BB                     	ds	8
   433  00C3                     _VOLT_ARRAY:	
   434  00C3                     	ds	8
   435                           
   436                           	psect	dataBANK1
   437  00E3                     __pdataBANK1:	
   438  00E3                     UART_Send@F988:	
   439  00E3                     	ds	8
   440  00EB                     _F_VALUE:	
   441  00EB                     	ds	2
   442                           
   443                           	psect	inittext
   444  0938                     init_fetch0:	
   445                           ;	Called with low address in FSR and high address in W
   446                           
   447  0938  087E               	movf	126,w
   448  0939  008A               	movwf	10
   449  093A  087F               	movf	127,w
   450  093B  0082               	movwf	2
   451  093C                     init_ram0:	
   452                           ;Called with:
   453                           ;	high address of idata address in btemp 
   454                           ;	low address of idata address in btemp+1 
   455                           ;	low address of data in FSR
   456                           ;	high address + 1 of data in btemp-1
   457                           
   458  093C  2138  158A         	fcall	init_fetch0
   459  093E  0080               	movwf	0
   460  093F  0A84               	incf	4,f
   461  0940  0804               	movf	4,w
   462  0941  067D               	xorwf	125,w
   463  0942  1903               	btfsc	3,2
   464  0943  3400               	retlw	0
   465  0944  0AFF               	incf	127,f
   466  0945  1903               	btfsc	3,2
   467  0946  0AFE               	incf	126,f
   468  0947  293C               	goto	init_ram0
   469                           
   470                           	psect	clrtext
   471  091D                     clear_ram0:	
   472                           ;	Called with FSR containing the base address, and
   473                           ;	W with the last address+1
   474                           
   475  091D  0064               	clrwdt	;clear the watchdog before getting into this loop
   476  091E                     clrloop0:	
   477  091E  0180               	clrf	0	;clear RAM location pointed to by FSR
   478  091F  0A84               	incf	4,f	;increment pointer
   479  0920  0604               	xorwf	4,w	;XOR with final address
   480  0921  1903               	btfsc	3,2	;have we reached the end yet?
   481  0922  3400               	retlw	0	;all done for this memory range, return
   482  0923  0604               	xorwf	4,w	;XOR again to restore value
   483  0924  291E               	goto	clrloop0	;do the next byte
   484                           
   485                           	psect	cstackBANK1
   486  00CB                     __pcstackBANK1:	
   487  00CB                     ADC_PF@time_dif:	
   488  00CB                     _Send$961:	
   489                           ; 2 bytes @ 0x0
   490                           
   491                           
   492                           ; 2 bytes @ 0x0
   493  00CB                     	ds	2
   494  00CD                     _ADC_PF$960:	
   495                           
   496                           ; 3 bytes @ 0x2
   497  00CD                     	ds	3
   498  00D0                     ADC_PF@freq_clock:	
   499                           
   500                           ; 2 bytes @ 0x5
   501  00D0                     	ds	2
   502  00D2                     ADC_PF@ARRAY:	
   503                           
   504                           ; 1 bytes @ 0x7
   505  00D2                     	ds	1
   506  00D3                     ADC_PF@angle:	
   507                           
   508                           ; 2 bytes @ 0x8
   509  00D3                     	ds	2
   510  00D5                     ADC_PF@step:	
   511                           
   512                           ; 3 bytes @ 0xA
   513  00D5                     	ds	3
   514  00D8                     ADC_PF@temp:	
   515                           
   516                           ; 3 bytes @ 0xD
   517  00D8                     	ds	3
   518  00DB                     ADC_PF@i:	
   519                           
   520                           ; 1 bytes @ 0x10
   521  00DB                     	ds	1
   522  00DC                     ADC_PF@rad_angle:	
   523                           
   524                           ; 3 bytes @ 0x11
   525  00DC                     	ds	3
   526  00DF                     _Measure$304:	
   527                           
   528                           ; 4 bytes @ 0x14
   529  00DF                     	ds	4
   530                           
   531                           	psect	cstackCOMMON
   532  0075                     __pcstackCOMMON:	
   533  0075                     ?_Init:	
   534  0075                     ?_Button_Press:	
   535                           ; 1 bytes @ 0x0
   536                           
   537  0075                     ?_Measure:	
   538                           ; 1 bytes @ 0x0
   539                           
   540  0075                     ?_Send:	
   541                           ; 1 bytes @ 0x0
   542                           
   543  0075                     ?_UART_GetC:	
   544                           ; 1 bytes @ 0x0
   545                           
   546  0075                     ??_UART_GetC:	
   547                           ; 1 bytes @ 0x0
   548                           
   549  0075                     ?_UART_Init:	
   550                           ; 1 bytes @ 0x0
   551                           
   552  0075                     ?_Init_Setup:	
   553                           ; 1 bytes @ 0x0
   554                           
   555  0075                     ?_Toggle_Relay:	
   556                           ; 1 bytes @ 0x0
   557                           
   558  0075                     ?_ADC_Init:	
   559                           ; 1 bytes @ 0x0
   560                           
   561  0075                     ?_main:	
   562                           ; 1 bytes @ 0x0
   563                           
   564  0075                     ?_ISR:	
   565                           ; 1 bytes @ 0x0
   566                           
   567  0075                     ??_ISR:	
   568                           ; 1 bytes @ 0x0
   569                           
   570  0075                     ?_UART_PutC:	
   571                           ; 1 bytes @ 0x0
   572                           
   573                           
   574                           ; 1 bytes @ 0x0
   575  0075                     	ds	5
   576                           
   577                           	psect	cstackBANK0
   578  0020                     __pcstackBANK0:	
   579  0020                     ??_Button_Press:	
   580  0020                     ??_UART_Init:	
   581                           ; 1 bytes @ 0x0
   582                           
   583  0020                     ??_Init_Setup:	
   584                           ; 1 bytes @ 0x0
   585                           
   586  0020                     ??_Toggle_Relay:	
   587                           ; 1 bytes @ 0x0
   588                           
   589  0020                     ??_ADC_Init:	
   590                           ; 1 bytes @ 0x0
   591                           
   592  0020                     ??_UART_PutC:	
   593                           ; 1 bytes @ 0x0
   594                           
   595  0020                     ?_ADC_Read:	
   596                           ; 1 bytes @ 0x0
   597                           
   598  0020                     ?___wmul:	
   599                           ; 2 bytes @ 0x0
   600                           
   601  0020                     ?___lwdiv:	
   602                           ; 2 bytes @ 0x0
   603                           
   604  0020                     ?___ftpack:	
   605                           ; 2 bytes @ 0x0
   606                           
   607  0020                     UART_PutC@data:	
   608                           ; 3 bytes @ 0x0
   609                           
   610  0020                     ___wmul@multiplier:	
   611                           ; 1 bytes @ 0x0
   612                           
   613  0020                     ___lwdiv@divisor:	
   614                           ; 2 bytes @ 0x0
   615                           
   616  0020                     ___ftpack@arg:	
   617                           ; 2 bytes @ 0x0
   618                           
   619                           
   620                           ; 3 bytes @ 0x0
   621  0020                     	ds	1
   622  0021                     ?_UART_Write:	
   623  0021                     UART_Write@data:	
   624                           ; 1 bytes @ 0x1
   625                           
   626                           
   627                           ; 2 bytes @ 0x1
   628  0021                     	ds	1
   629  0022                     ??_ADC_Read:	
   630  0022                     Button_Press@input:	
   631                           ; 1 bytes @ 0x2
   632                           
   633  0022                     ___wmul@multiplicand:	
   634                           ; 1 bytes @ 0x2
   635                           
   636  0022                     ___lwdiv@dividend:	
   637                           ; 2 bytes @ 0x2
   638                           
   639                           
   640                           ; 2 bytes @ 0x2
   641  0022                     	ds	1
   642  0023                     ??_UART_Write:	
   643  0023                     ___ftpack@exp:	
   644                           ; 1 bytes @ 0x3
   645                           
   646                           
   647                           ; 1 bytes @ 0x3
   648  0023                     	ds	1
   649  0024                     ??___wmul:	
   650  0024                     ??___lwdiv:	
   651                           ; 1 bytes @ 0x4
   652                           
   653  0024                     ADC_Read@ANC:	
   654                           ; 1 bytes @ 0x4
   655                           
   656  0024                     UART_Write@i:	
   657                           ; 1 bytes @ 0x4
   658                           
   659  0024                     ___ftpack@sign:	
   660                           ; 1 bytes @ 0x4
   661                           
   662  0024                     ___wmul@product:	
   663                           ; 1 bytes @ 0x4
   664                           
   665                           
   666                           ; 2 bytes @ 0x4
   667  0024                     	ds	1
   668  0025                     ??_Init:	
   669  0025                     ??___ftpack:	
   670                           ; 1 bytes @ 0x5
   671                           
   672  0025                     ___lwdiv@counter:	
   673                           ; 1 bytes @ 0x5
   674                           
   675                           
   676                           ; 1 bytes @ 0x5
   677  0025                     	ds	1
   678  0026                     ___lwdiv@quotient:	
   679                           
   680                           ; 2 bytes @ 0x6
   681  0026                     	ds	2
   682  0028                     ?___lwmod:	
   683  0028                     ?___awtoft:	
   684                           ; 2 bytes @ 0x8
   685                           
   686  0028                     ?___lbtoft:	
   687                           ; 3 bytes @ 0x8
   688                           
   689  0028                     ?___lwtoft:	
   690                           ; 3 bytes @ 0x8
   691                           
   692  0028                     ___awtoft@c:	
   693                           ; 3 bytes @ 0x8
   694                           
   695  0028                     ___lwmod@divisor:	
   696                           ; 2 bytes @ 0x8
   697                           
   698  0028                     ___lwtoft@c:	
   699                           ; 2 bytes @ 0x8
   700                           
   701                           
   702                           ; 2 bytes @ 0x8
   703  0028                     	ds	2
   704  002A                     ___lwmod@dividend:	
   705                           
   706                           ; 2 bytes @ 0xA
   707  002A                     	ds	1
   708  002B                     ??___awtoft:	
   709  002B                     ??___lbtoft:	
   710                           ; 1 bytes @ 0xB
   711                           
   712  002B                     ??___lwtoft:	
   713                           ; 1 bytes @ 0xB
   714                           
   715                           
   716                           ; 1 bytes @ 0xB
   717  002B                     	ds	1
   718  002C                     ??___lwmod:	
   719  002C                     ?___ftadd:	
   720                           ; 1 bytes @ 0xC
   721                           
   722  002C                     ___ftadd@f1:	
   723                           ; 3 bytes @ 0xC
   724                           
   725                           
   726                           ; 3 bytes @ 0xC
   727  002C                     	ds	1
   728  002D                     ___awtoft@sign:	
   729  002D                     ___lwmod@counter:	
   730                           ; 1 bytes @ 0xD
   731                           
   732                           
   733                           ; 1 bytes @ 0xD
   734  002D                     	ds	1
   735  002E                     ?_floatTostr:	
   736  002E                     ?___ftmul:	
   737                           ; 1 bytes @ 0xE
   738                           
   739  002E                     floatTostr@num:	
   740                           ; 3 bytes @ 0xE
   741                           
   742  002E                     ___ftmul@f1:	
   743                           ; 2 bytes @ 0xE
   744                           
   745                           
   746                           ; 3 bytes @ 0xE
   747  002E                     	ds	1
   748  002F                     ___lbtoft@c:	
   749  002F                     ___ftadd@f2:	
   750                           ; 1 bytes @ 0xF
   751                           
   752                           
   753                           ; 3 bytes @ 0xF
   754  002F                     	ds	1
   755  0030                     floatTostr@txt:	
   756                           
   757                           ; 1 bytes @ 0x10
   758  0030                     	ds	1
   759  0031                     ??_floatTostr:	
   760  0031                     ___ftmul@f2:	
   761                           ; 1 bytes @ 0x11
   762                           
   763                           
   764                           ; 3 bytes @ 0x11
   765  0031                     	ds	1
   766  0032                     ??___ftadd:	
   767                           
   768                           ; 1 bytes @ 0x12
   769  0032                     	ds	2
   770  0034                     ??___ftmul:	
   771                           
   772                           ; 1 bytes @ 0x14
   773  0034                     	ds	2
   774  0036                     ___ftadd@sign:	
   775                           
   776                           ; 1 bytes @ 0x16
   777  0036                     	ds	1
   778  0037                     ___ftadd@exp2:	
   779                           
   780                           ; 1 bytes @ 0x17
   781  0037                     	ds	1
   782  0038                     ___ftadd@exp1:	
   783  0038                     ___ftmul@exp:	
   784                           ; 1 bytes @ 0x18
   785                           
   786                           
   787                           ; 1 bytes @ 0x18
   788  0038                     	ds	1
   789  0039                     ___ftmul@f3_as_product:	
   790                           
   791                           ; 3 bytes @ 0x19
   792  0039                     	ds	3
   793  003C                     ___ftmul@cntr:	
   794                           
   795                           ; 1 bytes @ 0x1C
   796  003C                     	ds	1
   797  003D                     ___ftmul@sign:	
   798                           
   799                           ; 1 bytes @ 0x1D
   800  003D                     	ds	1
   801  003E                     ?___ftdiv:	
   802  003E                     ___ftdiv@f2:	
   803                           ; 3 bytes @ 0x1E
   804                           
   805                           
   806                           ; 3 bytes @ 0x1E
   807  003E                     	ds	3
   808  0041                     ___ftdiv@f1:	
   809                           
   810                           ; 3 bytes @ 0x21
   811  0041                     	ds	3
   812  0044                     ??___ftdiv:	
   813                           
   814                           ; 1 bytes @ 0x24
   815  0044                     	ds	4
   816  0048                     ___ftdiv@cntr:	
   817                           
   818                           ; 1 bytes @ 0x28
   819  0048                     	ds	1
   820  0049                     ___ftdiv@f3:	
   821                           
   822                           ; 3 bytes @ 0x29
   823  0049                     	ds	3
   824  004C                     ___ftdiv@exp:	
   825                           
   826                           ; 1 bytes @ 0x2C
   827  004C                     	ds	1
   828  004D                     ___ftdiv@sign:	
   829                           
   830                           ; 1 bytes @ 0x2D
   831  004D                     	ds	1
   832  004E                     ?___fttol:	
   833  004E                     ___fttol@f1:	
   834                           ; 4 bytes @ 0x2E
   835                           
   836                           
   837                           ; 3 bytes @ 0x2E
   838  004E                     	ds	4
   839  0052                     ??___fttol:	
   840                           
   841                           ; 1 bytes @ 0x32
   842  0052                     	ds	4
   843  0056                     ___fttol@sign1:	
   844                           
   845                           ; 1 bytes @ 0x36
   846  0056                     	ds	1
   847  0057                     ___fttol@lval:	
   848                           
   849                           ; 4 bytes @ 0x37
   850  0057                     	ds	4
   851  005B                     ___fttol@exp1:	
   852                           
   853                           ; 1 bytes @ 0x3B
   854  005B                     	ds	1
   855  005C                     ?_UART_Send:	
   856  005C                     ?_ADC_RMS:	
   857                           ; 1 bytes @ 0x3C
   858                           
   859  005C                     ?_ADC_PF:	
   860                           ; 1 bytes @ 0x3C
   861                           
   862  005C                     ?_AVG:	
   863                           ; 1 bytes @ 0x3C
   864                           
   865  005C                     ADC_RMS@ANC:	
   866                           ; 2 bytes @ 0x3C
   867                           
   868  005C                     ADC_PF@index:	
   869                           ; 1 bytes @ 0x3C
   870                           
   871  005C                     AVG@index:	
   872                           ; 1 bytes @ 0x3C
   873                           
   874  005C                     UART_Send@temp:	
   875                           ; 1 bytes @ 0x3C
   876                           
   877                           
   878                           ; 2 bytes @ 0x3C
   879  005C                     	ds	1
   880  005D                     ??_ADC_PF:	
   881  005D                     ADC_RMS@rate:	
   882                           ; 1 bytes @ 0x3D
   883                           
   884                           
   885                           ; 2 bytes @ 0x3D
   886  005D                     	ds	1
   887  005E                     ??_AVG:	
   888  005E                     UART_Send@ch:	
   889                           ; 1 bytes @ 0x3E
   890                           
   891                           
   892                           ; 1 bytes @ 0x3E
   893  005E                     	ds	1
   894  005F                     ??_UART_Send:	
   895  005F                     ADC_RMS@index:	
   896                           ; 1 bytes @ 0x3F
   897                           
   898                           
   899                           ; 1 bytes @ 0x3F
   900  005F                     	ds	1
   901  0060                     ??_ADC_RMS:	
   902                           
   903                           ; 1 bytes @ 0x40
   904  0060                     	ds	2
   905  0062                     AVG@avg:	
   906                           
   907                           ; 1 bytes @ 0x42
   908  0062                     	ds	1
   909  0063                     AVG@ret:	
   910  0063                     UART_Send@txt:	
   911                           ; 3 bytes @ 0x43
   912                           
   913                           
   914                           ; 8 bytes @ 0x43
   915  0063                     	ds	3
   916  0066                     ADC_RMS@ARRAY:	
   917  0066                     AVG@ARRAY:	
   918                           ; 1 bytes @ 0x46
   919                           
   920                           
   921                           ; 1 bytes @ 0x46
   922  0066                     	ds	1
   923  0067                     AVG@i:	
   924  0067                     ADC_RMS@max:	
   925                           ; 1 bytes @ 0x47
   926                           
   927                           
   928                           ; 2 bytes @ 0x47
   929  0067                     	ds	2
   930  0069                     ADC_RMS@min:	
   931                           
   932                           ; 2 bytes @ 0x49
   933  0069                     	ds	2
   934  006B                     ??_Send:	
   935  006B                     ADC_RMS@i:	
   936                           ; 1 bytes @ 0x4B
   937                           
   938                           
   939                           ; 1 bytes @ 0x4B
   940  006B                     	ds	1
   941  006C                     ADC_RMS@read:	
   942                           
   943                           ; 2 bytes @ 0x4C
   944  006C                     	ds	2
   945  006E                     ??_Measure:	
   946                           
   947                           ; 1 bytes @ 0x4E
   948  006E                     	ds	1
   949  006F                     ??_main:	
   950                           
   951                           ; 1 bytes @ 0x4F
   952  006F                     	ds	1
   953                           
   954                           	psect	maintext
   955  0A8F                     __pmaintext:	
   956 ;;
   957 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   958 ;;
   959 ;; *************** function _main *****************
   960 ;; Defined at:
   961 ;;		line 27 in file "main.c"
   962 ;; Parameters:    Size  Location     Type
   963 ;;		None
   964 ;; Auto vars:     Size  Location     Type
   965 ;;		None
   966 ;; Return value:  Size  Location     Type
   967 ;;                  1    wreg      void 
   968 ;; Registers used:
   969 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   970 ;; Tracked objects:
   971 ;;		On entry : B00/0
   972 ;;		On exit  : 0/0
   973 ;;		Unchanged: 0/0
   974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   975 ;;      Params:         0       0       0       0
   976 ;;      Locals:         0       0       0       0
   977 ;;      Temps:          0       1       0       0
   978 ;;      Totals:         0       1       0       0
   979 ;;Total ram usage:        1 bytes
   980 ;; Hardware stack levels required when called:    6
   981 ;; This function calls:
   982 ;;		_Button_Press
   983 ;;		_Init
   984 ;;		_Measure
   985 ;;		_Send
   986 ;;		___lwmod
   987 ;; This function is called by:
   988 ;;		Startup code after reset
   989 ;; This function uses a non-reentrant model
   990 ;;
   991                           
   992                           
   993                           ;psect for function _main
   994  0A8F                     _main:	
   995                           
   996                           ;main.c: 28: Init();
   997                           
   998                           ;incstack = 0
   999                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1000  0A8F  158A  2148  158A   	fcall	_Init
  1001  0A92                     l2870:	
  1002                           ;main.c: 29: while(1){
  1003                           
  1004                           
  1005                           ;main.c: 30: CHAR_STATE = Button_Press();
  1006  0A92  158A  2238  158A   	fcall	_Button_Press
  1007  0A95  1283               	bcf	3,5	;RP0=0, select bank0
  1008  0A96  1303               	bcf	3,6	;RP1=0, select bank0
  1009  0A97  00EF               	movwf	??_main
  1010  0A98  086F               	movf	??_main,w
  1011  0A99  00F1               	movwf	_CHAR_STATE
  1012                           
  1013                           ;main.c: 31: if(TIME_MS%200==0)
  1014  0A9A  30C8               	movlw	200
  1015  0A9B  00A8               	movwf	___lwmod@divisor
  1016  0A9C  3000               	movlw	0
  1017  0A9D  00A9               	movwf	___lwmod@divisor+1
  1018  0A9E  1683               	bsf	3,5	;RP0=1, select bank1
  1019  0A9F  1303               	bcf	3,6	;RP1=0, select bank1
  1020  0AA0  0821               	movf	(_TIME_MS+1)^(0+128),w
  1021  0AA1  1283               	bcf	3,5	;RP0=0, select bank0
  1022  0AA2  1303               	bcf	3,6	;RP1=0, select bank0
  1023  0AA3  00AB               	movwf	___lwmod@dividend+1
  1024  0AA4  1683               	bsf	3,5	;RP0=1, select bank1
  1025  0AA5  1303               	bcf	3,6	;RP1=0, select bank1
  1026  0AA6  0820               	movf	_TIME_MS^(0+128),w
  1027  0AA7  1283               	bcf	3,5	;RP0=0, select bank0
  1028  0AA8  1303               	bcf	3,6	;RP1=0, select bank0
  1029  0AA9  00AA               	movwf	___lwmod@dividend
  1030  0AAA  158A  22ED  158A   	fcall	___lwmod
  1031  0AAD  1283               	bcf	3,5	;RP0=0, select bank0
  1032  0AAE  1303               	bcf	3,6	;RP1=0, select bank0
  1033  0AAF  0828               	movf	?___lwmod,w
  1034  0AB0  0429               	iorwf	?___lwmod+1,w
  1035  0AB1  1D03               	btfss	3,2
  1036  0AB2  2AB6               	goto	l2876
  1037                           
  1038                           ;main.c: 32: Measure();
  1039  0AB3  158A  25F7  158A   	fcall	_Measure
  1040  0AB6                     l2876:	
  1041                           
  1042                           ;main.c: 33: if(CHAR_STATE != 0)
  1043  0AB6  0871               	movf	_CHAR_STATE,w
  1044  0AB7  1903               	btfsc	3,2
  1045  0AB8  2A92               	goto	l2870
  1046                           
  1047                           ;main.c: 34: Send();
  1048  0AB9  118A  260C  158A   	fcall	_Send
  1049  0ABC  2A92               	goto	l2870
  1050  0ABD                     __end_of_main:	
  1051                           
  1052                           	psect	text1
  1053  060C                     __ptext1:	
  1054 ;; *************** function _Send *****************
  1055 ;; Defined at:
  1056 ;;		line 74 in file "main.c"
  1057 ;; Parameters:    Size  Location     Type
  1058 ;;		None
  1059 ;; Auto vars:     Size  Location     Type
  1060 ;;  i               1    0        unsigned char 
  1061 ;; Return value:  Size  Location     Type
  1062 ;;                  1    wreg      void 
  1063 ;; Registers used:
  1064 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1065 ;; Tracked objects:
  1066 ;;		On entry : 0/0
  1067 ;;		On exit  : 0/0
  1068 ;;		Unchanged: 0/0
  1069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1070 ;;      Params:         0       0       0       0
  1071 ;;      Locals:         0       0       2       0
  1072 ;;      Temps:          0       4       0       0
  1073 ;;      Totals:         0       4       2       0
  1074 ;;Total ram usage:        6 bytes
  1075 ;; Hardware stack levels used:    1
  1076 ;; Hardware stack levels required when called:    5
  1077 ;; This function calls:
  1078 ;;		_Toggle_Relay
  1079 ;;		_UART_Send
  1080 ;;		___ftdiv
  1081 ;;		___fttol
  1082 ;;		___lwtoft
  1083 ;;		___wmul
  1084 ;; This function is called by:
  1085 ;;		_main
  1086 ;; This function uses a non-reentrant model
  1087 ;;
  1088                           
  1089                           
  1090                           ;psect for function _Send
  1091  060C                     _Send:	
  1092                           
  1093                           ;main.c: 75: uint8_t i;
  1094                           ;main.c: 76: switch(CHAR_STATE){
  1095                           
  1096                           ;incstack = 0
  1097                           ; Regs used in _Send: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1098  060C  2F03               	goto	l2866
  1099  060D                     l2848:	
  1100                           ;main.c: 77: case 'T':
  1101                           
  1102                           
  1103                           ;main.c: 78: Toggle_Relay();
  1104  060D  158A  215A  118A   	fcall	_Toggle_Relay
  1105                           
  1106                           ;main.c: 79: UART_Send(((PORTC&0X08)>>3),'@');
  1107  0610  1283               	bcf	3,5	;RP0=0, select bank0
  1108  0611  1303               	bcf	3,6	;RP1=0, select bank0
  1109  0612  0807               	movf	7,w	;volatile
  1110  0613  00EB               	movwf	??_Send
  1111  0614  3003               	movlw	3
  1112  0615                     u3815:	
  1113  0615  1003               	clrc
  1114  0616  0CEB               	rrf	??_Send,f
  1115  0617  3EFF               	addlw	-1
  1116  0618  1D03               	skipz
  1117  0619  2E15               	goto	u3815
  1118  061A  086B               	movf	??_Send,w
  1119  061B  3901               	andlw	1
  1120  061C  00EC               	movwf	??_Send+1
  1121  061D  01ED               	clrf	??_Send+2
  1122  061E  086C               	movf	??_Send+1,w
  1123  061F  00DC               	movwf	UART_Send@temp
  1124  0620  086D               	movf	??_Send+2,w
  1125  0621  00DD               	movwf	UART_Send@temp+1
  1126  0622  3040               	movlw	64
  1127  0623  00EE               	movwf	??_Send+3
  1128  0624  086E               	movf	??_Send+3,w
  1129  0625  00DE               	movwf	UART_Send@ch
  1130  0626  158A  235F         	fcall	_UART_Send
  1131                           
  1132                           ;main.c: 80: CHAR_STATE = 0;
  1133  0628  01F1               	clrf	_CHAR_STATE
  1134                           
  1135                           ;main.c: 81: break;
  1136  0629  0008               	return
  1137  062A                     l2854:	
  1138                           ;main.c: 82: case 'S':
  1139                           
  1140                           
  1141                           ;main.c: 83: UART_Send(F_VALUE ,'F');
  1142  062A  1683               	bsf	3,5	;RP0=1, select bank1
  1143  062B  1303               	bcf	3,6	;RP1=0, select bank1
  1144  062C  086C               	movf	(_F_VALUE+1)^(0+128),w
  1145  062D  1283               	bcf	3,5	;RP0=0, select bank0
  1146  062E  1303               	bcf	3,6	;RP1=0, select bank0
  1147  062F  00DD               	movwf	UART_Send@temp+1
  1148  0630  1683               	bsf	3,5	;RP0=1, select bank1
  1149  0631  1303               	bcf	3,6	;RP1=0, select bank1
  1150  0632  086B               	movf	_F_VALUE^(0+128),w
  1151  0633  1283               	bcf	3,5	;RP0=0, select bank0
  1152  0634  1303               	bcf	3,6	;RP1=0, select bank0
  1153  0635  00DC               	movwf	UART_Send@temp
  1154  0636  3046               	movlw	70
  1155  0637  00EB               	movwf	??_Send
  1156  0638  086B               	movf	??_Send,w
  1157  0639  00DE               	movwf	UART_Send@ch
  1158  063A  158A  235F  118A   	fcall	_UART_Send
  1159                           
  1160                           ;main.c: 84: UART_Send(V_VALUE ,'V');
  1161  063D  1683               	bsf	3,5	;RP0=1, select bank1
  1162  063E  1303               	bcf	3,6	;RP1=0, select bank1
  1163  063F  0827               	movf	(_V_VALUE+1)^(0+128),w
  1164  0640  1283               	bcf	3,5	;RP0=0, select bank0
  1165  0641  1303               	bcf	3,6	;RP1=0, select bank0
  1166  0642  00DD               	movwf	UART_Send@temp+1
  1167  0643  1683               	bsf	3,5	;RP0=1, select bank1
  1168  0644  1303               	bcf	3,6	;RP1=0, select bank1
  1169  0645  0826               	movf	_V_VALUE^(0+128),w
  1170  0646  1283               	bcf	3,5	;RP0=0, select bank0
  1171  0647  1303               	bcf	3,6	;RP1=0, select bank0
  1172  0648  00DC               	movwf	UART_Send@temp
  1173  0649  3056               	movlw	86
  1174  064A  00EB               	movwf	??_Send
  1175  064B  086B               	movf	??_Send,w
  1176  064C  00DE               	movwf	UART_Send@ch
  1177  064D  158A  235F  118A   	fcall	_UART_Send
  1178                           
  1179                           ;main.c: 85: UART_Send(A_VALUE ,'A');
  1180  0650  1683               	bsf	3,5	;RP0=1, select bank1
  1181  0651  1303               	bcf	3,6	;RP1=0, select bank1
  1182  0652  0825               	movf	(_A_VALUE+1)^(0+128),w
  1183  0653  1283               	bcf	3,5	;RP0=0, select bank0
  1184  0654  1303               	bcf	3,6	;RP1=0, select bank0
  1185  0655  00DD               	movwf	UART_Send@temp+1
  1186  0656  1683               	bsf	3,5	;RP0=1, select bank1
  1187  0657  1303               	bcf	3,6	;RP1=0, select bank1
  1188  0658  0824               	movf	_A_VALUE^(0+128),w
  1189  0659  1283               	bcf	3,5	;RP0=0, select bank0
  1190  065A  1303               	bcf	3,6	;RP1=0, select bank0
  1191  065B  00DC               	movwf	UART_Send@temp
  1192  065C  3041               	movlw	65
  1193  065D  00EB               	movwf	??_Send
  1194  065E  086B               	movf	??_Send,w
  1195  065F  00DE               	movwf	UART_Send@ch
  1196  0660  158A  235F  118A   	fcall	_UART_Send
  1197                           
  1198                           ;main.c: 86: UART_Send(PF_VALUE ,'%');
  1199  0663  1683               	bsf	3,5	;RP0=1, select bank1
  1200  0664  1303               	bcf	3,6	;RP1=0, select bank1
  1201  0665  0823               	movf	(_PF_VALUE+1)^(0+128),w
  1202  0666  1283               	bcf	3,5	;RP0=0, select bank0
  1203  0667  1303               	bcf	3,6	;RP1=0, select bank0
  1204  0668  00DD               	movwf	UART_Send@temp+1
  1205  0669  1683               	bsf	3,5	;RP0=1, select bank1
  1206  066A  1303               	bcf	3,6	;RP1=0, select bank1
  1207  066B  0822               	movf	_PF_VALUE^(0+128),w
  1208  066C  1283               	bcf	3,5	;RP0=0, select bank0
  1209  066D  1303               	bcf	3,6	;RP1=0, select bank0
  1210  066E  00DC               	movwf	UART_Send@temp
  1211  066F  3025               	movlw	37
  1212  0670  00EB               	movwf	??_Send
  1213  0671  086B               	movf	??_Send,w
  1214  0672  00DE               	movwf	UART_Send@ch
  1215  0673  158A  235F  118A   	fcall	_UART_Send
  1216                           
  1217                           ;main.c: 87: UART_Send(((PORTC&0X08)>>3) ,'@');
  1218  0676  1283               	bcf	3,5	;RP0=0, select bank0
  1219  0677  1303               	bcf	3,6	;RP1=0, select bank0
  1220  0678  0807               	movf	7,w	;volatile
  1221  0679  00EB               	movwf	??_Send
  1222  067A  3003               	movlw	3
  1223  067B                     u3825:	
  1224  067B  1003               	clrc
  1225  067C  0CEB               	rrf	??_Send,f
  1226  067D  3EFF               	addlw	-1
  1227  067E  1D03               	skipz
  1228  067F  2E7B               	goto	u3825
  1229  0680  086B               	movf	??_Send,w
  1230  0681  3901               	andlw	1
  1231  0682  00EC               	movwf	??_Send+1
  1232  0683  01ED               	clrf	??_Send+2
  1233  0684  086C               	movf	??_Send+1,w
  1234  0685  00DC               	movwf	UART_Send@temp
  1235  0686  086D               	movf	??_Send+2,w
  1236  0687  00DD               	movwf	UART_Send@temp+1
  1237  0688  3040               	movlw	64
  1238  0689  00EE               	movwf	??_Send+3
  1239  068A  086E               	movf	??_Send+3,w
  1240  068B  00DE               	movwf	UART_Send@ch
  1241  068C  158A  235F         	fcall	_UART_Send
  1242                           
  1243                           ;main.c: 88: CHAR_STATE = 0;
  1244  068E  01F1               	clrf	_CHAR_STATE
  1245                           
  1246                           ;main.c: 89: break;
  1247  068F  0008               	return
  1248  0690                     l2858:	
  1249                           ;main.c: 90: case 'M':
  1250                           
  1251                           
  1252                           ;main.c: 91: UART_Send((uint16_t)((float)(V_VALUE*A_VALUE*PF_VALUE)/100000000.0) ,'P');
  1253  0690  1683               	bsf	3,5	;RP0=1, select bank1
  1254  0691  1303               	bcf	3,6	;RP1=0, select bank1
  1255  0692  0825               	movf	(_A_VALUE+1)^(0+128),w
  1256  0693  1283               	bcf	3,5	;RP0=0, select bank0
  1257  0694  1303               	bcf	3,6	;RP1=0, select bank0
  1258  0695  00A3               	movwf	___wmul@multiplicand+1
  1259  0696  1683               	bsf	3,5	;RP0=1, select bank1
  1260  0697  1303               	bcf	3,6	;RP1=0, select bank1
  1261  0698  0824               	movf	_A_VALUE^(0+128),w
  1262  0699  1283               	bcf	3,5	;RP0=0, select bank0
  1263  069A  1303               	bcf	3,6	;RP1=0, select bank0
  1264  069B  00A2               	movwf	___wmul@multiplicand
  1265  069C  1683               	bsf	3,5	;RP0=1, select bank1
  1266  069D  1303               	bcf	3,6	;RP1=0, select bank1
  1267  069E  0827               	movf	(_V_VALUE+1)^(0+128),w
  1268  069F  1283               	bcf	3,5	;RP0=0, select bank0
  1269  06A0  1303               	bcf	3,6	;RP1=0, select bank0
  1270  06A1  00A1               	movwf	___wmul@multiplier+1
  1271  06A2  1683               	bsf	3,5	;RP0=1, select bank1
  1272  06A3  1303               	bcf	3,6	;RP1=0, select bank1
  1273  06A4  0826               	movf	_V_VALUE^(0+128),w
  1274  06A5  1283               	bcf	3,5	;RP0=0, select bank0
  1275  06A6  1303               	bcf	3,6	;RP1=0, select bank0
  1276  06A7  00A0               	movwf	___wmul@multiplier
  1277  06A8  158A  21F1  118A   	fcall	___wmul
  1278  06AB  1283               	bcf	3,5	;RP0=0, select bank0
  1279  06AC  1303               	bcf	3,6	;RP1=0, select bank0
  1280  06AD  0821               	movf	?___wmul+1,w
  1281  06AE  1683               	bsf	3,5	;RP0=1, select bank1
  1282  06AF  1303               	bcf	3,6	;RP1=0, select bank1
  1283  06B0  00CC               	movwf	(_Send$961+1)^(0+128)
  1284  06B1  1283               	bcf	3,5	;RP0=0, select bank0
  1285  06B2  1303               	bcf	3,6	;RP1=0, select bank0
  1286  06B3  0820               	movf	?___wmul,w
  1287  06B4  1683               	bsf	3,5	;RP0=1, select bank1
  1288  06B5  1303               	bcf	3,6	;RP1=0, select bank1
  1289  06B6  00CB               	movwf	_Send$961^(0+128)
  1290                           
  1291                           ;main.c: 91: UART_Send((uint16_t)((float)(V_VALUE*A_VALUE*PF_VALUE)/100000000.0) ,'P');
  1292  06B7  0823               	movf	(_PF_VALUE+1)^(0+128),w
  1293  06B8  1283               	bcf	3,5	;RP0=0, select bank0
  1294  06B9  1303               	bcf	3,6	;RP1=0, select bank0
  1295  06BA  00A3               	movwf	___wmul@multiplicand+1
  1296  06BB  1683               	bsf	3,5	;RP0=1, select bank1
  1297  06BC  1303               	bcf	3,6	;RP1=0, select bank1
  1298  06BD  0822               	movf	_PF_VALUE^(0+128),w
  1299  06BE  1283               	bcf	3,5	;RP0=0, select bank0
  1300  06BF  1303               	bcf	3,6	;RP1=0, select bank0
  1301  06C0  00A2               	movwf	___wmul@multiplicand
  1302  06C1  1683               	bsf	3,5	;RP0=1, select bank1
  1303  06C2  1303               	bcf	3,6	;RP1=0, select bank1
  1304  06C3  084C               	movf	(_Send$961+1)^(0+128),w
  1305  06C4  1283               	bcf	3,5	;RP0=0, select bank0
  1306  06C5  1303               	bcf	3,6	;RP1=0, select bank0
  1307  06C6  00A1               	movwf	___wmul@multiplier+1
  1308  06C7  1683               	bsf	3,5	;RP0=1, select bank1
  1309  06C8  1303               	bcf	3,6	;RP1=0, select bank1
  1310  06C9  084B               	movf	_Send$961^(0+128),w
  1311  06CA  1283               	bcf	3,5	;RP0=0, select bank0
  1312  06CB  1303               	bcf	3,6	;RP1=0, select bank0
  1313  06CC  00A0               	movwf	___wmul@multiplier
  1314  06CD  158A  21F1  118A   	fcall	___wmul
  1315  06D0  1283               	bcf	3,5	;RP0=0, select bank0
  1316  06D1  1303               	bcf	3,6	;RP1=0, select bank0
  1317  06D2  0821               	movf	?___wmul+1,w
  1318  06D3  00A9               	movwf	___lwtoft@c+1
  1319  06D4  0820               	movf	?___wmul,w
  1320  06D5  00A8               	movwf	___lwtoft@c
  1321  06D6  158A  2185  118A   	fcall	___lwtoft
  1322  06D9  1283               	bcf	3,5	;RP0=0, select bank0
  1323  06DA  1303               	bcf	3,6	;RP1=0, select bank0
  1324  06DB  0828               	movf	?___lwtoft,w
  1325  06DC  00C1               	movwf	___ftdiv@f1
  1326  06DD  0829               	movf	?___lwtoft+1,w
  1327  06DE  00C2               	movwf	___ftdiv@f1+1
  1328  06DF  082A               	movf	?___lwtoft+2,w
  1329  06E0  00C3               	movwf	___ftdiv@f1+2
  1330  06E1  30BC               	movlw	188
  1331  06E2  00BE               	movwf	___ftdiv@f2
  1332  06E3  30BE               	movlw	190
  1333  06E4  00BF               	movwf	___ftdiv@f2+1
  1334  06E5  304C               	movlw	76
  1335  06E6  00C0               	movwf	___ftdiv@f2+2
  1336  06E7  158A  2749  118A   	fcall	___ftdiv
  1337  06EA  1283               	bcf	3,5	;RP0=0, select bank0
  1338  06EB  1303               	bcf	3,6	;RP1=0, select bank0
  1339  06EC  083E               	movf	?___ftdiv,w
  1340  06ED  00CE               	movwf	___fttol@f1
  1341  06EE  083F               	movf	?___ftdiv+1,w
  1342  06EF  00CF               	movwf	___fttol@f1+1
  1343  06F0  0840               	movf	?___ftdiv+2,w
  1344  06F1  00D0               	movwf	___fttol@f1+2
  1345  06F2  158A  24D3  118A   	fcall	___fttol
  1346  06F5  1283               	bcf	3,5	;RP0=0, select bank0
  1347  06F6  1303               	bcf	3,6	;RP1=0, select bank0
  1348  06F7  084F               	movf	?___fttol+1,w
  1349  06F8  00DD               	movwf	UART_Send@temp+1
  1350  06F9  084E               	movf	?___fttol,w
  1351  06FA  00DC               	movwf	UART_Send@temp
  1352  06FB  3050               	movlw	80
  1353  06FC  00EB               	movwf	??_Send
  1354  06FD  086B               	movf	??_Send,w
  1355  06FE  00DE               	movwf	UART_Send@ch
  1356  06FF  158A  235F         	fcall	_UART_Send
  1357                           
  1358                           ;main.c: 92: CHAR_STATE = 0;
  1359  0701  01F1               	clrf	_CHAR_STATE
  1360                           
  1361                           ;main.c: 94: }
  1362                           
  1363                           ;main.c: 93: break;
  1364  0702  0008               	return
  1365  0703                     l2866:	
  1366  0703  0871               	movf	_CHAR_STATE,w
  1367                           
  1368                           ; Switch size 1, requested type "space"
  1369                           ; Number of cases is 3, Range of values is 77 to 84
  1370                           ; switch strategies available:
  1371                           ; Name         Instructions Cycles
  1372                           ; simple_byte           10     6 (average)
  1373                           ; direct_byte           26    10 (fixed)
  1374                           ; jumptable            263     9 (fixed)
  1375                           ;	Chosen strategy is simple_byte
  1376  0704  3A4D               	xorlw	77	; case 77
  1377  0705  1903               	skipnz
  1378  0706  2E90               	goto	l2858
  1379  0707  3A1E               	xorlw	30	; case 83
  1380  0708  1903               	skipnz
  1381  0709  2E2A               	goto	l2854
  1382  070A  3A07               	xorlw	7	; case 84
  1383  070B  1903               	skipnz
  1384  070C  2E0D               	goto	l2848
  1385  070D  2F0E               	goto	l191
  1386  070E                     l191:	
  1387  070E  0008               	return
  1388  070F                     __end_of_Send:	
  1389                           
  1390                           	psect	text2
  1391  0B5F                     __ptext2:	
  1392 ;; *************** function _UART_Send *****************
  1393 ;; Defined at:
  1394 ;;		line 58 in file "uart.c"
  1395 ;; Parameters:    Size  Location     Type
  1396 ;;  temp            2   60[BANK0 ] unsigned int 
  1397 ;;  ch              1   62[BANK0 ] unsigned char 
  1398 ;; Auto vars:     Size  Location     Type
  1399 ;;  txt             8   67[BANK0 ] unsigned char [8]
  1400 ;; Return value:  Size  Location     Type
  1401 ;;                  1    wreg      void 
  1402 ;; Registers used:
  1403 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1404 ;; Tracked objects:
  1405 ;;		On entry : 0/0
  1406 ;;		On exit  : 0/0
  1407 ;;		Unchanged: 0/0
  1408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1409 ;;      Params:         0       3       0       0
  1410 ;;      Locals:         0       8       0       0
  1411 ;;      Temps:          0       4       0       0
  1412 ;;      Totals:         0      15       0       0
  1413 ;;Total ram usage:       15 bytes
  1414 ;; Hardware stack levels used:    1
  1415 ;; Hardware stack levels required when called:    4
  1416 ;; This function calls:
  1417 ;;		_UART_PutC
  1418 ;;		_UART_Write
  1419 ;;		_floatTostr
  1420 ;; This function is called by:
  1421 ;;		_Send
  1422 ;; This function uses a non-reentrant model
  1423 ;;
  1424                           
  1425                           
  1426                           ;psect for function _UART_Send
  1427  0B5F                     _UART_Send:	
  1428                           
  1429                           ;uart.c: 59: int8_t txt [8] = "@000000\0";
  1430                           
  1431                           ;incstack = 0
  1432                           ; Regs used in _UART_Send: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1433  0B5F  3063               	movlw	UART_Send@txt& (0+255)
  1434  0B60  0084               	movwf	4
  1435  0B61  30E3               	movlw	low UART_Send@F988
  1436  0B62  1283               	bcf	3,5	;RP0=0, select bank0
  1437  0B63  1303               	bcf	3,6	;RP1=0, select bank0
  1438  0B64  00DF               	movwf	??_UART_Send
  1439  0B65  0804               	movf	4,w
  1440  0B66  00E0               	movwf	??_UART_Send+1
  1441  0B67  3008               	movlw	8
  1442  0B68  00E1               	movwf	??_UART_Send+2
  1443  0B69                     u3720:	
  1444  0B69  085F               	movf	??_UART_Send,w
  1445  0B6A  0084               	movwf	4
  1446  0B6B  1383               	bcf	3,7	;select IRP bank1
  1447  0B6C  0800               	movf	0,w
  1448  0B6D  00E2               	movwf	??_UART_Send+3
  1449  0B6E  0ADF               	incf	??_UART_Send,f
  1450  0B6F  0860               	movf	??_UART_Send+1,w
  1451  0B70  0084               	movwf	4
  1452  0B71  0862               	movf	??_UART_Send+3,w
  1453  0B72  0080               	movwf	0
  1454  0B73  0AE0               	incf	??_UART_Send+1,f
  1455  0B74  0BE1               	decfsz	??_UART_Send+2,f
  1456  0B75  2B69               	goto	u3720
  1457                           
  1458                           ;uart.c: 60: txt[0] = ch;
  1459  0B76  085E               	movf	UART_Send@ch,w
  1460  0B77  00DF               	movwf	??_UART_Send
  1461  0B78  085F               	movf	??_UART_Send,w
  1462  0B79  00E3               	movwf	UART_Send@txt
  1463                           
  1464                           ;uart.c: 61: floatTostr(temp, txt);
  1465  0B7A  085D               	movf	UART_Send@temp+1,w
  1466  0B7B  00AF               	movwf	floatTostr@num+1
  1467  0B7C  085C               	movf	UART_Send@temp,w
  1468  0B7D  00AE               	movwf	floatTostr@num
  1469  0B7E  3063               	movlw	(low (UART_Send@txt| 0))& (0+255)
  1470  0B7F  00DF               	movwf	??_UART_Send
  1471  0B80  085F               	movf	??_UART_Send,w
  1472  0B81  00B0               	movwf	floatTostr@txt
  1473  0B82  158A  269F  158A   	fcall	_floatTostr
  1474                           
  1475                           ;uart.c: 62: if(ch == '%'){
  1476  0B85  3025               	movlw	37
  1477  0B86  1283               	bcf	3,5	;RP0=0, select bank0
  1478  0B87  1303               	bcf	3,6	;RP1=0, select bank0
  1479  0B88  065E               	xorwf	UART_Send@ch,w
  1480  0B89  1D03               	btfss	3,2
  1481  0B8A  2B8F               	goto	l2790
  1482                           
  1483                           ;uart.c: 64: else txt[1] = '+';
  1484                           
  1485                           ;uart.c: 63: if(temp>100000) txt[1] = '-';
  1486  0B8B  302B               	movlw	43
  1487  0B8C  00DF               	movwf	??_UART_Send
  1488  0B8D  085F               	movf	??_UART_Send,w
  1489  0B8E  00E4               	movwf	UART_Send@txt+1
  1490  0B8F                     l2790:	
  1491                           
  1492                           ;uart.c: 65: }
  1493                           ;uart.c: 66: UART_Write(txt);
  1494  0B8F  3063               	movlw	(low (UART_Send@txt| 0))& (0+255)
  1495  0B90  00A1               	movwf	UART_Write@data
  1496  0B91  3000               	movlw	0
  1497  0B92  00A2               	movwf	UART_Write@data+1
  1498  0B93  158A  2263  158A   	fcall	_UART_Write
  1499                           
  1500                           ;uart.c: 67: if(ch == '@'){
  1501  0B96  3040               	movlw	64
  1502  0B97  1283               	bcf	3,5	;RP0=0, select bank0
  1503  0B98  1303               	bcf	3,6	;RP1=0, select bank0
  1504  0B99  065E               	xorwf	UART_Send@ch,w
  1505  0B9A  1D03               	btfss	3,2
  1506  0B9B  0008               	return
  1507                           
  1508                           ;uart.c: 68: UART_PutC('\n');
  1509  0B9C  300A               	movlw	10
  1510  0B9D  158A  2125  158A   	fcall	_UART_PutC
  1511                           
  1512                           ;uart.c: 69: UART_PutC('\r');
  1513  0BA0  300D               	movlw	13
  1514  0BA1  158A  2125         	fcall	_UART_PutC
  1515  0BA3  0008               	return
  1516  0BA4                     __end_of_UART_Send:	
  1517                           
  1518                           	psect	text3
  1519  0E9F                     __ptext3:	
  1520 ;; *************** function _floatTostr *****************
  1521 ;; Defined at:
  1522 ;;		line 74 in file "uart.c"
  1523 ;; Parameters:    Size  Location     Type
  1524 ;;  num             2   14[BANK0 ] unsigned int 
  1525 ;;  txt             1   16[BANK0 ] PTR unsigned char 
  1526 ;;		 -> UART_Send@txt(8), 
  1527 ;; Auto vars:     Size  Location     Type
  1528 ;;		None
  1529 ;; Return value:  Size  Location     Type
  1530 ;;                  1    wreg      void 
  1531 ;; Registers used:
  1532 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1533 ;; Tracked objects:
  1534 ;;		On entry : 0/0
  1535 ;;		On exit  : 0/0
  1536 ;;		Unchanged: 0/0
  1537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1538 ;;      Params:         0       3       0       0
  1539 ;;      Locals:         0       0       0       0
  1540 ;;      Temps:          0       1       0       0
  1541 ;;      Totals:         0       4       0       0
  1542 ;;Total ram usage:        4 bytes
  1543 ;; Hardware stack levels used:    1
  1544 ;; Hardware stack levels required when called:    3
  1545 ;; This function calls:
  1546 ;;		___lwdiv
  1547 ;;		___lwmod
  1548 ;; This function is called by:
  1549 ;;		_UART_Send
  1550 ;; This function uses a non-reentrant model
  1551 ;;
  1552                           
  1553                           
  1554                           ;psect for function _floatTostr
  1555  0E9F                     _floatTostr:	
  1556                           
  1557                           ;uart.c: 75: txt[6] = ((num )%10) + '0';
  1558                           
  1559                           ;incstack = 0
  1560                           ; Regs used in _floatTostr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1561  0E9F  300A               	movlw	10
  1562  0EA0  1283               	bcf	3,5	;RP0=0, select bank0
  1563  0EA1  1303               	bcf	3,6	;RP1=0, select bank0
  1564  0EA2  00A8               	movwf	___lwmod@divisor
  1565  0EA3  3000               	movlw	0
  1566  0EA4  00A9               	movwf	___lwmod@divisor+1
  1567  0EA5  082F               	movf	floatTostr@num+1,w
  1568  0EA6  00AB               	movwf	___lwmod@dividend+1
  1569  0EA7  082E               	movf	floatTostr@num,w
  1570  0EA8  00AA               	movwf	___lwmod@dividend
  1571  0EA9  158A  22ED  158A   	fcall	___lwmod
  1572  0EAC  1283               	bcf	3,5	;RP0=0, select bank0
  1573  0EAD  1303               	bcf	3,6	;RP1=0, select bank0
  1574  0EAE  0828               	movf	?___lwmod,w
  1575  0EAF  3E30               	addlw	48
  1576  0EB0  00B1               	movwf	??_floatTostr
  1577  0EB1  0830               	movf	floatTostr@txt,w
  1578  0EB2  3E06               	addlw	6
  1579  0EB3  0084               	movwf	4
  1580  0EB4  0831               	movf	??_floatTostr,w
  1581  0EB5  1383               	bcf	3,7	;select IRP bank0
  1582  0EB6  0080               	movwf	0
  1583                           
  1584                           ;uart.c: 76: txt[5] = ((num/10 )%10) + '0';
  1585  0EB7  300A               	movlw	10
  1586  0EB8  00A8               	movwf	___lwmod@divisor
  1587  0EB9  3000               	movlw	0
  1588  0EBA  00A9               	movwf	___lwmod@divisor+1
  1589  0EBB  300A               	movlw	10
  1590  0EBC  00A0               	movwf	___lwdiv@divisor
  1591  0EBD  3000               	movlw	0
  1592  0EBE  00A1               	movwf	___lwdiv@divisor+1
  1593  0EBF  082F               	movf	floatTostr@num+1,w
  1594  0EC0  00A3               	movwf	___lwdiv@dividend+1
  1595  0EC1  082E               	movf	floatTostr@num,w
  1596  0EC2  00A2               	movwf	___lwdiv@dividend
  1597  0EC3  158A  2321  158A   	fcall	___lwdiv
  1598  0EC6  1283               	bcf	3,5	;RP0=0, select bank0
  1599  0EC7  1303               	bcf	3,6	;RP1=0, select bank0
  1600  0EC8  0821               	movf	?___lwdiv+1,w
  1601  0EC9  00AB               	movwf	___lwmod@dividend+1
  1602  0ECA  0820               	movf	?___lwdiv,w
  1603  0ECB  00AA               	movwf	___lwmod@dividend
  1604  0ECC  158A  22ED  158A   	fcall	___lwmod
  1605  0ECF  1283               	bcf	3,5	;RP0=0, select bank0
  1606  0ED0  1303               	bcf	3,6	;RP1=0, select bank0
  1607  0ED1  0828               	movf	?___lwmod,w
  1608  0ED2  3E30               	addlw	48
  1609  0ED3  00B1               	movwf	??_floatTostr
  1610  0ED4  0830               	movf	floatTostr@txt,w
  1611  0ED5  3E05               	addlw	5
  1612  0ED6  0084               	movwf	4
  1613  0ED7  0831               	movf	??_floatTostr,w
  1614  0ED8  1383               	bcf	3,7	;select IRP bank0
  1615  0ED9  0080               	movwf	0
  1616                           
  1617                           ;uart.c: 77: txt[4] = '.';
  1618  0EDA  302E               	movlw	46
  1619  0EDB  00B1               	movwf	??_floatTostr
  1620  0EDC  0830               	movf	floatTostr@txt,w
  1621  0EDD  3E04               	addlw	4
  1622  0EDE  0084               	movwf	4
  1623  0EDF  0831               	movf	??_floatTostr,w
  1624  0EE0  0080               	movwf	0
  1625                           
  1626                           ;uart.c: 78: txt[3] = ((num/100 )%10) + '0';
  1627  0EE1  300A               	movlw	10
  1628  0EE2  00A8               	movwf	___lwmod@divisor
  1629  0EE3  3000               	movlw	0
  1630  0EE4  00A9               	movwf	___lwmod@divisor+1
  1631  0EE5  3064               	movlw	100
  1632  0EE6  00A0               	movwf	___lwdiv@divisor
  1633  0EE7  3000               	movlw	0
  1634  0EE8  00A1               	movwf	___lwdiv@divisor+1
  1635  0EE9  082F               	movf	floatTostr@num+1,w
  1636  0EEA  00A3               	movwf	___lwdiv@dividend+1
  1637  0EEB  082E               	movf	floatTostr@num,w
  1638  0EEC  00A2               	movwf	___lwdiv@dividend
  1639  0EED  158A  2321  158A   	fcall	___lwdiv
  1640  0EF0  1283               	bcf	3,5	;RP0=0, select bank0
  1641  0EF1  1303               	bcf	3,6	;RP1=0, select bank0
  1642  0EF2  0821               	movf	?___lwdiv+1,w
  1643  0EF3  00AB               	movwf	___lwmod@dividend+1
  1644  0EF4  0820               	movf	?___lwdiv,w
  1645  0EF5  00AA               	movwf	___lwmod@dividend
  1646  0EF6  158A  22ED  158A   	fcall	___lwmod
  1647  0EF9  1283               	bcf	3,5	;RP0=0, select bank0
  1648  0EFA  1303               	bcf	3,6	;RP1=0, select bank0
  1649  0EFB  0828               	movf	?___lwmod,w
  1650  0EFC  3E30               	addlw	48
  1651  0EFD  00B1               	movwf	??_floatTostr
  1652  0EFE  0830               	movf	floatTostr@txt,w
  1653  0EFF  3E03               	addlw	3
  1654  0F00  0084               	movwf	4
  1655  0F01  0831               	movf	??_floatTostr,w
  1656  0F02  1383               	bcf	3,7	;select IRP bank0
  1657  0F03  0080               	movwf	0
  1658                           
  1659                           ;uart.c: 79: txt[2] = ((num/1000 )%10) + '0';
  1660  0F04  300A               	movlw	10
  1661  0F05  00A8               	movwf	___lwmod@divisor
  1662  0F06  3000               	movlw	0
  1663  0F07  00A9               	movwf	___lwmod@divisor+1
  1664  0F08  30E8               	movlw	232
  1665  0F09  00A0               	movwf	___lwdiv@divisor
  1666  0F0A  3003               	movlw	3
  1667  0F0B  00A1               	movwf	___lwdiv@divisor+1
  1668  0F0C  082F               	movf	floatTostr@num+1,w
  1669  0F0D  00A3               	movwf	___lwdiv@dividend+1
  1670  0F0E  082E               	movf	floatTostr@num,w
  1671  0F0F  00A2               	movwf	___lwdiv@dividend
  1672  0F10  158A  2321  158A   	fcall	___lwdiv
  1673  0F13  1283               	bcf	3,5	;RP0=0, select bank0
  1674  0F14  1303               	bcf	3,6	;RP1=0, select bank0
  1675  0F15  0821               	movf	?___lwdiv+1,w
  1676  0F16  00AB               	movwf	___lwmod@dividend+1
  1677  0F17  0820               	movf	?___lwdiv,w
  1678  0F18  00AA               	movwf	___lwmod@dividend
  1679  0F19  158A  22ED  158A   	fcall	___lwmod
  1680  0F1C  1283               	bcf	3,5	;RP0=0, select bank0
  1681  0F1D  1303               	bcf	3,6	;RP1=0, select bank0
  1682  0F1E  0828               	movf	?___lwmod,w
  1683  0F1F  3E30               	addlw	48
  1684  0F20  00B1               	movwf	??_floatTostr
  1685  0F21  0830               	movf	floatTostr@txt,w
  1686  0F22  3E02               	addlw	2
  1687  0F23  0084               	movwf	4
  1688  0F24  0831               	movf	??_floatTostr,w
  1689  0F25  1383               	bcf	3,7	;select IRP bank0
  1690  0F26  0080               	movwf	0
  1691                           
  1692                           ;uart.c: 80: txt[1] = ((num/10000)%10) + '0';
  1693  0F27  300A               	movlw	10
  1694  0F28  00A8               	movwf	___lwmod@divisor
  1695  0F29  3000               	movlw	0
  1696  0F2A  00A9               	movwf	___lwmod@divisor+1
  1697  0F2B  3010               	movlw	16
  1698  0F2C  00A0               	movwf	___lwdiv@divisor
  1699  0F2D  3027               	movlw	39
  1700  0F2E  00A1               	movwf	___lwdiv@divisor+1
  1701  0F2F  082F               	movf	floatTostr@num+1,w
  1702  0F30  00A3               	movwf	___lwdiv@dividend+1
  1703  0F31  082E               	movf	floatTostr@num,w
  1704  0F32  00A2               	movwf	___lwdiv@dividend
  1705  0F33  158A  2321  158A   	fcall	___lwdiv
  1706  0F36  1283               	bcf	3,5	;RP0=0, select bank0
  1707  0F37  1303               	bcf	3,6	;RP1=0, select bank0
  1708  0F38  0821               	movf	?___lwdiv+1,w
  1709  0F39  00AB               	movwf	___lwmod@dividend+1
  1710  0F3A  0820               	movf	?___lwdiv,w
  1711  0F3B  00AA               	movwf	___lwmod@dividend
  1712  0F3C  158A  22ED         	fcall	___lwmod
  1713  0F3E  1283               	bcf	3,5	;RP0=0, select bank0
  1714  0F3F  1303               	bcf	3,6	;RP1=0, select bank0
  1715  0F40  0828               	movf	?___lwmod,w
  1716  0F41  3E30               	addlw	48
  1717  0F42  00B1               	movwf	??_floatTostr
  1718  0F43  0A30               	incf	floatTostr@txt,w
  1719  0F44  0084               	movwf	4
  1720  0F45  0831               	movf	??_floatTostr,w
  1721  0F46  1383               	bcf	3,7	;select IRP bank0
  1722  0F47  0080               	movwf	0
  1723  0F48  0008               	return
  1724  0F49                     __end_of_floatTostr:	
  1725                           
  1726                           	psect	text4
  1727  0AED                     __ptext4:	
  1728 ;; *************** function ___lwmod *****************
  1729 ;; Defined at:
  1730 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  1731 ;; Parameters:    Size  Location     Type
  1732 ;;  divisor         2    8[BANK0 ] unsigned int 
  1733 ;;  dividend        2   10[BANK0 ] unsigned int 
  1734 ;; Auto vars:     Size  Location     Type
  1735 ;;  counter         1   13[BANK0 ] unsigned char 
  1736 ;; Return value:  Size  Location     Type
  1737 ;;                  2    8[BANK0 ] unsigned int 
  1738 ;; Registers used:
  1739 ;;		wreg, status,2, status,0
  1740 ;; Tracked objects:
  1741 ;;		On entry : 0/0
  1742 ;;		On exit  : 0/0
  1743 ;;		Unchanged: 0/0
  1744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1745 ;;      Params:         0       4       0       0
  1746 ;;      Locals:         0       1       0       0
  1747 ;;      Temps:          0       1       0       0
  1748 ;;      Totals:         0       6       0       0
  1749 ;;Total ram usage:        6 bytes
  1750 ;; Hardware stack levels used:    1
  1751 ;; Hardware stack levels required when called:    2
  1752 ;; This function calls:
  1753 ;;		Nothing
  1754 ;; This function is called by:
  1755 ;;		_main
  1756 ;;		_floatTostr
  1757 ;; This function uses a non-reentrant model
  1758 ;;
  1759                           
  1760                           
  1761                           ;psect for function ___lwmod
  1762  0AED                     ___lwmod:	
  1763                           
  1764                           ;incstack = 0
  1765                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1766  0AED  1283               	bcf	3,5	;RP0=0, select bank0
  1767  0AEE  1303               	bcf	3,6	;RP1=0, select bank0
  1768  0AEF  0828               	movf	___lwmod@divisor,w
  1769  0AF0  0429               	iorwf	___lwmod@divisor+1,w
  1770  0AF1  1903               	btfsc	3,2
  1771  0AF2  2B1C               	goto	l2276
  1772  0AF3  01AD               	clrf	___lwmod@counter
  1773  0AF4  0AAD               	incf	___lwmod@counter,f
  1774  0AF5                     l2266:	
  1775  0AF5  1BA9               	btfsc	___lwmod@divisor+1,7
  1776  0AF6  2B03               	goto	l2268
  1777  0AF7  3001               	movlw	1
  1778  0AF8                     u2825:	
  1779  0AF8  1003               	clrc
  1780  0AF9  0DA8               	rlf	___lwmod@divisor,f
  1781  0AFA  0DA9               	rlf	___lwmod@divisor+1,f
  1782  0AFB  3EFF               	addlw	-1
  1783  0AFC  1D03               	skipz
  1784  0AFD  2AF8               	goto	u2825
  1785  0AFE  3001               	movlw	1
  1786  0AFF  00AC               	movwf	??___lwmod
  1787  0B00  082C               	movf	??___lwmod,w
  1788  0B01  07AD               	addwf	___lwmod@counter,f
  1789  0B02  2AF5               	goto	l2266
  1790  0B03                     l2268:	
  1791  0B03  0829               	movf	___lwmod@divisor+1,w
  1792  0B04  022B               	subwf	___lwmod@dividend+1,w
  1793  0B05  1D03               	skipz
  1794  0B06  2B09               	goto	u2845
  1795  0B07  0828               	movf	___lwmod@divisor,w
  1796  0B08  022A               	subwf	___lwmod@dividend,w
  1797  0B09                     u2845:	
  1798  0B09  1C03               	skipc
  1799  0B0A  2B11               	goto	l2272
  1800  0B0B  0828               	movf	___lwmod@divisor,w
  1801  0B0C  02AA               	subwf	___lwmod@dividend,f
  1802  0B0D  0829               	movf	___lwmod@divisor+1,w
  1803  0B0E  1C03               	skipc
  1804  0B0F  03AB               	decf	___lwmod@dividend+1,f
  1805  0B10  02AB               	subwf	___lwmod@dividend+1,f
  1806  0B11                     l2272:	
  1807  0B11  3001               	movlw	1
  1808  0B12                     u2855:	
  1809  0B12  1003               	clrc
  1810  0B13  0CA9               	rrf	___lwmod@divisor+1,f
  1811  0B14  0CA8               	rrf	___lwmod@divisor,f
  1812  0B15  3EFF               	addlw	-1
  1813  0B16  1D03               	skipz
  1814  0B17  2B12               	goto	u2855
  1815  0B18  3001               	movlw	1
  1816  0B19  02AD               	subwf	___lwmod@counter,f
  1817  0B1A  1D03               	btfss	3,2
  1818  0B1B  2B03               	goto	l2268
  1819  0B1C                     l2276:	
  1820  0B1C  082B               	movf	___lwmod@dividend+1,w
  1821  0B1D  00A9               	movwf	?___lwmod+1
  1822  0B1E  082A               	movf	___lwmod@dividend,w
  1823  0B1F  00A8               	movwf	?___lwmod
  1824  0B20  0008               	return
  1825  0B21                     __end_of___lwmod:	
  1826                           
  1827                           	psect	text5
  1828  095A                     __ptext5:	
  1829 ;; *************** function _Toggle_Relay *****************
  1830 ;; Defined at:
  1831 ;;		line 44 in file "setup.c"
  1832 ;; Parameters:    Size  Location     Type
  1833 ;;		None
  1834 ;; Auto vars:     Size  Location     Type
  1835 ;;		None
  1836 ;; Return value:  Size  Location     Type
  1837 ;;                  1    wreg      void 
  1838 ;; Registers used:
  1839 ;;		wreg, status,2, status,0
  1840 ;; Tracked objects:
  1841 ;;		On entry : 0/0
  1842 ;;		On exit  : 0/0
  1843 ;;		Unchanged: 0/0
  1844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1845 ;;      Params:         0       0       0       0
  1846 ;;      Locals:         0       0       0       0
  1847 ;;      Temps:          0       1       0       0
  1848 ;;      Totals:         0       1       0       0
  1849 ;;Total ram usage:        1 bytes
  1850 ;; Hardware stack levels used:    1
  1851 ;; Hardware stack levels required when called:    2
  1852 ;; This function calls:
  1853 ;;		Nothing
  1854 ;; This function is called by:
  1855 ;;		_Send
  1856 ;; This function uses a non-reentrant model
  1857 ;;
  1858                           
  1859                           
  1860                           ;psect for function _Toggle_Relay
  1861  095A                     _Toggle_Relay:	
  1862                           
  1863                           ;setup.c: 45: static uint8_t read = 0;
  1864                           ;setup.c: 46: read ^= 1;
  1865                           
  1866                           ;incstack = 0
  1867                           ; Regs used in _Toggle_Relay: [wreg+status,2+status,0]
  1868  095A  3001               	movlw	1
  1869  095B  1283               	bcf	3,5	;RP0=0, select bank0
  1870  095C  1303               	bcf	3,6	;RP1=0, select bank0
  1871  095D  00A0               	movwf	??_Toggle_Relay
  1872  095E  0820               	movf	??_Toggle_Relay,w
  1873  095F  1683               	bsf	3,5	;RP0=1, select bank1
  1874  0960  1303               	bcf	3,6	;RP1=0, select bank1
  1875  0961  06A9               	xorwf	Toggle_Relay@read^(0+128),f
  1876                           
  1877                           ;setup.c: 47: if(read) PORTC = 0x08;
  1878  0962  0829               	movf	Toggle_Relay@read^(0+128),w
  1879  0963  1903               	btfsc	3,2
  1880  0964  296A               	goto	l2774
  1881  0965  3008               	movlw	8
  1882  0966  1283               	bcf	3,5	;RP0=0, select bank0
  1883  0967  1303               	bcf	3,6	;RP1=0, select bank0
  1884  0968  0087               	movwf	7	;volatile
  1885  0969  0008               	return
  1886  096A                     l2774:	
  1887                           
  1888                           ;setup.c: 48: else PORTC = 0x04;
  1889  096A  3004               	movlw	4
  1890  096B  1283               	bcf	3,5	;RP0=0, select bank0
  1891  096C  0087               	movwf	7	;volatile
  1892  096D  0008               	return
  1893  096E                     __end_of_Toggle_Relay:	
  1894                           
  1895                           	psect	text6
  1896  0DF7                     __ptext6:	
  1897 ;; *************** function _Measure *****************
  1898 ;; Defined at:
  1899 ;;		line 98 in file "main.c"
  1900 ;; Parameters:    Size  Location     Type
  1901 ;;		None
  1902 ;; Auto vars:     Size  Location     Type
  1903 ;;		None
  1904 ;; Return value:  Size  Location     Type
  1905 ;;                  1    wreg      void 
  1906 ;; Registers used:
  1907 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1908 ;; Tracked objects:
  1909 ;;		On entry : 0/0
  1910 ;;		On exit  : 0/0
  1911 ;;		Unchanged: 0/0
  1912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1913 ;;      Params:         0       0       0       0
  1914 ;;      Locals:         0       0       4       0
  1915 ;;      Temps:          0       1       0       0
  1916 ;;      Totals:         0       1       4       0
  1917 ;;Total ram usage:        5 bytes
  1918 ;; Hardware stack levels used:    1
  1919 ;; Hardware stack levels required when called:    5
  1920 ;; This function calls:
  1921 ;;		_ADC_PF
  1922 ;;		_ADC_RMS
  1923 ;;		_AVG
  1924 ;; This function is called by:
  1925 ;;		_main
  1926 ;; This function uses a non-reentrant model
  1927 ;;
  1928                           
  1929                           
  1930                           ;psect for function _Measure
  1931  0DF7                     _Measure:	
  1932                           
  1933                           ;main.c: 99: static uint8_t in = 0;
  1934                           ;main.c: 100: ADC_RMS(VOLT_ARRAY , 0, 767, in);
  1935                           
  1936                           ;incstack = 0
  1937                           ; Regs used in _Measure: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1938  0DF7  1283               	bcf	3,5	;RP0=0, select bank0
  1939  0DF8  1303               	bcf	3,6	;RP1=0, select bank0
  1940  0DF9  01DC               	clrf	ADC_RMS@ANC
  1941  0DFA  30FF               	movlw	255
  1942  0DFB  00DD               	movwf	ADC_RMS@rate
  1943  0DFC  3002               	movlw	2
  1944  0DFD  00DE               	movwf	ADC_RMS@rate+1
  1945  0DFE  0870               	movf	Measure@in,w
  1946  0DFF  00EE               	movwf	??_Measure
  1947  0E00  086E               	movf	??_Measure,w
  1948  0E01  00DF               	movwf	ADC_RMS@index
  1949  0E02  30C3               	movlw	(low (_VOLT_ARRAY| 0))& (0+255)
  1950  0E03  158A  2561  158A   	fcall	_ADC_RMS
  1951                           
  1952                           ;main.c: 101: ADC_RMS(CURRENT_ARRAY, 1, 51, in);
  1953  0E06  1283               	bcf	3,5	;RP0=0, select bank0
  1954  0E07  1303               	bcf	3,6	;RP1=0, select bank0
  1955  0E08  01DC               	clrf	ADC_RMS@ANC
  1956  0E09  0ADC               	incf	ADC_RMS@ANC,f
  1957  0E0A  3033               	movlw	51
  1958  0E0B  00DD               	movwf	ADC_RMS@rate
  1959  0E0C  3000               	movlw	0
  1960  0E0D  00DE               	movwf	ADC_RMS@rate+1
  1961  0E0E  0870               	movf	Measure@in,w
  1962  0E0F  00EE               	movwf	??_Measure
  1963  0E10  086E               	movf	??_Measure,w
  1964  0E11  00DF               	movwf	ADC_RMS@index
  1965  0E12  30BB               	movlw	(low (_CURRENT_ARRAY| 0))& (0+255)
  1966  0E13  158A  2561  158A   	fcall	_ADC_RMS
  1967                           
  1968                           ;main.c: 102: if(ZERO_CROSS){
  1969  0E16  0872               	movf	_ZERO_CROSS,w
  1970  0E17  1903               	btfsc	3,2
  1971  0E18  2E23               	goto	l2828
  1972                           
  1973                           ;main.c: 103: ADC_PF(POWER_FACTOR_ARRAY, in);
  1974  0E19  0870               	movf	Measure@in,w
  1975  0E1A  1283               	bcf	3,5	;RP0=0, select bank0
  1976  0E1B  1303               	bcf	3,6	;RP1=0, select bank0
  1977  0E1C  00EE               	movwf	??_Measure
  1978  0E1D  086E               	movf	??_Measure,w
  1979  0E1E  00DC               	movwf	ADC_PF@index
  1980  0E1F  30B3               	movlw	(low (_POWER_FACTOR_ARRAY| 0))& (0+255)
  1981  0E20  118A  202C  158A   	fcall	_ADC_PF
  1982  0E23                     l2828:	
  1983                           
  1984                           ;main.c: 104: }
  1985                           ;main.c: 105: if(++in >= 4){
  1986  0E23  3001               	movlw	1
  1987  0E24  1283               	bcf	3,5	;RP0=0, select bank0
  1988  0E25  1303               	bcf	3,6	;RP1=0, select bank0
  1989  0E26  00EE               	movwf	??_Measure
  1990  0E27  086E               	movf	??_Measure,w
  1991  0E28  07F0               	addwf	Measure@in,f
  1992  0E29  3004               	movlw	4
  1993  0E2A  0270               	subwf	Measure@in,w
  1994  0E2B  1C03               	skipc
  1995  0E2C  0008               	return
  1996                           
  1997                           ;main.c: 106: in = 0;
  1998  0E2D  01F0               	clrf	Measure@in
  1999                           
  2000                           ;main.c: 107: F_VALUE = AVG(FREQUENCY_ARRAY , 4);
  2001  0E2E  3004               	movlw	4
  2002  0E2F  00EE               	movwf	??_Measure
  2003  0E30  086E               	movf	??_Measure,w
  2004  0E31  00DC               	movwf	AVG@index
  2005  0E32  30AB               	movlw	(low (_FREQUENCY_ARRAY| 0))& (0+255)
  2006  0E33  158A  2458  158A   	fcall	_AVG
  2007  0E36  1283               	bcf	3,5	;RP0=0, select bank0
  2008  0E37  1303               	bcf	3,6	;RP1=0, select bank0
  2009  0E38  085D               	movf	?_AVG+1,w
  2010  0E39  1683               	bsf	3,5	;RP0=1, select bank1
  2011  0E3A  1303               	bcf	3,6	;RP1=0, select bank1
  2012  0E3B  00EC               	movwf	(_F_VALUE+1)^(0+128)
  2013  0E3C  1283               	bcf	3,5	;RP0=0, select bank0
  2014  0E3D  1303               	bcf	3,6	;RP1=0, select bank0
  2015  0E3E  085C               	movf	?_AVG,w
  2016  0E3F  1683               	bsf	3,5	;RP0=1, select bank1
  2017  0E40  1303               	bcf	3,6	;RP1=0, select bank1
  2018  0E41  00EB               	movwf	_F_VALUE^(0+128)
  2019                           
  2020                           ;main.c: 108: V_VALUE = AVG(VOLT_ARRAY , 4);
  2021  0E42  3004               	movlw	4
  2022  0E43  1283               	bcf	3,5	;RP0=0, select bank0
  2023  0E44  1303               	bcf	3,6	;RP1=0, select bank0
  2024  0E45  00EE               	movwf	??_Measure
  2025  0E46  086E               	movf	??_Measure,w
  2026  0E47  00DC               	movwf	AVG@index
  2027  0E48  30C3               	movlw	(low (_VOLT_ARRAY| 0))& (0+255)
  2028  0E49  158A  2458  158A   	fcall	_AVG
  2029  0E4C  1283               	bcf	3,5	;RP0=0, select bank0
  2030  0E4D  1303               	bcf	3,6	;RP1=0, select bank0
  2031  0E4E  085D               	movf	?_AVG+1,w
  2032  0E4F  1683               	bsf	3,5	;RP0=1, select bank1
  2033  0E50  1303               	bcf	3,6	;RP1=0, select bank1
  2034  0E51  00A7               	movwf	(_V_VALUE+1)^(0+128)
  2035  0E52  1283               	bcf	3,5	;RP0=0, select bank0
  2036  0E53  1303               	bcf	3,6	;RP1=0, select bank0
  2037  0E54  085C               	movf	?_AVG,w
  2038  0E55  1683               	bsf	3,5	;RP0=1, select bank1
  2039  0E56  1303               	bcf	3,6	;RP1=0, select bank1
  2040  0E57  00A6               	movwf	_V_VALUE^(0+128)
  2041                           
  2042                           ;main.c: 109: A_VALUE = AVG(CURRENT_ARRAY , 4);
  2043  0E58  3004               	movlw	4
  2044  0E59  1283               	bcf	3,5	;RP0=0, select bank0
  2045  0E5A  1303               	bcf	3,6	;RP1=0, select bank0
  2046  0E5B  00EE               	movwf	??_Measure
  2047  0E5C  086E               	movf	??_Measure,w
  2048  0E5D  00DC               	movwf	AVG@index
  2049  0E5E  30BB               	movlw	(low (_CURRENT_ARRAY| 0))& (0+255)
  2050  0E5F  158A  2458  158A   	fcall	_AVG
  2051  0E62  1283               	bcf	3,5	;RP0=0, select bank0
  2052  0E63  1303               	bcf	3,6	;RP1=0, select bank0
  2053  0E64  085D               	movf	?_AVG+1,w
  2054  0E65  1683               	bsf	3,5	;RP0=1, select bank1
  2055  0E66  1303               	bcf	3,6	;RP1=0, select bank1
  2056  0E67  00A5               	movwf	(_A_VALUE+1)^(0+128)
  2057  0E68  1283               	bcf	3,5	;RP0=0, select bank0
  2058  0E69  1303               	bcf	3,6	;RP1=0, select bank0
  2059  0E6A  085C               	movf	?_AVG,w
  2060  0E6B  1683               	bsf	3,5	;RP0=1, select bank1
  2061  0E6C  1303               	bcf	3,6	;RP1=0, select bank1
  2062  0E6D  00A4               	movwf	_A_VALUE^(0+128)
  2063                           
  2064                           ;main.c: 110: PF_VALUE = AVG(POWER_FACTOR_ARRAY, 4);
  2065  0E6E  3004               	movlw	4
  2066  0E6F  1283               	bcf	3,5	;RP0=0, select bank0
  2067  0E70  1303               	bcf	3,6	;RP1=0, select bank0
  2068  0E71  00EE               	movwf	??_Measure
  2069  0E72  086E               	movf	??_Measure,w
  2070  0E73  00DC               	movwf	AVG@index
  2071  0E74  30B3               	movlw	(low (_POWER_FACTOR_ARRAY| 0))& (0+255)
  2072  0E75  158A  2458  158A   	fcall	_AVG
  2073  0E78  1283               	bcf	3,5	;RP0=0, select bank0
  2074  0E79  1303               	bcf	3,6	;RP1=0, select bank0
  2075  0E7A  085D               	movf	?_AVG+1,w
  2076  0E7B  1683               	bsf	3,5	;RP0=1, select bank1
  2077  0E7C  1303               	bcf	3,6	;RP1=0, select bank1
  2078  0E7D  00A3               	movwf	(_PF_VALUE+1)^(0+128)
  2079  0E7E  1283               	bcf	3,5	;RP0=0, select bank0
  2080  0E7F  1303               	bcf	3,6	;RP1=0, select bank0
  2081  0E80  085C               	movf	?_AVG,w
  2082  0E81  1683               	bsf	3,5	;RP0=1, select bank1
  2083  0E82  1303               	bcf	3,6	;RP1=0, select bank1
  2084  0E83  00A2               	movwf	_PF_VALUE^(0+128)
  2085                           
  2086                           ;main.c: 111: PF_VALUE += PF_SIGN > (4/2) ? 0:100000;
  2087  0E84  3003               	movlw	3
  2088  0E85  0274               	subwf	_PF_SIGN,w
  2089  0E86  1803               	skipnc
  2090  0E87  2E90               	goto	l2844
  2091  0E88  3000               	movlw	0
  2092  0E89  00E2               	movwf	(_Measure$304+3)^(0+128)
  2093  0E8A  3001               	movlw	1
  2094  0E8B  00E1               	movwf	(_Measure$304+2)^(0+128)
  2095  0E8C  3086               	movlw	134
  2096  0E8D  00E0               	movwf	(_Measure$304+1)^(0+128)
  2097  0E8E  30A0               	movlw	160
  2098  0E8F  2E97               	goto	L1
  2099  0E90                     l2844:	
  2100  0E90  3000               	movlw	0
  2101  0E91  00E2               	movwf	(_Measure$304+3)^(0+128)
  2102  0E92  3000               	movlw	0
  2103  0E93  00E1               	movwf	(_Measure$304+2)^(0+128)
  2104  0E94  3000               	movlw	0
  2105  0E95  00E0               	movwf	(_Measure$304+1)^(0+128)
  2106  0E96  3000               	movlw	0
  2107  0E97                     L1:	
  2108  0E97  00DF               	movwf	_Measure$304^(0+128)
  2109  0E98  085F               	movf	_Measure$304^(0+128),w
  2110  0E99  07A2               	addwf	_PF_VALUE^(0+128),f
  2111  0E9A  1803               	skipnc
  2112  0E9B  0AA3               	incf	(_PF_VALUE+1)^(0+128),f
  2113  0E9C  0860               	movf	(_Measure$304+1)^(0+128),w
  2114  0E9D  07A3               	addwf	(_PF_VALUE+1)^(0+128),f
  2115  0E9E  0008               	return
  2116  0E9F                     __end_of_Measure:	
  2117                           
  2118                           	psect	text7
  2119  0C58                     __ptext7:	
  2120 ;; *************** function _AVG *****************
  2121 ;; Defined at:
  2122 ;;		line 144 in file "adc.c"
  2123 ;; Parameters:    Size  Location     Type
  2124 ;;  ARRAY           1    wreg     PTR unsigned int 
  2125 ;;		 -> POWER_FACTOR_ARRAY(8), CURRENT_ARRAY(8), VOLT_ARRAY(8), FREQUENCY_ARRAY(8), 
  2126 ;;  index           1   60[BANK0 ] const unsigned char 
  2127 ;; Auto vars:     Size  Location     Type
  2128 ;;  ARRAY           1   70[BANK0 ] PTR unsigned int 
  2129 ;;		 -> POWER_FACTOR_ARRAY(8), CURRENT_ARRAY(8), VOLT_ARRAY(8), FREQUENCY_ARRAY(8), 
  2130 ;;  ret             3   67[BANK0 ] float 
  2131 ;;  i               1   71[BANK0 ] unsigned char 
  2132 ;;  avg             1   66[BANK0 ] unsigned char 
  2133 ;; Return value:  Size  Location     Type
  2134 ;;                  2   60[BANK0 ] unsigned int 
  2135 ;; Registers used:
  2136 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2137 ;; Tracked objects:
  2138 ;;		On entry : 0/0
  2139 ;;		On exit  : 0/0
  2140 ;;		Unchanged: 0/0
  2141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2142 ;;      Params:         0       2       0       0
  2143 ;;      Locals:         0       6       0       0
  2144 ;;      Temps:          0       4       0       0
  2145 ;;      Totals:         0      12       0       0
  2146 ;;Total ram usage:       12 bytes
  2147 ;; Hardware stack levels used:    1
  2148 ;; Hardware stack levels required when called:    4
  2149 ;; This function calls:
  2150 ;;		___ftadd
  2151 ;;		___ftdiv
  2152 ;;		___fttol
  2153 ;;		___lbtoft
  2154 ;;		___lwtoft
  2155 ;; This function is called by:
  2156 ;;		_Measure
  2157 ;; This function uses a non-reentrant model
  2158 ;;
  2159                           
  2160                           
  2161                           ;psect for function _AVG
  2162  0C58                     _AVG:	
  2163                           
  2164                           ;incstack = 0
  2165                           ; Regs used in _AVG: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2166                           ;AVG@ARRAY stored from wreg
  2167  0C58  1283               	bcf	3,5	;RP0=0, select bank0
  2168  0C59  1303               	bcf	3,6	;RP1=0, select bank0
  2169  0C5A  00E6               	movwf	AVG@ARRAY
  2170                           
  2171                           ;adc.c: 145: uint8_t i;
  2172                           ;adc.c: 146: uint8_t avg = 0;
  2173  0C5B  01E2               	clrf	AVG@avg
  2174                           
  2175                           ;adc.c: 147: float ret = 0;
  2176  0C5C  3000               	movlw	0
  2177  0C5D  00E3               	movwf	AVG@ret
  2178  0C5E  3000               	movlw	0
  2179  0C5F  00E4               	movwf	AVG@ret+1
  2180  0C60  3000               	movlw	0
  2181  0C61  00E5               	movwf	AVG@ret+2
  2182                           
  2183                           ;adc.c: 148: for(i=1;i<index;i++){
  2184  0C62  01E7               	clrf	AVG@i
  2185  0C63  0AE7               	incf	AVG@i,f
  2186  0C64  085C               	movf	AVG@index,w
  2187  0C65  0267               	subwf	AVG@i,w
  2188  0C66  1803               	btfsc	3,0
  2189  0C67  2CAD               	goto	l2708
  2190  0C68                     l2698:	
  2191                           
  2192                           ;adc.c: 149: if(ARRAY[i]>0){
  2193  0C68  0867               	movf	AVG@i,w
  2194  0C69  00DE               	movwf	??_AVG
  2195  0C6A  075E               	addwf	??_AVG,w
  2196  0C6B  0766               	addwf	AVG@ARRAY,w
  2197  0C6C  00DF               	movwf	??_AVG+1
  2198  0C6D  085F               	movf	??_AVG+1,w
  2199  0C6E  0084               	movwf	4
  2200  0C6F  1383               	bcf	3,7	;select IRP bank0
  2201  0C70  0800               	movf	0,w
  2202  0C71  00E0               	movwf	??_AVG+2
  2203  0C72  0A84               	incf	4,f
  2204  0C73  0800               	movf	0,w
  2205  0C74  00E1               	movwf	??_AVG+3
  2206  0C75  0860               	movf	??_AVG+2,w
  2207  0C76  0461               	iorwf	??_AVG+3,w
  2208  0C77  1903               	btfsc	3,2
  2209  0C78  2CA5               	goto	l2704
  2210                           
  2211                           ;adc.c: 150: ret += ARRAY[i];
  2212  0C79  0867               	movf	AVG@i,w
  2213  0C7A  00DE               	movwf	??_AVG
  2214  0C7B  075E               	addwf	??_AVG,w
  2215  0C7C  0766               	addwf	AVG@ARRAY,w
  2216  0C7D  00DF               	movwf	??_AVG+1
  2217  0C7E  085F               	movf	??_AVG+1,w
  2218  0C7F  0084               	movwf	4
  2219  0C80  0800               	movf	0,w
  2220  0C81  00A8               	movwf	___lwtoft@c
  2221  0C82  0A84               	incf	4,f
  2222  0C83  0800               	movf	0,w
  2223  0C84  00A9               	movwf	___lwtoft@c+1
  2224  0C85  158A  2185  158A   	fcall	___lwtoft
  2225  0C88  1283               	bcf	3,5	;RP0=0, select bank0
  2226  0C89  1303               	bcf	3,6	;RP1=0, select bank0
  2227  0C8A  0828               	movf	?___lwtoft,w
  2228  0C8B  00AC               	movwf	___ftadd@f1
  2229  0C8C  0829               	movf	?___lwtoft+1,w
  2230  0C8D  00AD               	movwf	___ftadd@f1+1
  2231  0C8E  082A               	movf	?___lwtoft+2,w
  2232  0C8F  00AE               	movwf	___ftadd@f1+2
  2233  0C90  0863               	movf	AVG@ret,w
  2234  0C91  00AF               	movwf	___ftadd@f2
  2235  0C92  0864               	movf	AVG@ret+1,w
  2236  0C93  00B0               	movwf	___ftadd@f2+1
  2237  0C94  0865               	movf	AVG@ret+2,w
  2238  0C95  00B1               	movwf	___ftadd@f2+2
  2239  0C96  118A  2504  158A   	fcall	___ftadd
  2240  0C99  1283               	bcf	3,5	;RP0=0, select bank0
  2241  0C9A  1303               	bcf	3,6	;RP1=0, select bank0
  2242  0C9B  082C               	movf	?___ftadd,w
  2243  0C9C  00E3               	movwf	AVG@ret
  2244  0C9D  082D               	movf	?___ftadd+1,w
  2245  0C9E  00E4               	movwf	AVG@ret+1
  2246  0C9F  082E               	movf	?___ftadd+2,w
  2247  0CA0  00E5               	movwf	AVG@ret+2
  2248                           
  2249                           ;adc.c: 151: avg++;
  2250  0CA1  3001               	movlw	1
  2251  0CA2  00DE               	movwf	??_AVG
  2252  0CA3  085E               	movf	??_AVG,w
  2253  0CA4  07E2               	addwf	AVG@avg,f
  2254  0CA5                     l2704:	
  2255  0CA5  3001               	movlw	1
  2256  0CA6  00DE               	movwf	??_AVG
  2257  0CA7  085E               	movf	??_AVG,w
  2258  0CA8  07E7               	addwf	AVG@i,f
  2259  0CA9  085C               	movf	AVG@index,w
  2260  0CAA  0267               	subwf	AVG@i,w
  2261  0CAB  1C03               	skipc
  2262  0CAC  2C68               	goto	l2698
  2263  0CAD                     l2708:	
  2264                           
  2265                           ;adc.c: 152: }
  2266                           ;adc.c: 153: }
  2267                           ;adc.c: 154: return ((uint16_t)(ret / avg));
  2268  0CAD  0863               	movf	AVG@ret,w
  2269  0CAE  00C1               	movwf	___ftdiv@f1
  2270  0CAF  0864               	movf	AVG@ret+1,w
  2271  0CB0  00C2               	movwf	___ftdiv@f1+1
  2272  0CB1  0865               	movf	AVG@ret+2,w
  2273  0CB2  00C3               	movwf	___ftdiv@f1+2
  2274  0CB3  0862               	movf	AVG@avg,w
  2275  0CB4  158A  21B4  158A   	fcall	___lbtoft
  2276  0CB7  1283               	bcf	3,5	;RP0=0, select bank0
  2277  0CB8  1303               	bcf	3,6	;RP1=0, select bank0
  2278  0CB9  0828               	movf	?___lbtoft,w
  2279  0CBA  00BE               	movwf	___ftdiv@f2
  2280  0CBB  0829               	movf	?___lbtoft+1,w
  2281  0CBC  00BF               	movwf	___ftdiv@f2+1
  2282  0CBD  082A               	movf	?___lbtoft+2,w
  2283  0CBE  00C0               	movwf	___ftdiv@f2+2
  2284  0CBF  158A  2749  158A   	fcall	___ftdiv
  2285  0CC2  1283               	bcf	3,5	;RP0=0, select bank0
  2286  0CC3  1303               	bcf	3,6	;RP1=0, select bank0
  2287  0CC4  083E               	movf	?___ftdiv,w
  2288  0CC5  00CE               	movwf	___fttol@f1
  2289  0CC6  083F               	movf	?___ftdiv+1,w
  2290  0CC7  00CF               	movwf	___fttol@f1+1
  2291  0CC8  0840               	movf	?___ftdiv+2,w
  2292  0CC9  00D0               	movwf	___fttol@f1+2
  2293  0CCA  158A  24D3         	fcall	___fttol
  2294  0CCC  1283               	bcf	3,5	;RP0=0, select bank0
  2295  0CCD  1303               	bcf	3,6	;RP1=0, select bank0
  2296  0CCE  084F               	movf	?___fttol+1,w
  2297  0CCF  00DD               	movwf	?_AVG+1
  2298  0CD0  084E               	movf	?___fttol,w
  2299  0CD1  00DC               	movwf	?_AVG
  2300  0CD2  0008               	return
  2301  0CD3                     __end_of_AVG:	
  2302                           
  2303                           	psect	text8
  2304  09B4                     __ptext8:	
  2305 ;; *************** function ___lbtoft *****************
  2306 ;; Defined at:
  2307 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lbtoft.c"
  2308 ;; Parameters:    Size  Location     Type
  2309 ;;  c               1    wreg     unsigned char 
  2310 ;; Auto vars:     Size  Location     Type
  2311 ;;  c               1   15[BANK0 ] unsigned char 
  2312 ;; Return value:  Size  Location     Type
  2313 ;;                  3    8[BANK0 ] float 
  2314 ;; Registers used:
  2315 ;;		wreg, status,2, status,0, pclath, cstack
  2316 ;; Tracked objects:
  2317 ;;		On entry : 0/0
  2318 ;;		On exit  : 0/0
  2319 ;;		Unchanged: 0/0
  2320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2321 ;;      Params:         0       3       0       0
  2322 ;;      Locals:         0       1       0       0
  2323 ;;      Temps:          0       4       0       0
  2324 ;;      Totals:         0       8       0       0
  2325 ;;Total ram usage:        8 bytes
  2326 ;; Hardware stack levels used:    1
  2327 ;; Hardware stack levels required when called:    3
  2328 ;; This function calls:
  2329 ;;		___ftpack
  2330 ;; This function is called by:
  2331 ;;		_AVG
  2332 ;; This function uses a non-reentrant model
  2333 ;;
  2334                           
  2335                           
  2336                           ;psect for function ___lbtoft
  2337  09B4                     ___lbtoft:	
  2338                           
  2339                           ;incstack = 0
  2340                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  2341                           ;___lbtoft@c stored from wreg
  2342  09B4  1283               	bcf	3,5	;RP0=0, select bank0
  2343  09B5  1303               	bcf	3,6	;RP1=0, select bank0
  2344  09B6  00AF               	movwf	___lbtoft@c
  2345  09B7  082F               	movf	___lbtoft@c,w
  2346  09B8  00AB               	movwf	??___lbtoft
  2347  09B9  01AC               	clrf	??___lbtoft+1
  2348  09BA  01AD               	clrf	??___lbtoft+2
  2349  09BB  082B               	movf	??___lbtoft,w
  2350  09BC  00A0               	movwf	___ftpack@arg
  2351  09BD  082C               	movf	??___lbtoft+1,w
  2352  09BE  00A1               	movwf	___ftpack@arg+1
  2353  09BF  082D               	movf	??___lbtoft+2,w
  2354  09C0  00A2               	movwf	___ftpack@arg+2
  2355  09C1  308E               	movlw	142
  2356  09C2  00AE               	movwf	??___lbtoft+3
  2357  09C3  082E               	movf	??___lbtoft+3,w
  2358  09C4  00A3               	movwf	___ftpack@exp
  2359  09C5  01A4               	clrf	___ftpack@sign
  2360  09C6  158A  23EA         	fcall	___ftpack
  2361  09C8  1283               	bcf	3,5	;RP0=0, select bank0
  2362  09C9  1303               	bcf	3,6	;RP1=0, select bank0
  2363  09CA  0820               	movf	?___ftpack,w
  2364  09CB  00A8               	movwf	?___lbtoft
  2365  09CC  0821               	movf	?___ftpack+1,w
  2366  09CD  00A9               	movwf	?___lbtoft+1
  2367  09CE  0822               	movf	?___ftpack+2,w
  2368  09CF  00AA               	movwf	?___lbtoft+2
  2369  09D0  0008               	return
  2370  09D1                     __end_of___lbtoft:	
  2371                           
  2372                           	psect	text9
  2373  0D61                     __ptext9:	
  2374 ;; *************** function _ADC_RMS *****************
  2375 ;; Defined at:
  2376 ;;		line 28 in file "adc.c"
  2377 ;; Parameters:    Size  Location     Type
  2378 ;;  ARRAY           1    wreg     PTR unsigned int 
  2379 ;;		 -> CURRENT_ARRAY(8), VOLT_ARRAY(8), 
  2380 ;;  ANC             1   60[BANK0 ] unsigned char 
  2381 ;;  rate            2   61[BANK0 ] unsigned int 
  2382 ;;  index           1   63[BANK0 ] const unsigned char 
  2383 ;; Auto vars:     Size  Location     Type
  2384 ;;  ARRAY           1   70[BANK0 ] PTR unsigned int 
  2385 ;;		 -> CURRENT_ARRAY(8), VOLT_ARRAY(8), 
  2386 ;;  read            2   76[BANK0 ] unsigned int 
  2387 ;;  min             2   73[BANK0 ] unsigned int 
  2388 ;;  max             2   71[BANK0 ] unsigned int 
  2389 ;;  i               1   75[BANK0 ] unsigned char 
  2390 ;; Return value:  Size  Location     Type
  2391 ;;                  1    wreg      void 
  2392 ;; Registers used:
  2393 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2394 ;; Tracked objects:
  2395 ;;		On entry : 0/0
  2396 ;;		On exit  : 0/0
  2397 ;;		Unchanged: 0/0
  2398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2399 ;;      Params:         0       4       0       0
  2400 ;;      Locals:         0       8       0       0
  2401 ;;      Temps:          0       6       0       0
  2402 ;;      Totals:         0      18       0       0
  2403 ;;Total ram usage:       18 bytes
  2404 ;; Hardware stack levels used:    1
  2405 ;; Hardware stack levels required when called:    4
  2406 ;; This function calls:
  2407 ;;		_ADC_Read
  2408 ;;		___ftdiv
  2409 ;;		___ftmul
  2410 ;;		___fttol
  2411 ;;		___lwtoft
  2412 ;; This function is called by:
  2413 ;;		_Measure
  2414 ;; This function uses a non-reentrant model
  2415 ;;
  2416                           
  2417                           
  2418                           ;psect for function _ADC_RMS
  2419  0D61                     _ADC_RMS:	
  2420                           
  2421                           ;incstack = 0
  2422                           ; Regs used in _ADC_RMS: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2423                           ;ADC_RMS@ARRAY stored from wreg
  2424  0D61  1283               	bcf	3,5	;RP0=0, select bank0
  2425  0D62  1303               	bcf	3,6	;RP1=0, select bank0
  2426  0D63  00E6               	movwf	ADC_RMS@ARRAY
  2427                           
  2428                           ;adc.c: 29: uint8_t i;
  2429                           ;adc.c: 30: uint16_t read;
  2430                           ;adc.c: 31: uint16_t max = 0;
  2431  0D64  01E7               	clrf	ADC_RMS@max
  2432  0D65  01E8               	clrf	ADC_RMS@max+1
  2433                           
  2434                           ;adc.c: 32: uint16_t min = 1023;
  2435  0D66  30FF               	movlw	255
  2436  0D67  00E9               	movwf	ADC_RMS@min
  2437  0D68  3003               	movlw	3
  2438  0D69  00EA               	movwf	ADC_RMS@min+1
  2439                           
  2440                           ;adc.c: 33: for(i=0;i<250;i++){
  2441  0D6A  01EB               	clrf	ADC_RMS@i
  2442  0D6B  30FA               	movlw	250
  2443  0D6C  026B               	subwf	ADC_RMS@i,w
  2444  0D6D  1803               	btfsc	3,0
  2445  0D6E  2D99               	goto	l2580
  2446  0D6F                     l2568:	
  2447                           
  2448                           ;adc.c: 34: read = ADC_Read(ANC);
  2449  0D6F  085C               	movf	ADC_RMS@ANC,w
  2450  0D70  158A  22BD  158A   	fcall	_ADC_Read
  2451  0D73  1283               	bcf	3,5	;RP0=0, select bank0
  2452  0D74  1303               	bcf	3,6	;RP1=0, select bank0
  2453  0D75  0821               	movf	?_ADC_Read+1,w
  2454  0D76  00ED               	movwf	ADC_RMS@read+1
  2455  0D77  0820               	movf	?_ADC_Read,w
  2456  0D78  00EC               	movwf	ADC_RMS@read
  2457                           
  2458                           ;adc.c: 39: if(read > max) max = read;
  2459  0D79  086D               	movf	ADC_RMS@read+1,w
  2460  0D7A  0268               	subwf	ADC_RMS@max+1,w
  2461  0D7B  1D03               	skipz
  2462  0D7C  2D7F               	goto	u3535
  2463  0D7D  086C               	movf	ADC_RMS@read,w
  2464  0D7E  0267               	subwf	ADC_RMS@max,w
  2465  0D7F                     u3535:	
  2466  0D7F  1803               	skipnc
  2467  0D80  2D85               	goto	l61
  2468  0D81  086D               	movf	ADC_RMS@read+1,w
  2469  0D82  00E8               	movwf	ADC_RMS@max+1
  2470  0D83  086C               	movf	ADC_RMS@read,w
  2471  0D84  00E7               	movwf	ADC_RMS@max
  2472  0D85                     l61:	
  2473                           
  2474                           ;adc.c: 40: if(read < min) min = read;
  2475  0D85  086A               	movf	ADC_RMS@min+1,w
  2476  0D86  026D               	subwf	ADC_RMS@read+1,w
  2477  0D87  1D03               	skipz
  2478  0D88  2D8B               	goto	u3545
  2479  0D89  0869               	movf	ADC_RMS@min,w
  2480  0D8A  026C               	subwf	ADC_RMS@read,w
  2481  0D8B                     u3545:	
  2482  0D8B  1803               	skipnc
  2483  0D8C  2D91               	goto	l2576
  2484  0D8D  086D               	movf	ADC_RMS@read+1,w
  2485  0D8E  00EA               	movwf	ADC_RMS@min+1
  2486  0D8F  086C               	movf	ADC_RMS@read,w
  2487  0D90  00E9               	movwf	ADC_RMS@min
  2488  0D91                     l2576:	
  2489  0D91  3001               	movlw	1
  2490  0D92  00E0               	movwf	??_ADC_RMS
  2491  0D93  0860               	movf	??_ADC_RMS,w
  2492  0D94  07EB               	addwf	ADC_RMS@i,f
  2493  0D95  30FA               	movlw	250
  2494  0D96  026B               	subwf	ADC_RMS@i,w
  2495  0D97  1C03               	skipc
  2496  0D98  2D6F               	goto	l2568
  2497  0D99                     l2580:	
  2498                           
  2499                           ;adc.c: 41: }
  2500                           ;adc.c: 43: ARRAY[index] = (uint16_t)(((float)((max-min)/2)*rate)/10);
  2501  0D99  0969               	comf	ADC_RMS@min,w
  2502  0D9A  00E0               	movwf	??_ADC_RMS
  2503  0D9B  096A               	comf	ADC_RMS@min+1,w
  2504  0D9C  00E1               	movwf	??_ADC_RMS+1
  2505  0D9D  0AE0               	incf	??_ADC_RMS,f
  2506  0D9E  1903               	skipnz
  2507  0D9F  0AE1               	incf	??_ADC_RMS+1,f
  2508  0DA0  0867               	movf	ADC_RMS@max,w
  2509  0DA1  0760               	addwf	??_ADC_RMS,w
  2510  0DA2  00E2               	movwf	??_ADC_RMS+2
  2511  0DA3  0868               	movf	ADC_RMS@max+1,w
  2512  0DA4  1803               	skipnc
  2513  0DA5  0A68               	incf	ADC_RMS@max+1,w
  2514  0DA6  0761               	addwf	??_ADC_RMS+1,w
  2515  0DA7  00E3               	movwf	??_ADC_RMS+3
  2516  0DA8  1003               	clrc
  2517  0DA9  0CE3               	rrf	??_ADC_RMS+3,f
  2518  0DAA  0CE2               	rrf	??_ADC_RMS+2,f
  2519  0DAB  0862               	movf	??_ADC_RMS+2,w
  2520  0DAC  00A8               	movwf	___lwtoft@c
  2521  0DAD  0863               	movf	??_ADC_RMS+3,w
  2522  0DAE  00A9               	movwf	___lwtoft@c+1
  2523  0DAF  158A  2185  158A   	fcall	___lwtoft
  2524  0DB2  1283               	bcf	3,5	;RP0=0, select bank0
  2525  0DB3  1303               	bcf	3,6	;RP1=0, select bank0
  2526  0DB4  0828               	movf	?___lwtoft,w
  2527  0DB5  00B1               	movwf	___ftmul@f2
  2528  0DB6  0829               	movf	?___lwtoft+1,w
  2529  0DB7  00B2               	movwf	___ftmul@f2+1
  2530  0DB8  082A               	movf	?___lwtoft+2,w
  2531  0DB9  00B3               	movwf	___ftmul@f2+2
  2532  0DBA  085E               	movf	ADC_RMS@rate+1,w
  2533  0DBB  00A9               	movwf	___lwtoft@c+1
  2534  0DBC  085D               	movf	ADC_RMS@rate,w
  2535  0DBD  00A8               	movwf	___lwtoft@c
  2536  0DBE  158A  2185  158A   	fcall	___lwtoft
  2537  0DC1  1283               	bcf	3,5	;RP0=0, select bank0
  2538  0DC2  1303               	bcf	3,6	;RP1=0, select bank0
  2539  0DC3  0828               	movf	?___lwtoft,w
  2540  0DC4  00AE               	movwf	___ftmul@f1
  2541  0DC5  0829               	movf	?___lwtoft+1,w
  2542  0DC6  00AF               	movwf	___ftmul@f1+1
  2543  0DC7  082A               	movf	?___lwtoft+2,w
  2544  0DC8  00B0               	movwf	___ftmul@f1+2
  2545  0DC9  118A  270F  158A   	fcall	___ftmul
  2546  0DCC  1283               	bcf	3,5	;RP0=0, select bank0
  2547  0DCD  1303               	bcf	3,6	;RP1=0, select bank0
  2548  0DCE  082E               	movf	?___ftmul,w
  2549  0DCF  00C1               	movwf	___ftdiv@f1
  2550  0DD0  082F               	movf	?___ftmul+1,w
  2551  0DD1  00C2               	movwf	___ftdiv@f1+1
  2552  0DD2  0830               	movf	?___ftmul+2,w
  2553  0DD3  00C3               	movwf	___ftdiv@f1+2
  2554  0DD4  3000               	movlw	0
  2555  0DD5  00BE               	movwf	___ftdiv@f2
  2556  0DD6  3020               	movlw	32
  2557  0DD7  00BF               	movwf	___ftdiv@f2+1
  2558  0DD8  3041               	movlw	65
  2559  0DD9  00C0               	movwf	___ftdiv@f2+2
  2560  0DDA  158A  2749  158A   	fcall	___ftdiv
  2561  0DDD  1283               	bcf	3,5	;RP0=0, select bank0
  2562  0DDE  1303               	bcf	3,6	;RP1=0, select bank0
  2563  0DDF  083E               	movf	?___ftdiv,w
  2564  0DE0  00CE               	movwf	___fttol@f1
  2565  0DE1  083F               	movf	?___ftdiv+1,w
  2566  0DE2  00CF               	movwf	___fttol@f1+1
  2567  0DE3  0840               	movf	?___ftdiv+2,w
  2568  0DE4  00D0               	movwf	___fttol@f1+2
  2569  0DE5  158A  24D3         	fcall	___fttol
  2570  0DE7  1283               	bcf	3,5	;RP0=0, select bank0
  2571  0DE8  1303               	bcf	3,6	;RP1=0, select bank0
  2572  0DE9  085F               	movf	ADC_RMS@index,w
  2573  0DEA  00E4               	movwf	??_ADC_RMS+4
  2574  0DEB  0764               	addwf	??_ADC_RMS+4,w
  2575  0DEC  0766               	addwf	ADC_RMS@ARRAY,w
  2576  0DED  00E5               	movwf	??_ADC_RMS+5
  2577  0DEE  0865               	movf	??_ADC_RMS+5,w
  2578  0DEF  0084               	movwf	4
  2579  0DF0  084E               	movf	?___fttol,w
  2580  0DF1  1383               	bcf	3,7	;select IRP bank0
  2581  0DF2  0080               	movwf	0
  2582  0DF3  0A84               	incf	4,f
  2583  0DF4  084F               	movf	?___fttol+1,w
  2584  0DF5  0080               	movwf	0
  2585  0DF6  0008               	return
  2586  0DF7                     __end_of_ADC_RMS:	
  2587                           
  2588                           	psect	text10
  2589  0ABD                     __ptext10:	
  2590 ;; *************** function _ADC_Read *****************
  2591 ;; Defined at:
  2592 ;;		line 17 in file "adc.c"
  2593 ;; Parameters:    Size  Location     Type
  2594 ;;  ANC             1    wreg     unsigned char 
  2595 ;; Auto vars:     Size  Location     Type
  2596 ;;  ANC             1    4[BANK0 ] unsigned char 
  2597 ;; Return value:  Size  Location     Type
  2598 ;;                  2    0[BANK0 ] unsigned int 
  2599 ;; Registers used:
  2600 ;;		wreg, status,2, status,0
  2601 ;; Tracked objects:
  2602 ;;		On entry : 0/0
  2603 ;;		On exit  : 0/0
  2604 ;;		Unchanged: 0/0
  2605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2606 ;;      Params:         0       2       0       0
  2607 ;;      Locals:         0       1       0       0
  2608 ;;      Temps:          0       2       0       0
  2609 ;;      Totals:         0       5       0       0
  2610 ;;Total ram usage:        5 bytes
  2611 ;; Hardware stack levels used:    1
  2612 ;; Hardware stack levels required when called:    2
  2613 ;; This function calls:
  2614 ;;		Nothing
  2615 ;; This function is called by:
  2616 ;;		_ADC_RMS
  2617 ;; This function uses a non-reentrant model
  2618 ;;
  2619                           
  2620                           
  2621                           ;psect for function _ADC_Read
  2622  0ABD                     _ADC_Read:	
  2623                           
  2624                           ;incstack = 0
  2625                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  2626                           ;ADC_Read@ANC stored from wreg
  2627  0ABD  1283               	bcf	3,5	;RP0=0, select bank0
  2628  0ABE  1303               	bcf	3,6	;RP1=0, select bank0
  2629  0ABF  00A4               	movwf	ADC_Read@ANC
  2630                           
  2631                           ;adc.c: 18: if(ANC<0 || ANC>7) return 0;
  2632  0AC0  3008               	movlw	8
  2633  0AC1  0224               	subwf	ADC_Read@ANC,w
  2634  0AC2  1C03               	skipc
  2635  0AC3  2AC7               	goto	l2286
  2636  0AC4  01A0               	clrf	?_ADC_Read
  2637  0AC5  01A1               	clrf	?_ADC_Read+1
  2638  0AC6  0008               	return
  2639  0AC7                     l2286:	
  2640                           
  2641                           ;adc.c: 19: ADCON0 &= ~(7<<2);
  2642  0AC7  30E3               	movlw	227
  2643  0AC8  00A2               	movwf	??_ADC_Read
  2644  0AC9  0822               	movf	??_ADC_Read,w
  2645  0ACA  059F               	andwf	31,f	;volatile
  2646                           
  2647                           ;adc.c: 20: ADCON0 |= ANC<<2;
  2648  0ACB  0824               	movf	ADC_Read@ANC,w
  2649  0ACC  00A2               	movwf	??_ADC_Read
  2650  0ACD  3001               	movlw	1
  2651  0ACE                     u2885:	
  2652  0ACE  1003               	clrc
  2653  0ACF  0DA2               	rlf	??_ADC_Read,f
  2654  0AD0  3EFF               	addlw	-1
  2655  0AD1  1D03               	skipz
  2656  0AD2  2ACE               	goto	u2885
  2657  0AD3  1003               	clrc
  2658  0AD4  0D22               	rlf	??_ADC_Read,w
  2659  0AD5  00A3               	movwf	??_ADC_Read+1
  2660  0AD6  0823               	movf	??_ADC_Read+1,w
  2661  0AD7  049F               	iorwf	31,f	;volatile
  2662                           
  2663                           ;adc.c: 21: _delay((unsigned long)((20)*(8000000/4000000.0)));
  2664  0AD8  300C               	movlw	12
  2665  0AD9  1283               	bcf	3,5	;RP0=0, select bank0
  2666  0ADA  1303               	bcf	3,6	;RP1=0, select bank0
  2667  0ADB  00A2               	movwf	??_ADC_Read
  2668  0ADC                     u3857:	
  2669  0ADC  0BA2               	decfsz	??_ADC_Read,f
  2670  0ADD  2ADC               	goto	u3857
  2671  0ADE  2ADF               	nop2
  2672                           
  2673                           ;adc.c: 22: GO_DONE = 1;
  2674  0ADF  1283               	bcf	3,5	;RP0=0, select bank0
  2675  0AE0  1303               	bcf	3,6	;RP1=0, select bank0
  2676  0AE1  149F               	bsf	31,1	;volatile
  2677  0AE2                     l54:	
  2678                           ;adc.c: 23: while(ADCON0bits.GO_DONE);
  2679                           
  2680  0AE2  189F               	btfsc	31,1	;volatile
  2681  0AE3  2AE2               	goto	l54
  2682                           
  2683                           ;adc.c: 24: return ((ADRESH << 8) + ADRESL);
  2684  0AE4  081E               	movf	30,w	;volatile
  2685  0AE5  00A1               	movwf	?_ADC_Read+1
  2686  0AE6  1683               	bsf	3,5	;RP0=1, select bank1
  2687  0AE7  1303               	bcf	3,6	;RP1=0, select bank1
  2688  0AE8  081E               	movf	30,w	;volatile
  2689  0AE9  1283               	bcf	3,5	;RP0=0, select bank0
  2690  0AEA  1303               	bcf	3,6	;RP1=0, select bank0
  2691  0AEB  00A0               	movwf	?_ADC_Read
  2692  0AEC  0008               	return
  2693  0AED                     __end_of_ADC_Read:	
  2694                           
  2695                           	psect	text11
  2696  002C                     __ptext11:	
  2697 ;; *************** function _ADC_PF *****************
  2698 ;; Defined at:
  2699 ;;		line 47 in file "adc.c"
  2700 ;; Parameters:    Size  Location     Type
  2701 ;;  ARRAY           1    wreg     PTR unsigned int 
  2702 ;;		 -> POWER_FACTOR_ARRAY(8), 
  2703 ;;  index           1   60[BANK0 ] const unsigned char 
  2704 ;; Auto vars:     Size  Location     Type
  2705 ;;  ARRAY           1    7[BANK1 ] PTR unsigned int 
  2706 ;;		 -> POWER_FACTOR_ARRAY(8), 
  2707 ;;  rad_angle       3   17[BANK1 ] float 
  2708 ;;  temp            3   13[BANK1 ] float 
  2709 ;;  step            3   10[BANK1 ] float 
  2710 ;;  angle           2    8[BANK1 ] unsigned int 
  2711 ;;  freq_clock      2    5[BANK1 ] unsigned int 
  2712 ;;  time_dif        2    0[BANK1 ] unsigned int 
  2713 ;;  i               1   16[BANK1 ] unsigned char 
  2714 ;; Return value:  Size  Location     Type
  2715 ;;                  1    wreg      void 
  2716 ;; Registers used:
  2717 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2718 ;; Tracked objects:
  2719 ;;		On entry : 0/0
  2720 ;;		On exit  : 0/0
  2721 ;;		Unchanged: 0/0
  2722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2723 ;;      Params:         0       1       0       0
  2724 ;;      Locals:         0       0      20       0
  2725 ;;      Temps:          0       4       0       0
  2726 ;;      Totals:         0       5      20       0
  2727 ;;Total ram usage:       25 bytes
  2728 ;; Hardware stack levels used:    1
  2729 ;; Hardware stack levels required when called:    4
  2730 ;; This function calls:
  2731 ;;		___awtoft
  2732 ;;		___ftadd
  2733 ;;		___ftdiv
  2734 ;;		___ftmul
  2735 ;;		___fttol
  2736 ;;		___lwdiv
  2737 ;;		___lwtoft
  2738 ;;		___wmul
  2739 ;; This function is called by:
  2740 ;;		_Measure
  2741 ;; This function uses a non-reentrant model
  2742 ;;
  2743                           
  2744                           
  2745                           ;psect for function _ADC_PF
  2746  002C                     _ADC_PF:	
  2747                           
  2748                           ;incstack = 0
  2749                           ; Regs used in _ADC_PF: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2750                           ;ADC_PF@ARRAY stored from wreg
  2751  002C  1683               	bsf	3,5	;RP0=1, select bank1
  2752  002D  1303               	bcf	3,6	;RP1=0, select bank1
  2753  002E  00D2               	movwf	ADC_PF@ARRAY^(0+128)
  2754                           
  2755                           ;adc.c: 48: float step = 1;
  2756  002F  3000               	movlw	0
  2757  0030  00D5               	movwf	ADC_PF@step^(0+128)
  2758  0031  3080               	movlw	128
  2759  0032  00D6               	movwf	(ADC_PF@step+1)^(0+128)
  2760  0033  303F               	movlw	63
  2761  0034  00D7               	movwf	(ADC_PF@step+2)^(0+128)
  2762                           
  2763                           ;adc.c: 49: float temp = 1;
  2764  0035  3000               	movlw	0
  2765  0036  00D8               	movwf	ADC_PF@temp^(0+128)
  2766  0037  3080               	movlw	128
  2767  0038  00D9               	movwf	(ADC_PF@temp+1)^(0+128)
  2768  0039  303F               	movlw	63
  2769  003A  00DA               	movwf	(ADC_PF@temp+2)^(0+128)
  2770                           
  2771                           ;adc.c: 50: float rad_angle;
  2772                           ;adc.c: 51: uint8_t i;
  2773                           ;adc.c: 52: uint16_t time_dif, freq_clock;
  2774                           ;adc.c: 53: uint16_t angle;
  2775                           ;adc.c: 56: T1CONbits.TMR1ON = 0;
  2776  003B  1283               	bcf	3,5	;RP0=0, select bank0
  2777  003C  1303               	bcf	3,6	;RP1=0, select bank0
  2778  003D  1010               	bcf	16,0	;volatile
  2779                           
  2780                           ;adc.c: 57: TMR1H = 0; TMR1L = 0;
  2781  003E  018F               	clrf	15	;volatile
  2782  003F  018E               	clrf	14	;volatile
  2783                           
  2784                           ;adc.c: 58: PF_FLAG = 0;
  2785  0040  1683               	bsf	3,5	;RP0=1, select bank1
  2786  0041  1303               	bcf	3,6	;RP1=0, select bank1
  2787  0042  01AA               	clrf	_PF_FLAG^(0+128)
  2788  0043                     l2592:	
  2789                           ;adc.c: 59: while(!PF_FLAG);
  2790                           
  2791  0043  082A               	movf	_PF_FLAG^(0+128),w
  2792  0044  1903               	btfsc	3,2
  2793  0045  2843               	goto	l2592
  2794                           
  2795                           ;adc.c: 61: T1CONbits.TMR1ON = 1;
  2796  0046  1283               	bcf	3,5	;RP0=0, select bank0
  2797  0047  1303               	bcf	3,6	;RP1=0, select bank0
  2798  0048  1410               	bsf	16,0	;volatile
  2799                           
  2800                           ;adc.c: 63: PF_FLAG = 0;
  2801  0049  1683               	bsf	3,5	;RP0=1, select bank1
  2802  004A  1303               	bcf	3,6	;RP1=0, select bank1
  2803  004B  01AA               	clrf	_PF_FLAG^(0+128)
  2804  004C                     l69:	
  2805                           ;adc.c: 64: while(PORTC&0x01)
  2806                           
  2807  004C  1283               	bcf	3,5	;RP0=0, select bank0
  2808  004D  1303               	bcf	3,6	;RP1=0, select bank0
  2809  004E  1C07               	btfss	7,0	;volatile
  2810  004F  2855               	goto	l72
  2811                           
  2812                           ;adc.c: 65: if(PF_FLAG) break;
  2813  0050  1683               	bsf	3,5	;RP0=1, select bank1
  2814  0051  1303               	bcf	3,6	;RP1=0, select bank1
  2815  0052  082A               	movf	_PF_FLAG^(0+128),w
  2816  0053  1903               	btfsc	3,2
  2817  0054  284C               	goto	l69
  2818  0055                     l72:	
  2819                           
  2820                           ;adc.c: 66: T1CONbits.TMR1ON = 0;
  2821  0055  1283               	bcf	3,5	;RP0=0, select bank0
  2822  0056  1010               	bcf	16,0	;volatile
  2823                           
  2824                           ;adc.c: 68: time_dif = ((TMR1H<<8)+TMR1L);
  2825  0057  080F               	movf	15,w	;volatile
  2826  0058  1683               	bsf	3,5	;RP0=1, select bank1
  2827  0059  1303               	bcf	3,6	;RP1=0, select bank1
  2828  005A  00CC               	movwf	(ADC_PF@time_dif+1)^(0+128)
  2829  005B  1283               	bcf	3,5	;RP0=0, select bank0
  2830  005C  1303               	bcf	3,6	;RP1=0, select bank0
  2831  005D  080E               	movf	14,w	;volatile
  2832  005E  1683               	bsf	3,5	;RP0=1, select bank1
  2833  005F  1303               	bcf	3,6	;RP1=0, select bank1
  2834  0060  00CB               	movwf	ADC_PF@time_dif^(0+128)
  2835                           
  2836                           ;adc.c: 73: T1CONbits.TMR1ON = 0;
  2837  0061  1283               	bcf	3,5	;RP0=0, select bank0
  2838  0062  1303               	bcf	3,6	;RP1=0, select bank0
  2839  0063  1010               	bcf	16,0	;volatile
  2840                           
  2841                           ;adc.c: 74: TMR1H = 0; TMR1L = 0;
  2842  0064  018F               	clrf	15	;volatile
  2843  0065  018E               	clrf	14	;volatile
  2844                           
  2845                           ;adc.c: 75: PF_FLAG = 0;
  2846  0066  1683               	bsf	3,5	;RP0=1, select bank1
  2847  0067  1303               	bcf	3,6	;RP1=0, select bank1
  2848  0068  01AA               	clrf	_PF_FLAG^(0+128)
  2849  0069                     l2610:	
  2850                           ;adc.c: 76: while(!PF_FLAG);
  2851                           
  2852  0069  082A               	movf	_PF_FLAG^(0+128),w
  2853  006A  1903               	btfsc	3,2
  2854  006B  2869               	goto	l2610
  2855                           
  2856                           ;adc.c: 78: T1CONbits.TMR1ON = 1;
  2857  006C  1283               	bcf	3,5	;RP0=0, select bank0
  2858  006D  1303               	bcf	3,6	;RP1=0, select bank0
  2859  006E  1410               	bsf	16,0	;volatile
  2860                           
  2861                           ;adc.c: 79: PF_FLAG = 0;
  2862  006F  1683               	bsf	3,5	;RP0=1, select bank1
  2863  0070  1303               	bcf	3,6	;RP1=0, select bank1
  2864  0071  01AA               	clrf	_PF_FLAG^(0+128)
  2865  0072                     l2614:	
  2866                           ;adc.c: 80: while(!PF_FLAG);
  2867                           
  2868  0072  082A               	movf	_PF_FLAG^(0+128),w
  2869  0073  1903               	btfsc	3,2
  2870  0074  2872               	goto	l2614
  2871                           
  2872                           ;adc.c: 81: T1CONbits.TMR1ON = 0;
  2873  0075  1283               	bcf	3,5	;RP0=0, select bank0
  2874  0076  1303               	bcf	3,6	;RP1=0, select bank0
  2875  0077  1010               	bcf	16,0	;volatile
  2876                           
  2877                           ;adc.c: 82: freq_clock = ((TMR1H<<8)+TMR1L);
  2878  0078  080F               	movf	15,w	;volatile
  2879  0079  1683               	bsf	3,5	;RP0=1, select bank1
  2880  007A  1303               	bcf	3,6	;RP1=0, select bank1
  2881  007B  00D1               	movwf	(ADC_PF@freq_clock+1)^(0+128)
  2882  007C  1283               	bcf	3,5	;RP0=0, select bank0
  2883  007D  1303               	bcf	3,6	;RP1=0, select bank0
  2884  007E  080E               	movf	14,w	;volatile
  2885  007F  1683               	bsf	3,5	;RP0=1, select bank1
  2886  0080  1303               	bcf	3,6	;RP1=0, select bank1
  2887  0081  00D0               	movwf	ADC_PF@freq_clock^(0+128)
  2888                           
  2889                           ;adc.c: 85: rad_angle = (float)(time_dif / (float)freq_clock);
  2890  0082  0851               	movf	(ADC_PF@freq_clock+1)^(0+128),w
  2891  0083  1283               	bcf	3,5	;RP0=0, select bank0
  2892  0084  1303               	bcf	3,6	;RP1=0, select bank0
  2893  0085  00A9               	movwf	___lwtoft@c+1
  2894  0086  1683               	bsf	3,5	;RP0=1, select bank1
  2895  0087  1303               	bcf	3,6	;RP1=0, select bank1
  2896  0088  0850               	movf	ADC_PF@freq_clock^(0+128),w
  2897  0089  1283               	bcf	3,5	;RP0=0, select bank0
  2898  008A  1303               	bcf	3,6	;RP1=0, select bank0
  2899  008B  00A8               	movwf	___lwtoft@c
  2900  008C  158A  2185  118A   	fcall	___lwtoft
  2901  008F  1283               	bcf	3,5	;RP0=0, select bank0
  2902  0090  1303               	bcf	3,6	;RP1=0, select bank0
  2903  0091  0828               	movf	?___lwtoft,w
  2904  0092  00BE               	movwf	___ftdiv@f2
  2905  0093  0829               	movf	?___lwtoft+1,w
  2906  0094  00BF               	movwf	___ftdiv@f2+1
  2907  0095  082A               	movf	?___lwtoft+2,w
  2908  0096  00C0               	movwf	___ftdiv@f2+2
  2909  0097  1683               	bsf	3,5	;RP0=1, select bank1
  2910  0098  1303               	bcf	3,6	;RP1=0, select bank1
  2911  0099  084C               	movf	(ADC_PF@time_dif+1)^(0+128),w
  2912  009A  1283               	bcf	3,5	;RP0=0, select bank0
  2913  009B  1303               	bcf	3,6	;RP1=0, select bank0
  2914  009C  00A9               	movwf	___lwtoft@c+1
  2915  009D  1683               	bsf	3,5	;RP0=1, select bank1
  2916  009E  1303               	bcf	3,6	;RP1=0, select bank1
  2917  009F  084B               	movf	ADC_PF@time_dif^(0+128),w
  2918  00A0  1283               	bcf	3,5	;RP0=0, select bank0
  2919  00A1  1303               	bcf	3,6	;RP1=0, select bank0
  2920  00A2  00A8               	movwf	___lwtoft@c
  2921  00A3  158A  2185  118A   	fcall	___lwtoft
  2922  00A6  1283               	bcf	3,5	;RP0=0, select bank0
  2923  00A7  1303               	bcf	3,6	;RP1=0, select bank0
  2924  00A8  0828               	movf	?___lwtoft,w
  2925  00A9  00C1               	movwf	___ftdiv@f1
  2926  00AA  0829               	movf	?___lwtoft+1,w
  2927  00AB  00C2               	movwf	___ftdiv@f1+1
  2928  00AC  082A               	movf	?___lwtoft+2,w
  2929  00AD  00C3               	movwf	___ftdiv@f1+2
  2930  00AE  158A  2749  118A   	fcall	___ftdiv
  2931  00B1  1283               	bcf	3,5	;RP0=0, select bank0
  2932  00B2  1303               	bcf	3,6	;RP1=0, select bank0
  2933  00B3  083E               	movf	?___ftdiv,w
  2934  00B4  1683               	bsf	3,5	;RP0=1, select bank1
  2935  00B5  1303               	bcf	3,6	;RP1=0, select bank1
  2936  00B6  00DC               	movwf	ADC_PF@rad_angle^(0+128)
  2937  00B7  1283               	bcf	3,5	;RP0=0, select bank0
  2938  00B8  1303               	bcf	3,6	;RP1=0, select bank0
  2939  00B9  083F               	movf	?___ftdiv+1,w
  2940  00BA  1683               	bsf	3,5	;RP0=1, select bank1
  2941  00BB  1303               	bcf	3,6	;RP1=0, select bank1
  2942  00BC  00DD               	movwf	(ADC_PF@rad_angle+1)^(0+128)
  2943  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  2944  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  2945  00BF  0840               	movf	?___ftdiv+2,w
  2946  00C0  1683               	bsf	3,5	;RP0=1, select bank1
  2947  00C1  1303               	bcf	3,6	;RP1=0, select bank1
  2948  00C2  00DE               	movwf	(ADC_PF@rad_angle+2)^(0+128)
  2949                           
  2950                           ;adc.c: 86: rad_angle *= 6.283185;
  2951  00C3  3010               	movlw	16
  2952  00C4  1283               	bcf	3,5	;RP0=0, select bank0
  2953  00C5  1303               	bcf	3,6	;RP1=0, select bank0
  2954  00C6  00AE               	movwf	___ftmul@f1
  2955  00C7  30C9               	movlw	201
  2956  00C8  00AF               	movwf	___ftmul@f1+1
  2957  00C9  3040               	movlw	64
  2958  00CA  00B0               	movwf	___ftmul@f1+2
  2959  00CB  1683               	bsf	3,5	;RP0=1, select bank1
  2960  00CC  1303               	bcf	3,6	;RP1=0, select bank1
  2961  00CD  085C               	movf	ADC_PF@rad_angle^(0+128),w
  2962  00CE  1283               	bcf	3,5	;RP0=0, select bank0
  2963  00CF  1303               	bcf	3,6	;RP1=0, select bank0
  2964  00D0  00B1               	movwf	___ftmul@f2
  2965  00D1  1683               	bsf	3,5	;RP0=1, select bank1
  2966  00D2  1303               	bcf	3,6	;RP1=0, select bank1
  2967  00D3  085D               	movf	(ADC_PF@rad_angle+1)^(0+128),w
  2968  00D4  1283               	bcf	3,5	;RP0=0, select bank0
  2969  00D5  1303               	bcf	3,6	;RP1=0, select bank0
  2970  00D6  00B2               	movwf	___ftmul@f2+1
  2971  00D7  1683               	bsf	3,5	;RP0=1, select bank1
  2972  00D8  1303               	bcf	3,6	;RP1=0, select bank1
  2973  00D9  085E               	movf	(ADC_PF@rad_angle+2)^(0+128),w
  2974  00DA  1283               	bcf	3,5	;RP0=0, select bank0
  2975  00DB  1303               	bcf	3,6	;RP1=0, select bank0
  2976  00DC  00B3               	movwf	___ftmul@f2+2
  2977  00DD  118A  270F  118A   	fcall	___ftmul
  2978  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  2979  00E1  1303               	bcf	3,6	;RP1=0, select bank0
  2980  00E2  082E               	movf	?___ftmul,w
  2981  00E3  1683               	bsf	3,5	;RP0=1, select bank1
  2982  00E4  1303               	bcf	3,6	;RP1=0, select bank1
  2983  00E5  00DC               	movwf	ADC_PF@rad_angle^(0+128)
  2984  00E6  1283               	bcf	3,5	;RP0=0, select bank0
  2985  00E7  1303               	bcf	3,6	;RP1=0, select bank0
  2986  00E8  082F               	movf	?___ftmul+1,w
  2987  00E9  1683               	bsf	3,5	;RP0=1, select bank1
  2988  00EA  1303               	bcf	3,6	;RP1=0, select bank1
  2989  00EB  00DD               	movwf	(ADC_PF@rad_angle+1)^(0+128)
  2990  00EC  1283               	bcf	3,5	;RP0=0, select bank0
  2991  00ED  1303               	bcf	3,6	;RP1=0, select bank0
  2992  00EE  0830               	movf	?___ftmul+2,w
  2993  00EF  1683               	bsf	3,5	;RP0=1, select bank1
  2994  00F0  1303               	bcf	3,6	;RP1=0, select bank1
  2995  00F1  00DE               	movwf	(ADC_PF@rad_angle+2)^(0+128)
  2996                           
  2997                           ;adc.c: 87: angle = (uint16_t)(rad_angle*10000.0);
  2998  00F2  085C               	movf	ADC_PF@rad_angle^(0+128),w
  2999  00F3  1283               	bcf	3,5	;RP0=0, select bank0
  3000  00F4  1303               	bcf	3,6	;RP1=0, select bank0
  3001  00F5  00B1               	movwf	___ftmul@f2
  3002  00F6  1683               	bsf	3,5	;RP0=1, select bank1
  3003  00F7  1303               	bcf	3,6	;RP1=0, select bank1
  3004  00F8  085D               	movf	(ADC_PF@rad_angle+1)^(0+128),w
  3005  00F9  1283               	bcf	3,5	;RP0=0, select bank0
  3006  00FA  1303               	bcf	3,6	;RP1=0, select bank0
  3007  00FB  00B2               	movwf	___ftmul@f2+1
  3008  00FC  1683               	bsf	3,5	;RP0=1, select bank1
  3009  00FD  1303               	bcf	3,6	;RP1=0, select bank1
  3010  00FE  085E               	movf	(ADC_PF@rad_angle+2)^(0+128),w
  3011  00FF  1283               	bcf	3,5	;RP0=0, select bank0
  3012  0100  1303               	bcf	3,6	;RP1=0, select bank0
  3013  0101  00B3               	movwf	___ftmul@f2+2
  3014  0102  3040               	movlw	64
  3015  0103  00AE               	movwf	___ftmul@f1
  3016  0104  301C               	movlw	28
  3017  0105  00AF               	movwf	___ftmul@f1+1
  3018  0106  3046               	movlw	70
  3019  0107  00B0               	movwf	___ftmul@f1+2
  3020  0108  118A  270F  118A   	fcall	___ftmul
  3021  010B  1283               	bcf	3,5	;RP0=0, select bank0
  3022  010C  1303               	bcf	3,6	;RP1=0, select bank0
  3023  010D  082E               	movf	?___ftmul,w
  3024  010E  00CE               	movwf	___fttol@f1
  3025  010F  082F               	movf	?___ftmul+1,w
  3026  0110  00CF               	movwf	___fttol@f1+1
  3027  0111  0830               	movf	?___ftmul+2,w
  3028  0112  00D0               	movwf	___fttol@f1+2
  3029  0113  158A  24D3  118A   	fcall	___fttol
  3030  0116  1283               	bcf	3,5	;RP0=0, select bank0
  3031  0117  1303               	bcf	3,6	;RP1=0, select bank0
  3032  0118  084F               	movf	?___fttol+1,w
  3033  0119  1683               	bsf	3,5	;RP0=1, select bank1
  3034  011A  1303               	bcf	3,6	;RP1=0, select bank1
  3035  011B  00D4               	movwf	(ADC_PF@angle+1)^(0+128)
  3036  011C  1283               	bcf	3,5	;RP0=0, select bank0
  3037  011D  1303               	bcf	3,6	;RP1=0, select bank0
  3038  011E  084E               	movf	?___fttol,w
  3039  011F  1683               	bsf	3,5	;RP0=1, select bank1
  3040  0120  1303               	bcf	3,6	;RP1=0, select bank1
  3041  0121  00D3               	movwf	ADC_PF@angle^(0+128)
  3042                           
  3043                           ;adc.c: 89: if(!index)
  3044  0122  1283               	bcf	3,5	;RP0=0, select bank0
  3045  0123  1303               	bcf	3,6	;RP1=0, select bank0
  3046  0124  085C               	movf	ADC_PF@index,w
  3047  0125  1D03               	btfss	3,2
  3048  0126  294B               	goto	l2642
  3049                           
  3050                           ;adc.c: 90: PF_SIGN = 0;
  3051  0127  01F4               	clrf	_PF_SIGN
  3052                           
  3053                           ;adc.c: 92: switch((uint8_t)(time_dif/(freq_clock/4))){
  3054  0128  294B               	goto	l2642
  3055  0129                     l2628:	
  3056                           ;adc.c: 93: case 0:
  3057                           
  3058                           
  3059                           ;adc.c: 94: PF_SIGN += 1;
  3060  0129  3001               	movlw	1
  3061  012A  2947               	goto	L2
  3062  012B                     l2630:	
  3063                           ;adc.c: 96: case 1:
  3064                           
  3065                           ;adc.c: 95: break;
  3066                           
  3067                           
  3068                           ;adc.c: 98: angle -= (31416/2);
  3069  012B  305C               	movlw	92
  3070  012C  1683               	bsf	3,5	;RP0=1, select bank1
  3071  012D  1303               	bcf	3,6	;RP1=0, select bank1
  3072  012E  02D3               	subwf	ADC_PF@angle^(0+128),f
  3073  012F  303D               	movlw	61
  3074  0130  2941               	goto	L4
  3075  0131                     l2632:	
  3076                           ;adc.c: 100: case 2:
  3077                           
  3078                           ;adc.c: 99: break;
  3079                           
  3080                           
  3081                           ;adc.c: 102: angle -= 31416;
  3082  0131  30B8               	movlw	184
  3083  0132  1683               	bsf	3,5	;RP0=1, select bank1
  3084  0133  1303               	bcf	3,6	;RP1=0, select bank1
  3085  0134  02D3               	subwf	ADC_PF@angle^(0+128),f
  3086  0135  307A               	movlw	122
  3087  0136  2941               	goto	L4
  3088  0137                     l2634:	
  3089                           ;adc.c: 104: case 3:
  3090                           
  3091                           ;adc.c: 103: break;
  3092                           
  3093                           
  3094                           ;adc.c: 105: PF_SIGN += 1;
  3095  0137  3001               	movlw	1
  3096  0138  1283               	bcf	3,5	;RP0=0, select bank0
  3097  0139  00DD               	movwf	??_ADC_PF
  3098  013A  085D               	movf	??_ADC_PF,w
  3099  013B  07F4               	addwf	_PF_SIGN,f
  3100                           
  3101                           ;adc.c: 106: angle -= (3*31416/2);
  3102  013C  3014               	movlw	20
  3103  013D  1683               	bsf	3,5	;RP0=1, select bank1
  3104  013E  1303               	bcf	3,6	;RP1=0, select bank1
  3105  013F  02D3               	subwf	ADC_PF@angle^(0+128),f
  3106  0140  3038               	movlw	56
  3107  0141                     L4:	
  3108  0141  1C03               	skipc
  3109  0142  03D4               	decf	(ADC_PF@angle+1)^(0+128),f
  3110  0143  02D4               	subwf	(ADC_PF@angle+1)^(0+128),f
  3111                           
  3112                           ;adc.c: 107: break;
  3113  0144  2980               	goto	l2644
  3114  0145                     l2638:	
  3115                           ;adc.c: 108: default:
  3116                           
  3117                           
  3118                           ;adc.c: 109: PF_SIGN += 1;
  3119  0145  3001               	movlw	1
  3120  0146  1283               	bcf	3,5	;RP0=0, select bank0
  3121  0147                     L2:	
  3122  0147  00DD               	movwf	??_ADC_PF
  3123  0148  085D               	movf	??_ADC_PF,w
  3124  0149  07F4               	addwf	_PF_SIGN,f
  3125                           
  3126                           ;adc.c: 111: }
  3127                           
  3128                           ;adc.c: 110: break;
  3129  014A  2980               	goto	l2644
  3130  014B                     l2642:	
  3131  014B  1683               	bsf	3,5	;RP0=1, select bank1
  3132  014C  1303               	bcf	3,6	;RP1=0, select bank1
  3133  014D  0851               	movf	(ADC_PF@freq_clock+1)^(0+128),w
  3134  014E  1283               	bcf	3,5	;RP0=0, select bank0
  3135  014F  1303               	bcf	3,6	;RP1=0, select bank0
  3136  0150  00DE               	movwf	??_ADC_PF+1
  3137  0151  1683               	bsf	3,5	;RP0=1, select bank1
  3138  0152  1303               	bcf	3,6	;RP1=0, select bank1
  3139  0153  0850               	movf	ADC_PF@freq_clock^(0+128),w
  3140  0154  1283               	bcf	3,5	;RP0=0, select bank0
  3141  0155  1303               	bcf	3,6	;RP1=0, select bank0
  3142  0156  00DD               	movwf	??_ADC_PF
  3143  0157  1003               	clrc
  3144  0158  0CDE               	rrf	??_ADC_PF+1,f
  3145  0159  0CDD               	rrf	??_ADC_PF,f
  3146  015A  1003               	clrc
  3147  015B  0CDE               	rrf	??_ADC_PF+1,f
  3148  015C  0CDD               	rrf	??_ADC_PF,f
  3149  015D  085D               	movf	??_ADC_PF,w
  3150  015E  00A0               	movwf	___lwdiv@divisor
  3151  015F  085E               	movf	??_ADC_PF+1,w
  3152  0160  00A1               	movwf	___lwdiv@divisor+1
  3153  0161  1683               	bsf	3,5	;RP0=1, select bank1
  3154  0162  1303               	bcf	3,6	;RP1=0, select bank1
  3155  0163  084C               	movf	(ADC_PF@time_dif+1)^(0+128),w
  3156  0164  1283               	bcf	3,5	;RP0=0, select bank0
  3157  0165  1303               	bcf	3,6	;RP1=0, select bank0
  3158  0166  00A3               	movwf	___lwdiv@dividend+1
  3159  0167  1683               	bsf	3,5	;RP0=1, select bank1
  3160  0168  1303               	bcf	3,6	;RP1=0, select bank1
  3161  0169  084B               	movf	ADC_PF@time_dif^(0+128),w
  3162  016A  1283               	bcf	3,5	;RP0=0, select bank0
  3163  016B  1303               	bcf	3,6	;RP1=0, select bank0
  3164  016C  00A2               	movwf	___lwdiv@dividend
  3165  016D  158A  2321  118A   	fcall	___lwdiv
  3166  0170  1283               	bcf	3,5	;RP0=0, select bank0
  3167  0171  1303               	bcf	3,6	;RP1=0, select bank0
  3168  0172  0820               	movf	?___lwdiv,w
  3169                           
  3170                           ; Switch size 1, requested type "space"
  3171                           ; Number of cases is 4, Range of values is 0 to 3
  3172                           ; switch strategies available:
  3173                           ; Name         Instructions Cycles
  3174                           ; simple_byte           13     7 (average)
  3175                           ; direct_byte           15     7 (fixed)
  3176                           ; jumptable            260     6 (fixed)
  3177                           ;	Chosen strategy is simple_byte
  3178  0173  3A00               	xorlw	0	; case 0
  3179  0174  1903               	skipnz
  3180  0175  2929               	goto	l2628
  3181  0176  3A01               	xorlw	1	; case 1
  3182  0177  1903               	skipnz
  3183  0178  292B               	goto	l2630
  3184  0179  3A03               	xorlw	3	; case 2
  3185  017A  1903               	skipnz
  3186  017B  2931               	goto	l2632
  3187  017C  3A01               	xorlw	1	; case 3
  3188  017D  1903               	skipnz
  3189  017E  2937               	goto	l2634
  3190  017F  2945               	goto	l2638
  3191  0180                     l2644:	
  3192                           
  3193                           ;adc.c: 113: if(angle<(31416/4)){
  3194  0180  301E               	movlw	30
  3195  0181  1683               	bsf	3,5	;RP0=1, select bank1
  3196  0182  1303               	bcf	3,6	;RP1=0, select bank1
  3197  0183  0254               	subwf	(ADC_PF@angle+1)^(0+128),w
  3198  0184  30AE               	movlw	174
  3199  0185  1903               	skipnz
  3200  0186  0253               	subwf	ADC_PF@angle^(0+128),w
  3201  0187  1803               	skipnc
  3202  0188  2AD9               	goto	l2660
  3203                           
  3204                           ;adc.c: 114: rad_angle = angle/10000.0;
  3205  0189  3040               	movlw	64
  3206  018A  1283               	bcf	3,5	;RP0=0, select bank0
  3207  018B  1303               	bcf	3,6	;RP1=0, select bank0
  3208  018C  00BE               	movwf	___ftdiv@f2
  3209  018D  301C               	movlw	28
  3210  018E  00BF               	movwf	___ftdiv@f2+1
  3211  018F  3046               	movlw	70
  3212  0190  00C0               	movwf	___ftdiv@f2+2
  3213  0191  1683               	bsf	3,5	;RP0=1, select bank1
  3214  0192  1303               	bcf	3,6	;RP1=0, select bank1
  3215  0193  0854               	movf	(ADC_PF@angle+1)^(0+128),w
  3216  0194  1283               	bcf	3,5	;RP0=0, select bank0
  3217  0195  1303               	bcf	3,6	;RP1=0, select bank0
  3218  0196  00A9               	movwf	___lwtoft@c+1
  3219  0197  1683               	bsf	3,5	;RP0=1, select bank1
  3220  0198  1303               	bcf	3,6	;RP1=0, select bank1
  3221  0199  0853               	movf	ADC_PF@angle^(0+128),w
  3222  019A  1283               	bcf	3,5	;RP0=0, select bank0
  3223  019B  1303               	bcf	3,6	;RP1=0, select bank0
  3224  019C  00A8               	movwf	___lwtoft@c
  3225  019D  158A  2185  118A   	fcall	___lwtoft
  3226  01A0  1283               	bcf	3,5	;RP0=0, select bank0
  3227  01A1  1303               	bcf	3,6	;RP1=0, select bank0
  3228  01A2  0828               	movf	?___lwtoft,w
  3229  01A3  00C1               	movwf	___ftdiv@f1
  3230  01A4  0829               	movf	?___lwtoft+1,w
  3231  01A5  00C2               	movwf	___ftdiv@f1+1
  3232  01A6  082A               	movf	?___lwtoft+2,w
  3233  01A7  00C3               	movwf	___ftdiv@f1+2
  3234  01A8  158A  2749  118A   	fcall	___ftdiv
  3235  01AB  1283               	bcf	3,5	;RP0=0, select bank0
  3236  01AC  1303               	bcf	3,6	;RP1=0, select bank0
  3237  01AD  083E               	movf	?___ftdiv,w
  3238  01AE  1683               	bsf	3,5	;RP0=1, select bank1
  3239  01AF  1303               	bcf	3,6	;RP1=0, select bank1
  3240  01B0  00DC               	movwf	ADC_PF@rad_angle^(0+128)
  3241  01B1  1283               	bcf	3,5	;RP0=0, select bank0
  3242  01B2  1303               	bcf	3,6	;RP1=0, select bank0
  3243  01B3  083F               	movf	?___ftdiv+1,w
  3244  01B4  1683               	bsf	3,5	;RP0=1, select bank1
  3245  01B5  1303               	bcf	3,6	;RP1=0, select bank1
  3246  01B6  00DD               	movwf	(ADC_PF@rad_angle+1)^(0+128)
  3247  01B7  1283               	bcf	3,5	;RP0=0, select bank0
  3248  01B8  1303               	bcf	3,6	;RP1=0, select bank0
  3249  01B9  0840               	movf	?___ftdiv+2,w
  3250  01BA  1683               	bsf	3,5	;RP0=1, select bank1
  3251  01BB  1303               	bcf	3,6	;RP1=0, select bank1
  3252  01BC  00DE               	movwf	(ADC_PF@rad_angle+2)^(0+128)
  3253                           
  3254                           ;adc.c: 115: rad_angle *= rad_angle;
  3255  01BD  085C               	movf	ADC_PF@rad_angle^(0+128),w
  3256  01BE  1283               	bcf	3,5	;RP0=0, select bank0
  3257  01BF  1303               	bcf	3,6	;RP1=0, select bank0
  3258  01C0  00AE               	movwf	___ftmul@f1
  3259  01C1  1683               	bsf	3,5	;RP0=1, select bank1
  3260  01C2  1303               	bcf	3,6	;RP1=0, select bank1
  3261  01C3  085D               	movf	(ADC_PF@rad_angle+1)^(0+128),w
  3262  01C4  1283               	bcf	3,5	;RP0=0, select bank0
  3263  01C5  1303               	bcf	3,6	;RP1=0, select bank0
  3264  01C6  00AF               	movwf	___ftmul@f1+1
  3265  01C7  1683               	bsf	3,5	;RP0=1, select bank1
  3266  01C8  1303               	bcf	3,6	;RP1=0, select bank1
  3267  01C9  085E               	movf	(ADC_PF@rad_angle+2)^(0+128),w
  3268  01CA  1283               	bcf	3,5	;RP0=0, select bank0
  3269  01CB  1303               	bcf	3,6	;RP1=0, select bank0
  3270  01CC  00B0               	movwf	___ftmul@f1+2
  3271  01CD  1683               	bsf	3,5	;RP0=1, select bank1
  3272  01CE  1303               	bcf	3,6	;RP1=0, select bank1
  3273  01CF  085C               	movf	ADC_PF@rad_angle^(0+128),w
  3274  01D0  1283               	bcf	3,5	;RP0=0, select bank0
  3275  01D1  1303               	bcf	3,6	;RP1=0, select bank0
  3276  01D2  00B1               	movwf	___ftmul@f2
  3277  01D3  1683               	bsf	3,5	;RP0=1, select bank1
  3278  01D4  1303               	bcf	3,6	;RP1=0, select bank1
  3279  01D5  085D               	movf	(ADC_PF@rad_angle+1)^(0+128),w
  3280  01D6  1283               	bcf	3,5	;RP0=0, select bank0
  3281  01D7  1303               	bcf	3,6	;RP1=0, select bank0
  3282  01D8  00B2               	movwf	___ftmul@f2+1
  3283  01D9  1683               	bsf	3,5	;RP0=1, select bank1
  3284  01DA  1303               	bcf	3,6	;RP1=0, select bank1
  3285  01DB  085E               	movf	(ADC_PF@rad_angle+2)^(0+128),w
  3286  01DC  1283               	bcf	3,5	;RP0=0, select bank0
  3287  01DD  1303               	bcf	3,6	;RP1=0, select bank0
  3288  01DE  00B3               	movwf	___ftmul@f2+2
  3289  01DF  118A  270F  118A   	fcall	___ftmul
  3290  01E2  1283               	bcf	3,5	;RP0=0, select bank0
  3291  01E3  1303               	bcf	3,6	;RP1=0, select bank0
  3292  01E4  082E               	movf	?___ftmul,w
  3293  01E5  1683               	bsf	3,5	;RP0=1, select bank1
  3294  01E6  1303               	bcf	3,6	;RP1=0, select bank1
  3295  01E7  00DC               	movwf	ADC_PF@rad_angle^(0+128)
  3296  01E8  1283               	bcf	3,5	;RP0=0, select bank0
  3297  01E9  1303               	bcf	3,6	;RP1=0, select bank0
  3298  01EA  082F               	movf	?___ftmul+1,w
  3299  01EB  1683               	bsf	3,5	;RP0=1, select bank1
  3300  01EC  1303               	bcf	3,6	;RP1=0, select bank1
  3301  01ED  00DD               	movwf	(ADC_PF@rad_angle+1)^(0+128)
  3302  01EE  1283               	bcf	3,5	;RP0=0, select bank0
  3303  01EF  1303               	bcf	3,6	;RP1=0, select bank0
  3304  01F0  0830               	movf	?___ftmul+2,w
  3305  01F1  1683               	bsf	3,5	;RP0=1, select bank1
  3306  01F2  1303               	bcf	3,6	;RP1=0, select bank1
  3307  01F3  00DE               	movwf	(ADC_PF@rad_angle+2)^(0+128)
  3308                           
  3309                           ;adc.c: 116: for(i=1;i<=5;i++){
  3310  01F4  01DB               	clrf	ADC_PF@i^(0+128)
  3311  01F5  0ADB               	incf	ADC_PF@i^(0+128),f
  3312  01F6                     L5:	
  3313  01F6  3006               	movlw	6
  3314  01F7  025B               	subwf	ADC_PF@i^(0+128),w
  3315  01F8  1803               	btfsc	3,0
  3316  01F9  2C43               	goto	l2678
  3317                           
  3318                           ;adc.c: 117: step *= ((-1*rad_angle)/(2*i*(2*i-1)));
  3319  01FA  085C               	movf	ADC_PF@rad_angle^(0+128),w
  3320  01FB  1283               	bcf	3,5	;RP0=0, select bank0
  3321  01FC  1303               	bcf	3,6	;RP1=0, select bank0
  3322  01FD  00B1               	movwf	___ftmul@f2
  3323  01FE  1683               	bsf	3,5	;RP0=1, select bank1
  3324  01FF  1303               	bcf	3,6	;RP1=0, select bank1
  3325  0200  085D               	movf	(ADC_PF@rad_angle+1)^(0+128),w
  3326  0201  1283               	bcf	3,5	;RP0=0, select bank0
  3327  0202  1303               	bcf	3,6	;RP1=0, select bank0
  3328  0203  00B2               	movwf	___ftmul@f2+1
  3329  0204  1683               	bsf	3,5	;RP0=1, select bank1
  3330  0205  1303               	bcf	3,6	;RP1=0, select bank1
  3331  0206  085E               	movf	(ADC_PF@rad_angle+2)^(0+128),w
  3332  0207  1283               	bcf	3,5	;RP0=0, select bank0
  3333  0208  1303               	bcf	3,6	;RP1=0, select bank0
  3334  0209  00B3               	movwf	___ftmul@f2+2
  3335  020A  3000               	movlw	0
  3336  020B  00AE               	movwf	___ftmul@f1
  3337  020C  3080               	movlw	128
  3338  020D  00AF               	movwf	___ftmul@f1+1
  3339  020E  30BF               	movlw	191
  3340  020F  00B0               	movwf	___ftmul@f1+2
  3341  0210  118A  270F  118A   	fcall	___ftmul
  3342  0213  1283               	bcf	3,5	;RP0=0, select bank0
  3343  0214  1303               	bcf	3,6	;RP1=0, select bank0
  3344  0215  082E               	movf	?___ftmul,w
  3345  0216  00C1               	movwf	___ftdiv@f1
  3346  0217  082F               	movf	?___ftmul+1,w
  3347  0218  00C2               	movwf	___ftdiv@f1+1
  3348  0219  0830               	movf	?___ftmul+2,w
  3349  021A  00C3               	movwf	___ftdiv@f1+2
  3350  021B  1683               	bsf	3,5	;RP0=1, select bank1
  3351  021C  1303               	bcf	3,6	;RP1=0, select bank1
  3352  021D  085B               	movf	ADC_PF@i^(0+128),w
  3353  021E  1283               	bcf	3,5	;RP0=0, select bank0
  3354  021F  1303               	bcf	3,6	;RP1=0, select bank0
  3355  0220  00DD               	movwf	??_ADC_PF
  3356  0221  01DE               	clrf	??_ADC_PF+1
  3357  0222  1003               	clrc
  3358  0223  0D5D               	rlf	??_ADC_PF,w
  3359  0224  00A2               	movwf	___wmul@multiplicand
  3360  0225  0D5E               	rlf	??_ADC_PF+1,w
  3361  0226  00A3               	movwf	___wmul@multiplicand+1
  3362  0227  1683               	bsf	3,5	;RP0=1, select bank1
  3363  0228  1303               	bcf	3,6	;RP1=0, select bank1
  3364  0229  085B               	movf	ADC_PF@i^(0+128),w
  3365  022A  1283               	bcf	3,5	;RP0=0, select bank0
  3366  022B  1303               	bcf	3,6	;RP1=0, select bank0
  3367  022C  00DF               	movwf	??_ADC_PF+2
  3368  022D  01E0               	clrf	??_ADC_PF+3
  3369  022E  1003               	clrc
  3370  022F  0DDF               	rlf	??_ADC_PF+2,f
  3371  0230  0DE0               	rlf	??_ADC_PF+3,f
  3372  0231  085F               	movf	??_ADC_PF+2,w
  3373  0232  3EFF               	addlw	255
  3374  0233  00A0               	movwf	___wmul@multiplier
  3375  0234  0860               	movf	??_ADC_PF+3,w
  3376  0235  1803               	skipnc
  3377  0236  3E01               	addlw	1
  3378  0237  3EFF               	addlw	255
  3379  0238  00A1               	movwf	___wmul@multiplier+1
  3380  0239  158A  21F1  118A   	fcall	___wmul
  3381  023C  1283               	bcf	3,5	;RP0=0, select bank0
  3382  023D  1303               	bcf	3,6	;RP1=0, select bank0
  3383  023E  0821               	movf	?___wmul+1,w
  3384  023F  00A9               	movwf	___awtoft@c+1
  3385  0240  0820               	movf	?___wmul,w
  3386  0241  00A8               	movwf	___awtoft@c
  3387  0242  158A  2214  118A   	fcall	___awtoft
  3388  0245  1283               	bcf	3,5	;RP0=0, select bank0
  3389  0246  1303               	bcf	3,6	;RP1=0, select bank0
  3390  0247  0828               	movf	?___awtoft,w
  3391  0248  00BE               	movwf	___ftdiv@f2
  3392  0249  0829               	movf	?___awtoft+1,w
  3393  024A  00BF               	movwf	___ftdiv@f2+1
  3394  024B  082A               	movf	?___awtoft+2,w
  3395  024C  00C0               	movwf	___ftdiv@f2+2
  3396  024D  158A  2749  118A   	fcall	___ftdiv
  3397  0250  1283               	bcf	3,5	;RP0=0, select bank0
  3398  0251  1303               	bcf	3,6	;RP1=0, select bank0
  3399  0252  083E               	movf	?___ftdiv,w
  3400  0253  1683               	bsf	3,5	;RP0=1, select bank1
  3401  0254  1303               	bcf	3,6	;RP1=0, select bank1
  3402  0255  00CD               	movwf	_ADC_PF$960^(0+128)
  3403  0256  1283               	bcf	3,5	;RP0=0, select bank0
  3404  0257  1303               	bcf	3,6	;RP1=0, select bank0
  3405  0258  083F               	movf	?___ftdiv+1,w
  3406  0259  1683               	bsf	3,5	;RP0=1, select bank1
  3407  025A  1303               	bcf	3,6	;RP1=0, select bank1
  3408  025B  00CE               	movwf	(_ADC_PF$960+1)^(0+128)
  3409  025C  1283               	bcf	3,5	;RP0=0, select bank0
  3410  025D  1303               	bcf	3,6	;RP1=0, select bank0
  3411  025E  0840               	movf	?___ftdiv+2,w
  3412  025F  1683               	bsf	3,5	;RP0=1, select bank1
  3413  0260  1303               	bcf	3,6	;RP1=0, select bank1
  3414  0261  00CF               	movwf	(_ADC_PF$960+2)^(0+128)
  3415                           
  3416                           ;adc.c: 117: step *= ((-1*rad_angle)/(2*i*(2*i-1)));
  3417  0262  084D               	movf	_ADC_PF$960^(0+128),w
  3418  0263  1283               	bcf	3,5	;RP0=0, select bank0
  3419  0264  1303               	bcf	3,6	;RP1=0, select bank0
  3420  0265  00AE               	movwf	___ftmul@f1
  3421  0266  1683               	bsf	3,5	;RP0=1, select bank1
  3422  0267  1303               	bcf	3,6	;RP1=0, select bank1
  3423  0268  084E               	movf	(_ADC_PF$960+1)^(0+128),w
  3424  0269  1283               	bcf	3,5	;RP0=0, select bank0
  3425  026A  1303               	bcf	3,6	;RP1=0, select bank0
  3426  026B  00AF               	movwf	___ftmul@f1+1
  3427  026C  1683               	bsf	3,5	;RP0=1, select bank1
  3428  026D  1303               	bcf	3,6	;RP1=0, select bank1
  3429  026E  084F               	movf	(_ADC_PF$960+2)^(0+128),w
  3430  026F  1283               	bcf	3,5	;RP0=0, select bank0
  3431  0270  1303               	bcf	3,6	;RP1=0, select bank0
  3432  0271  00B0               	movwf	___ftmul@f1+2
  3433  0272  1683               	bsf	3,5	;RP0=1, select bank1
  3434  0273  1303               	bcf	3,6	;RP1=0, select bank1
  3435  0274  0855               	movf	ADC_PF@step^(0+128),w
  3436  0275  1283               	bcf	3,5	;RP0=0, select bank0
  3437  0276  1303               	bcf	3,6	;RP1=0, select bank0
  3438  0277  00B1               	movwf	___ftmul@f2
  3439  0278  1683               	bsf	3,5	;RP0=1, select bank1
  3440  0279  1303               	bcf	3,6	;RP1=0, select bank1
  3441  027A  0856               	movf	(ADC_PF@step+1)^(0+128),w
  3442  027B  1283               	bcf	3,5	;RP0=0, select bank0
  3443  027C  1303               	bcf	3,6	;RP1=0, select bank0
  3444  027D  00B2               	movwf	___ftmul@f2+1
  3445  027E  1683               	bsf	3,5	;RP0=1, select bank1
  3446  027F  1303               	bcf	3,6	;RP1=0, select bank1
  3447  0280  0857               	movf	(ADC_PF@step+2)^(0+128),w
  3448  0281  1283               	bcf	3,5	;RP0=0, select bank0
  3449  0282  1303               	bcf	3,6	;RP1=0, select bank0
  3450  0283  00B3               	movwf	___ftmul@f2+2
  3451  0284  118A  270F  118A   	fcall	___ftmul
  3452  0287  1283               	bcf	3,5	;RP0=0, select bank0
  3453  0288  1303               	bcf	3,6	;RP1=0, select bank0
  3454  0289  082E               	movf	?___ftmul,w
  3455  028A  1683               	bsf	3,5	;RP0=1, select bank1
  3456  028B  1303               	bcf	3,6	;RP1=0, select bank1
  3457  028C  00D5               	movwf	ADC_PF@step^(0+128)
  3458  028D  1283               	bcf	3,5	;RP0=0, select bank0
  3459  028E  1303               	bcf	3,6	;RP1=0, select bank0
  3460  028F  082F               	movf	?___ftmul+1,w
  3461  0290  1683               	bsf	3,5	;RP0=1, select bank1
  3462  0291  1303               	bcf	3,6	;RP1=0, select bank1
  3463  0292  00D6               	movwf	(ADC_PF@step+1)^(0+128)
  3464  0293  1283               	bcf	3,5	;RP0=0, select bank0
  3465  0294  1303               	bcf	3,6	;RP1=0, select bank0
  3466  0295  0830               	movf	?___ftmul+2,w
  3467  0296  1683               	bsf	3,5	;RP0=1, select bank1
  3468  0297  1303               	bcf	3,6	;RP1=0, select bank1
  3469  0298  00D7               	movwf	(ADC_PF@step+2)^(0+128)
  3470                           
  3471                           ;adc.c: 118: temp += step;
  3472  0299  0855               	movf	ADC_PF@step^(0+128),w
  3473  029A  1283               	bcf	3,5	;RP0=0, select bank0
  3474  029B  1303               	bcf	3,6	;RP1=0, select bank0
  3475  029C  00AC               	movwf	___ftadd@f1
  3476  029D  1683               	bsf	3,5	;RP0=1, select bank1
  3477  029E  1303               	bcf	3,6	;RP1=0, select bank1
  3478  029F  0856               	movf	(ADC_PF@step+1)^(0+128),w
  3479  02A0  1283               	bcf	3,5	;RP0=0, select bank0
  3480  02A1  1303               	bcf	3,6	;RP1=0, select bank0
  3481  02A2  00AD               	movwf	___ftadd@f1+1
  3482  02A3  1683               	bsf	3,5	;RP0=1, select bank1
  3483  02A4  1303               	bcf	3,6	;RP1=0, select bank1
  3484  02A5  0857               	movf	(ADC_PF@step+2)^(0+128),w
  3485  02A6  1283               	bcf	3,5	;RP0=0, select bank0
  3486  02A7  1303               	bcf	3,6	;RP1=0, select bank0
  3487  02A8  00AE               	movwf	___ftadd@f1+2
  3488  02A9  1683               	bsf	3,5	;RP0=1, select bank1
  3489  02AA  1303               	bcf	3,6	;RP1=0, select bank1
  3490  02AB  0858               	movf	ADC_PF@temp^(0+128),w
  3491  02AC  1283               	bcf	3,5	;RP0=0, select bank0
  3492  02AD  1303               	bcf	3,6	;RP1=0, select bank0
  3493  02AE  00AF               	movwf	___ftadd@f2
  3494  02AF  1683               	bsf	3,5	;RP0=1, select bank1
  3495  02B0  1303               	bcf	3,6	;RP1=0, select bank1
  3496  02B1  0859               	movf	(ADC_PF@temp+1)^(0+128),w
  3497  02B2  1283               	bcf	3,5	;RP0=0, select bank0
  3498  02B3  1303               	bcf	3,6	;RP1=0, select bank0
  3499  02B4  00B0               	movwf	___ftadd@f2+1
  3500  02B5  1683               	bsf	3,5	;RP0=1, select bank1
  3501  02B6  1303               	bcf	3,6	;RP1=0, select bank1
  3502  02B7  085A               	movf	(ADC_PF@temp+2)^(0+128),w
  3503  02B8  1283               	bcf	3,5	;RP0=0, select bank0
  3504  02B9  1303               	bcf	3,6	;RP1=0, select bank0
  3505  02BA  00B1               	movwf	___ftadd@f2+2
  3506  02BB  118A  2504  118A   	fcall	___ftadd
  3507  02BE  1283               	bcf	3,5	;RP0=0, select bank0
  3508  02BF  1303               	bcf	3,6	;RP1=0, select bank0
  3509  02C0  082C               	movf	?___ftadd,w
  3510  02C1  1683               	bsf	3,5	;RP0=1, select bank1
  3511  02C2  1303               	bcf	3,6	;RP1=0, select bank1
  3512  02C3  00D8               	movwf	ADC_PF@temp^(0+128)
  3513  02C4  1283               	bcf	3,5	;RP0=0, select bank0
  3514  02C5  1303               	bcf	3,6	;RP1=0, select bank0
  3515  02C6  082D               	movf	?___ftadd+1,w
  3516  02C7  1683               	bsf	3,5	;RP0=1, select bank1
  3517  02C8  1303               	bcf	3,6	;RP1=0, select bank1
  3518  02C9  00D9               	movwf	(ADC_PF@temp+1)^(0+128)
  3519  02CA  1283               	bcf	3,5	;RP0=0, select bank0
  3520  02CB  1303               	bcf	3,6	;RP1=0, select bank0
  3521  02CC  082E               	movf	?___ftadd+2,w
  3522  02CD  1683               	bsf	3,5	;RP0=1, select bank1
  3523  02CE  1303               	bcf	3,6	;RP1=0, select bank1
  3524  02CF  00DA               	movwf	(ADC_PF@temp+2)^(0+128)
  3525  02D0  3001               	movlw	1
  3526  02D1  1283               	bcf	3,5	;RP0=0, select bank0
  3527  02D2  1303               	bcf	3,6	;RP1=0, select bank0
  3528  02D3  00DD               	movwf	??_ADC_PF
  3529  02D4  085D               	movf	??_ADC_PF,w
  3530  02D5  1683               	bsf	3,5	;RP0=1, select bank1
  3531  02D6  1303               	bcf	3,6	;RP1=0, select bank1
  3532  02D7  07DB               	addwf	ADC_PF@i^(0+128),f
  3533  02D8  29F6               	goto	L5
  3534  02D9                     l2660:	
  3535                           ;adc.c: 121: }
  3536                           ;adc.c: 122: }else{
  3537                           
  3538                           
  3539                           ;adc.c: 123: rad_angle = ((31416/2)-angle)/10000.0;
  3540  02D9  3040               	movlw	64
  3541  02DA  1283               	bcf	3,5	;RP0=0, select bank0
  3542  02DB  1303               	bcf	3,6	;RP1=0, select bank0
  3543  02DC  00BE               	movwf	___ftdiv@f2
  3544  02DD  301C               	movlw	28
  3545  02DE  00BF               	movwf	___ftdiv@f2+1
  3546  02DF  3046               	movlw	70
  3547  02E0  00C0               	movwf	___ftdiv@f2+2
  3548  02E1  1683               	bsf	3,5	;RP0=1, select bank1
  3549  02E2  1303               	bcf	3,6	;RP1=0, select bank1
  3550  02E3  0953               	comf	ADC_PF@angle^(0+128),w
  3551  02E4  1283               	bcf	3,5	;RP0=0, select bank0
  3552  02E5  1303               	bcf	3,6	;RP1=0, select bank0
  3553  02E6  00DD               	movwf	??_ADC_PF
  3554  02E7  1683               	bsf	3,5	;RP0=1, select bank1
  3555  02E8  1303               	bcf	3,6	;RP1=0, select bank1
  3556  02E9  0954               	comf	(ADC_PF@angle+1)^(0+128),w
  3557  02EA  1283               	bcf	3,5	;RP0=0, select bank0
  3558  02EB  1303               	bcf	3,6	;RP1=0, select bank0
  3559  02EC  00DE               	movwf	??_ADC_PF+1
  3560  02ED  0ADD               	incf	??_ADC_PF,f
  3561  02EE  1903               	skipnz
  3562  02EF  0ADE               	incf	??_ADC_PF+1,f
  3563  02F0  085D               	movf	??_ADC_PF,w
  3564  02F1  3E5C               	addlw	92
  3565  02F2  00A8               	movwf	___lwtoft@c
  3566  02F3  085E               	movf	??_ADC_PF+1,w
  3567  02F4  1803               	skipnc
  3568  02F5  3E01               	addlw	1
  3569  02F6  3E3D               	addlw	61
  3570  02F7  00A9               	movwf	___lwtoft@c+1
  3571  02F8  158A  2185  118A   	fcall	___lwtoft
  3572  02FB  1283               	bcf	3,5	;RP0=0, select bank0
  3573  02FC  1303               	bcf	3,6	;RP1=0, select bank0
  3574  02FD  0828               	movf	?___lwtoft,w
  3575  02FE  00C1               	movwf	___ftdiv@f1
  3576  02FF  0829               	movf	?___lwtoft+1,w
  3577  0300  00C2               	movwf	___ftdiv@f1+1
  3578  0301  082A               	movf	?___lwtoft+2,w
  3579  0302  00C3               	movwf	___ftdiv@f1+2
  3580  0303  158A  2749  118A   	fcall	___ftdiv
  3581  0306  1283               	bcf	3,5	;RP0=0, select bank0
  3582  0307  1303               	bcf	3,6	;RP1=0, select bank0
  3583  0308  083E               	movf	?___ftdiv,w
  3584  0309  1683               	bsf	3,5	;RP0=1, select bank1
  3585  030A  1303               	bcf	3,6	;RP1=0, select bank1
  3586  030B  00DC               	movwf	ADC_PF@rad_angle^(0+128)
  3587  030C  1283               	bcf	3,5	;RP0=0, select bank0
  3588  030D  1303               	bcf	3,6	;RP1=0, select bank0
  3589  030E  083F               	movf	?___ftdiv+1,w
  3590  030F  1683               	bsf	3,5	;RP0=1, select bank1
  3591  0310  1303               	bcf	3,6	;RP1=0, select bank1
  3592  0311  00DD               	movwf	(ADC_PF@rad_angle+1)^(0+128)
  3593  0312  1283               	bcf	3,5	;RP0=0, select bank0
  3594  0313  1303               	bcf	3,6	;RP1=0, select bank0
  3595  0314  0840               	movf	?___ftdiv+2,w
  3596  0315  1683               	bsf	3,5	;RP0=1, select bank1
  3597  0316  1303               	bcf	3,6	;RP1=0, select bank1
  3598  0317  00DE               	movwf	(ADC_PF@rad_angle+2)^(0+128)
  3599                           
  3600                           ;adc.c: 124: temp = rad_angle;
  3601  0318  085C               	movf	ADC_PF@rad_angle^(0+128),w
  3602  0319  00D8               	movwf	ADC_PF@temp^(0+128)
  3603  031A  085D               	movf	(ADC_PF@rad_angle+1)^(0+128),w
  3604  031B  00D9               	movwf	(ADC_PF@temp+1)^(0+128)
  3605  031C  085E               	movf	(ADC_PF@rad_angle+2)^(0+128),w
  3606  031D  00DA               	movwf	(ADC_PF@temp+2)^(0+128)
  3607                           
  3608                           ;adc.c: 125: step = rad_angle;
  3609  031E  085C               	movf	ADC_PF@rad_angle^(0+128),w
  3610  031F  00D5               	movwf	ADC_PF@step^(0+128)
  3611  0320  085D               	movf	(ADC_PF@rad_angle+1)^(0+128),w
  3612  0321  00D6               	movwf	(ADC_PF@step+1)^(0+128)
  3613  0322  085E               	movf	(ADC_PF@rad_angle+2)^(0+128),w
  3614  0323  00D7               	movwf	(ADC_PF@step+2)^(0+128)
  3615                           
  3616                           ;adc.c: 126: rad_angle *= rad_angle;
  3617  0324  085C               	movf	ADC_PF@rad_angle^(0+128),w
  3618  0325  1283               	bcf	3,5	;RP0=0, select bank0
  3619  0326  1303               	bcf	3,6	;RP1=0, select bank0
  3620  0327  00AE               	movwf	___ftmul@f1
  3621  0328  1683               	bsf	3,5	;RP0=1, select bank1
  3622  0329  1303               	bcf	3,6	;RP1=0, select bank1
  3623  032A  085D               	movf	(ADC_PF@rad_angle+1)^(0+128),w
  3624  032B  1283               	bcf	3,5	;RP0=0, select bank0
  3625  032C  1303               	bcf	3,6	;RP1=0, select bank0
  3626  032D  00AF               	movwf	___ftmul@f1+1
  3627  032E  1683               	bsf	3,5	;RP0=1, select bank1
  3628  032F  1303               	bcf	3,6	;RP1=0, select bank1
  3629  0330  085E               	movf	(ADC_PF@rad_angle+2)^(0+128),w
  3630  0331  1283               	bcf	3,5	;RP0=0, select bank0
  3631  0332  1303               	bcf	3,6	;RP1=0, select bank0
  3632  0333  00B0               	movwf	___ftmul@f1+2
  3633  0334  1683               	bsf	3,5	;RP0=1, select bank1
  3634  0335  1303               	bcf	3,6	;RP1=0, select bank1
  3635  0336  085C               	movf	ADC_PF@rad_angle^(0+128),w
  3636  0337  1283               	bcf	3,5	;RP0=0, select bank0
  3637  0338  1303               	bcf	3,6	;RP1=0, select bank0
  3638  0339  00B1               	movwf	___ftmul@f2
  3639  033A  1683               	bsf	3,5	;RP0=1, select bank1
  3640  033B  1303               	bcf	3,6	;RP1=0, select bank1
  3641  033C  085D               	movf	(ADC_PF@rad_angle+1)^(0+128),w
  3642  033D  1283               	bcf	3,5	;RP0=0, select bank0
  3643  033E  1303               	bcf	3,6	;RP1=0, select bank0
  3644  033F  00B2               	movwf	___ftmul@f2+1
  3645  0340  1683               	bsf	3,5	;RP0=1, select bank1
  3646  0341  1303               	bcf	3,6	;RP1=0, select bank1
  3647  0342  085E               	movf	(ADC_PF@rad_angle+2)^(0+128),w
  3648  0343  1283               	bcf	3,5	;RP0=0, select bank0
  3649  0344  1303               	bcf	3,6	;RP1=0, select bank0
  3650  0345  00B3               	movwf	___ftmul@f2+2
  3651  0346  118A  270F  118A   	fcall	___ftmul
  3652  0349  1283               	bcf	3,5	;RP0=0, select bank0
  3653  034A  1303               	bcf	3,6	;RP1=0, select bank0
  3654  034B  082E               	movf	?___ftmul,w
  3655  034C  1683               	bsf	3,5	;RP0=1, select bank1
  3656  034D  1303               	bcf	3,6	;RP1=0, select bank1
  3657  034E  00DC               	movwf	ADC_PF@rad_angle^(0+128)
  3658  034F  1283               	bcf	3,5	;RP0=0, select bank0
  3659  0350  1303               	bcf	3,6	;RP1=0, select bank0
  3660  0351  082F               	movf	?___ftmul+1,w
  3661  0352  1683               	bsf	3,5	;RP0=1, select bank1
  3662  0353  1303               	bcf	3,6	;RP1=0, select bank1
  3663  0354  00DD               	movwf	(ADC_PF@rad_angle+1)^(0+128)
  3664  0355  1283               	bcf	3,5	;RP0=0, select bank0
  3665  0356  1303               	bcf	3,6	;RP1=0, select bank0
  3666  0357  0830               	movf	?___ftmul+2,w
  3667  0358  1683               	bsf	3,5	;RP0=1, select bank1
  3668  0359  1303               	bcf	3,6	;RP1=0, select bank1
  3669  035A  00DE               	movwf	(ADC_PF@rad_angle+2)^(0+128)
  3670                           
  3671                           ;adc.c: 127: for(i=1;i<=5;i++){
  3672  035B  01DB               	clrf	ADC_PF@i^(0+128)
  3673  035C  0ADB               	incf	ADC_PF@i^(0+128),f
  3674  035D  3006               	movlw	6
  3675  035E  025B               	subwf	ADC_PF@i^(0+128),w
  3676  035F  1803               	btfsc	3,0
  3677  0360  2C43               	goto	l2678
  3678  0361                     l2672:	
  3679                           
  3680                           ;adc.c: 128: step *= ((-1*rad_angle)/(2*i*(2*i+1)));
  3681  0361  085C               	movf	ADC_PF@rad_angle^(0+128),w
  3682  0362  1283               	bcf	3,5	;RP0=0, select bank0
  3683  0363  1303               	bcf	3,6	;RP1=0, select bank0
  3684  0364  00B1               	movwf	___ftmul@f2
  3685  0365  1683               	bsf	3,5	;RP0=1, select bank1
  3686  0366  1303               	bcf	3,6	;RP1=0, select bank1
  3687  0367  085D               	movf	(ADC_PF@rad_angle+1)^(0+128),w
  3688  0368  1283               	bcf	3,5	;RP0=0, select bank0
  3689  0369  1303               	bcf	3,6	;RP1=0, select bank0
  3690  036A  00B2               	movwf	___ftmul@f2+1
  3691  036B  1683               	bsf	3,5	;RP0=1, select bank1
  3692  036C  1303               	bcf	3,6	;RP1=0, select bank1
  3693  036D  085E               	movf	(ADC_PF@rad_angle+2)^(0+128),w
  3694  036E  1283               	bcf	3,5	;RP0=0, select bank0
  3695  036F  1303               	bcf	3,6	;RP1=0, select bank0
  3696  0370  00B3               	movwf	___ftmul@f2+2
  3697  0371  3000               	movlw	0
  3698  0372  00AE               	movwf	___ftmul@f1
  3699  0373  3080               	movlw	128
  3700  0374  00AF               	movwf	___ftmul@f1+1
  3701  0375  30BF               	movlw	191
  3702  0376  00B0               	movwf	___ftmul@f1+2
  3703  0377  118A  270F  118A   	fcall	___ftmul
  3704  037A  1283               	bcf	3,5	;RP0=0, select bank0
  3705  037B  1303               	bcf	3,6	;RP1=0, select bank0
  3706  037C  082E               	movf	?___ftmul,w
  3707  037D  00C1               	movwf	___ftdiv@f1
  3708  037E  082F               	movf	?___ftmul+1,w
  3709  037F  00C2               	movwf	___ftdiv@f1+1
  3710  0380  0830               	movf	?___ftmul+2,w
  3711  0381  00C3               	movwf	___ftdiv@f1+2
  3712  0382  1683               	bsf	3,5	;RP0=1, select bank1
  3713  0383  1303               	bcf	3,6	;RP1=0, select bank1
  3714  0384  085B               	movf	ADC_PF@i^(0+128),w
  3715  0385  1283               	bcf	3,5	;RP0=0, select bank0
  3716  0386  1303               	bcf	3,6	;RP1=0, select bank0
  3717  0387  00DD               	movwf	??_ADC_PF
  3718  0388  01DE               	clrf	??_ADC_PF+1
  3719  0389  1003               	clrc
  3720  038A  0D5D               	rlf	??_ADC_PF,w
  3721  038B  00A2               	movwf	___wmul@multiplicand
  3722  038C  0D5E               	rlf	??_ADC_PF+1,w
  3723  038D  00A3               	movwf	___wmul@multiplicand+1
  3724  038E  1683               	bsf	3,5	;RP0=1, select bank1
  3725  038F  1303               	bcf	3,6	;RP1=0, select bank1
  3726  0390  085B               	movf	ADC_PF@i^(0+128),w
  3727  0391  1283               	bcf	3,5	;RP0=0, select bank0
  3728  0392  1303               	bcf	3,6	;RP1=0, select bank0
  3729  0393  00DF               	movwf	??_ADC_PF+2
  3730  0394  01E0               	clrf	??_ADC_PF+3
  3731  0395  1003               	clrc
  3732  0396  0DDF               	rlf	??_ADC_PF+2,f
  3733  0397  0DE0               	rlf	??_ADC_PF+3,f
  3734  0398  085F               	movf	??_ADC_PF+2,w
  3735  0399  3E01               	addlw	1
  3736  039A  00A0               	movwf	___wmul@multiplier
  3737  039B  0860               	movf	??_ADC_PF+3,w
  3738  039C  1803               	skipnc
  3739  039D  3E01               	addlw	1
  3740  039E  3E00               	addlw	0
  3741  039F  00A1               	movwf	___wmul@multiplier+1
  3742  03A0  158A  21F1  118A   	fcall	___wmul
  3743  03A3  1283               	bcf	3,5	;RP0=0, select bank0
  3744  03A4  1303               	bcf	3,6	;RP1=0, select bank0
  3745  03A5  0821               	movf	?___wmul+1,w
  3746  03A6  00A9               	movwf	___awtoft@c+1
  3747  03A7  0820               	movf	?___wmul,w
  3748  03A8  00A8               	movwf	___awtoft@c
  3749  03A9  158A  2214  118A   	fcall	___awtoft
  3750  03AC  1283               	bcf	3,5	;RP0=0, select bank0
  3751  03AD  1303               	bcf	3,6	;RP1=0, select bank0
  3752  03AE  0828               	movf	?___awtoft,w
  3753  03AF  00BE               	movwf	___ftdiv@f2
  3754  03B0  0829               	movf	?___awtoft+1,w
  3755  03B1  00BF               	movwf	___ftdiv@f2+1
  3756  03B2  082A               	movf	?___awtoft+2,w
  3757  03B3  00C0               	movwf	___ftdiv@f2+2
  3758  03B4  158A  2749  118A   	fcall	___ftdiv
  3759  03B7  1283               	bcf	3,5	;RP0=0, select bank0
  3760  03B8  1303               	bcf	3,6	;RP1=0, select bank0
  3761  03B9  083E               	movf	?___ftdiv,w
  3762  03BA  1683               	bsf	3,5	;RP0=1, select bank1
  3763  03BB  1303               	bcf	3,6	;RP1=0, select bank1
  3764  03BC  00CD               	movwf	_ADC_PF$960^(0+128)
  3765  03BD  1283               	bcf	3,5	;RP0=0, select bank0
  3766  03BE  1303               	bcf	3,6	;RP1=0, select bank0
  3767  03BF  083F               	movf	?___ftdiv+1,w
  3768  03C0  1683               	bsf	3,5	;RP0=1, select bank1
  3769  03C1  1303               	bcf	3,6	;RP1=0, select bank1
  3770  03C2  00CE               	movwf	(_ADC_PF$960+1)^(0+128)
  3771  03C3  1283               	bcf	3,5	;RP0=0, select bank0
  3772  03C4  1303               	bcf	3,6	;RP1=0, select bank0
  3773  03C5  0840               	movf	?___ftdiv+2,w
  3774  03C6  1683               	bsf	3,5	;RP0=1, select bank1
  3775  03C7  1303               	bcf	3,6	;RP1=0, select bank1
  3776  03C8  00CF               	movwf	(_ADC_PF$960+2)^(0+128)
  3777                           
  3778                           ;adc.c: 128: step *= ((-1*rad_angle)/(2*i*(2*i+1)));
  3779  03C9  084D               	movf	_ADC_PF$960^(0+128),w
  3780  03CA  1283               	bcf	3,5	;RP0=0, select bank0
  3781  03CB  1303               	bcf	3,6	;RP1=0, select bank0
  3782  03CC  00AE               	movwf	___ftmul@f1
  3783  03CD  1683               	bsf	3,5	;RP0=1, select bank1
  3784  03CE  1303               	bcf	3,6	;RP1=0, select bank1
  3785  03CF  084E               	movf	(_ADC_PF$960+1)^(0+128),w
  3786  03D0  1283               	bcf	3,5	;RP0=0, select bank0
  3787  03D1  1303               	bcf	3,6	;RP1=0, select bank0
  3788  03D2  00AF               	movwf	___ftmul@f1+1
  3789  03D3  1683               	bsf	3,5	;RP0=1, select bank1
  3790  03D4  1303               	bcf	3,6	;RP1=0, select bank1
  3791  03D5  084F               	movf	(_ADC_PF$960+2)^(0+128),w
  3792  03D6  1283               	bcf	3,5	;RP0=0, select bank0
  3793  03D7  1303               	bcf	3,6	;RP1=0, select bank0
  3794  03D8  00B0               	movwf	___ftmul@f1+2
  3795  03D9  1683               	bsf	3,5	;RP0=1, select bank1
  3796  03DA  1303               	bcf	3,6	;RP1=0, select bank1
  3797  03DB  0855               	movf	ADC_PF@step^(0+128),w
  3798  03DC  1283               	bcf	3,5	;RP0=0, select bank0
  3799  03DD  1303               	bcf	3,6	;RP1=0, select bank0
  3800  03DE  00B1               	movwf	___ftmul@f2
  3801  03DF  1683               	bsf	3,5	;RP0=1, select bank1
  3802  03E0  1303               	bcf	3,6	;RP1=0, select bank1
  3803  03E1  0856               	movf	(ADC_PF@step+1)^(0+128),w
  3804  03E2  1283               	bcf	3,5	;RP0=0, select bank0
  3805  03E3  1303               	bcf	3,6	;RP1=0, select bank0
  3806  03E4  00B2               	movwf	___ftmul@f2+1
  3807  03E5  1683               	bsf	3,5	;RP0=1, select bank1
  3808  03E6  1303               	bcf	3,6	;RP1=0, select bank1
  3809  03E7  0857               	movf	(ADC_PF@step+2)^(0+128),w
  3810  03E8  1283               	bcf	3,5	;RP0=0, select bank0
  3811  03E9  1303               	bcf	3,6	;RP1=0, select bank0
  3812  03EA  00B3               	movwf	___ftmul@f2+2
  3813  03EB  118A  270F  118A   	fcall	___ftmul
  3814  03EE  1283               	bcf	3,5	;RP0=0, select bank0
  3815  03EF  1303               	bcf	3,6	;RP1=0, select bank0
  3816  03F0  082E               	movf	?___ftmul,w
  3817  03F1  1683               	bsf	3,5	;RP0=1, select bank1
  3818  03F2  1303               	bcf	3,6	;RP1=0, select bank1
  3819  03F3  00D5               	movwf	ADC_PF@step^(0+128)
  3820  03F4  1283               	bcf	3,5	;RP0=0, select bank0
  3821  03F5  1303               	bcf	3,6	;RP1=0, select bank0
  3822  03F6  082F               	movf	?___ftmul+1,w
  3823  03F7  1683               	bsf	3,5	;RP0=1, select bank1
  3824  03F8  1303               	bcf	3,6	;RP1=0, select bank1
  3825  03F9  00D6               	movwf	(ADC_PF@step+1)^(0+128)
  3826  03FA  1283               	bcf	3,5	;RP0=0, select bank0
  3827  03FB  1303               	bcf	3,6	;RP1=0, select bank0
  3828  03FC  0830               	movf	?___ftmul+2,w
  3829  03FD  1683               	bsf	3,5	;RP0=1, select bank1
  3830  03FE  1303               	bcf	3,6	;RP1=0, select bank1
  3831  03FF  00D7               	movwf	(ADC_PF@step+2)^(0+128)
  3832                           
  3833                           ;adc.c: 129: temp += step;
  3834  0400  0855               	movf	ADC_PF@step^(0+128),w
  3835  0401  1283               	bcf	3,5	;RP0=0, select bank0
  3836  0402  1303               	bcf	3,6	;RP1=0, select bank0
  3837  0403  00AC               	movwf	___ftadd@f1
  3838  0404  1683               	bsf	3,5	;RP0=1, select bank1
  3839  0405  1303               	bcf	3,6	;RP1=0, select bank1
  3840  0406  0856               	movf	(ADC_PF@step+1)^(0+128),w
  3841  0407  1283               	bcf	3,5	;RP0=0, select bank0
  3842  0408  1303               	bcf	3,6	;RP1=0, select bank0
  3843  0409  00AD               	movwf	___ftadd@f1+1
  3844  040A  1683               	bsf	3,5	;RP0=1, select bank1
  3845  040B  1303               	bcf	3,6	;RP1=0, select bank1
  3846  040C  0857               	movf	(ADC_PF@step+2)^(0+128),w
  3847  040D  1283               	bcf	3,5	;RP0=0, select bank0
  3848  040E  1303               	bcf	3,6	;RP1=0, select bank0
  3849  040F  00AE               	movwf	___ftadd@f1+2
  3850  0410  1683               	bsf	3,5	;RP0=1, select bank1
  3851  0411  1303               	bcf	3,6	;RP1=0, select bank1
  3852  0412  0858               	movf	ADC_PF@temp^(0+128),w
  3853  0413  1283               	bcf	3,5	;RP0=0, select bank0
  3854  0414  1303               	bcf	3,6	;RP1=0, select bank0
  3855  0415  00AF               	movwf	___ftadd@f2
  3856  0416  1683               	bsf	3,5	;RP0=1, select bank1
  3857  0417  1303               	bcf	3,6	;RP1=0, select bank1
  3858  0418  0859               	movf	(ADC_PF@temp+1)^(0+128),w
  3859  0419  1283               	bcf	3,5	;RP0=0, select bank0
  3860  041A  1303               	bcf	3,6	;RP1=0, select bank0
  3861  041B  00B0               	movwf	___ftadd@f2+1
  3862  041C  1683               	bsf	3,5	;RP0=1, select bank1
  3863  041D  1303               	bcf	3,6	;RP1=0, select bank1
  3864  041E  085A               	movf	(ADC_PF@temp+2)^(0+128),w
  3865  041F  1283               	bcf	3,5	;RP0=0, select bank0
  3866  0420  1303               	bcf	3,6	;RP1=0, select bank0
  3867  0421  00B1               	movwf	___ftadd@f2+2
  3868  0422  118A  2504  118A   	fcall	___ftadd
  3869  0425  1283               	bcf	3,5	;RP0=0, select bank0
  3870  0426  1303               	bcf	3,6	;RP1=0, select bank0
  3871  0427  082C               	movf	?___ftadd,w
  3872  0428  1683               	bsf	3,5	;RP0=1, select bank1
  3873  0429  1303               	bcf	3,6	;RP1=0, select bank1
  3874  042A  00D8               	movwf	ADC_PF@temp^(0+128)
  3875  042B  1283               	bcf	3,5	;RP0=0, select bank0
  3876  042C  1303               	bcf	3,6	;RP1=0, select bank0
  3877  042D  082D               	movf	?___ftadd+1,w
  3878  042E  1683               	bsf	3,5	;RP0=1, select bank1
  3879  042F  1303               	bcf	3,6	;RP1=0, select bank1
  3880  0430  00D9               	movwf	(ADC_PF@temp+1)^(0+128)
  3881  0431  1283               	bcf	3,5	;RP0=0, select bank0
  3882  0432  1303               	bcf	3,6	;RP1=0, select bank0
  3883  0433  082E               	movf	?___ftadd+2,w
  3884  0434  1683               	bsf	3,5	;RP0=1, select bank1
  3885  0435  1303               	bcf	3,6	;RP1=0, select bank1
  3886  0436  00DA               	movwf	(ADC_PF@temp+2)^(0+128)
  3887  0437  3001               	movlw	1
  3888  0438  1283               	bcf	3,5	;RP0=0, select bank0
  3889  0439  1303               	bcf	3,6	;RP1=0, select bank0
  3890  043A  00DD               	movwf	??_ADC_PF
  3891  043B  085D               	movf	??_ADC_PF,w
  3892  043C  1683               	bsf	3,5	;RP0=1, select bank1
  3893  043D  1303               	bcf	3,6	;RP1=0, select bank1
  3894  043E  07DB               	addwf	ADC_PF@i^(0+128),f
  3895  043F  3006               	movlw	6
  3896  0440  025B               	subwf	ADC_PF@i^(0+128),w
  3897  0441  1C03               	skipc
  3898  0442  2B61               	goto	l2672
  3899  0443                     l2678:	
  3900                           
  3901                           ;adc.c: 132: }
  3902                           ;adc.c: 133: }
  3903                           ;adc.c: 135: ARRAY[index] = (uint16_t)(temp*10000.0);
  3904  0443  0858               	movf	ADC_PF@temp^(0+128),w
  3905  0444  1283               	bcf	3,5	;RP0=0, select bank0
  3906  0445  1303               	bcf	3,6	;RP1=0, select bank0
  3907  0446  00B1               	movwf	___ftmul@f2
  3908  0447  1683               	bsf	3,5	;RP0=1, select bank1
  3909  0448  1303               	bcf	3,6	;RP1=0, select bank1
  3910  0449  0859               	movf	(ADC_PF@temp+1)^(0+128),w
  3911  044A  1283               	bcf	3,5	;RP0=0, select bank0
  3912  044B  1303               	bcf	3,6	;RP1=0, select bank0
  3913  044C  00B2               	movwf	___ftmul@f2+1
  3914  044D  1683               	bsf	3,5	;RP0=1, select bank1
  3915  044E  1303               	bcf	3,6	;RP1=0, select bank1
  3916  044F  085A               	movf	(ADC_PF@temp+2)^(0+128),w
  3917  0450  1283               	bcf	3,5	;RP0=0, select bank0
  3918  0451  1303               	bcf	3,6	;RP1=0, select bank0
  3919  0452  00B3               	movwf	___ftmul@f2+2
  3920  0453  3040               	movlw	64
  3921  0454  00AE               	movwf	___ftmul@f1
  3922  0455  301C               	movlw	28
  3923  0456  00AF               	movwf	___ftmul@f1+1
  3924  0457  3046               	movlw	70
  3925  0458  00B0               	movwf	___ftmul@f1+2
  3926  0459  118A  270F  118A   	fcall	___ftmul
  3927  045C  1283               	bcf	3,5	;RP0=0, select bank0
  3928  045D  1303               	bcf	3,6	;RP1=0, select bank0
  3929  045E  082E               	movf	?___ftmul,w
  3930  045F  00CE               	movwf	___fttol@f1
  3931  0460  082F               	movf	?___ftmul+1,w
  3932  0461  00CF               	movwf	___fttol@f1+1
  3933  0462  0830               	movf	?___ftmul+2,w
  3934  0463  00D0               	movwf	___fttol@f1+2
  3935  0464  158A  24D3  118A   	fcall	___fttol
  3936  0467  1283               	bcf	3,5	;RP0=0, select bank0
  3937  0468  1303               	bcf	3,6	;RP1=0, select bank0
  3938  0469  085C               	movf	ADC_PF@index,w
  3939  046A  00DD               	movwf	??_ADC_PF
  3940  046B  075D               	addwf	??_ADC_PF,w
  3941  046C  1683               	bsf	3,5	;RP0=1, select bank1
  3942  046D  1303               	bcf	3,6	;RP1=0, select bank1
  3943  046E  0752               	addwf	ADC_PF@ARRAY^(0+128),w
  3944  046F  1283               	bcf	3,5	;RP0=0, select bank0
  3945  0470  1303               	bcf	3,6	;RP1=0, select bank0
  3946  0471  00DE               	movwf	??_ADC_PF+1
  3947  0472  085E               	movf	??_ADC_PF+1,w
  3948  0473  0084               	movwf	4
  3949  0474  084E               	movf	?___fttol,w
  3950  0475  1383               	bcf	3,7	;select IRP bank0
  3951  0476  0080               	movwf	0
  3952  0477  0A84               	incf	4,f
  3953  0478  084F               	movf	?___fttol+1,w
  3954  0479  0080               	movwf	0
  3955                           
  3956                           ;adc.c: 136: if(ARRAY[index] >= 10000)
  3957  047A  085C               	movf	ADC_PF@index,w
  3958  047B  00DD               	movwf	??_ADC_PF
  3959  047C  075D               	addwf	??_ADC_PF,w
  3960  047D  1683               	bsf	3,5	;RP0=1, select bank1
  3961  047E  1303               	bcf	3,6	;RP1=0, select bank1
  3962  047F  0752               	addwf	ADC_PF@ARRAY^(0+128),w
  3963  0480  1283               	bcf	3,5	;RP0=0, select bank0
  3964  0481  1303               	bcf	3,6	;RP1=0, select bank0
  3965  0482  00DE               	movwf	??_ADC_PF+1
  3966  0483  085E               	movf	??_ADC_PF+1,w
  3967  0484  0084               	movwf	4
  3968  0485  0800               	movf	0,w
  3969  0486  00DF               	movwf	??_ADC_PF+2
  3970  0487  0A84               	incf	4,f
  3971  0488  0800               	movf	0,w
  3972  0489  00E0               	movwf	??_ADC_PF+3
  3973  048A  3027               	movlw	39
  3974  048B  0260               	subwf	??_ADC_PF+3,w
  3975  048C  3010               	movlw	16
  3976  048D  1903               	skipnz
  3977  048E  025F               	subwf	??_ADC_PF+2,w
  3978  048F  1C03               	skipc
  3979  0490  2CA1               	goto	l2684
  3980                           
  3981                           ;adc.c: 137: ARRAY[index] = 9999;
  3982  0491  085C               	movf	ADC_PF@index,w
  3983  0492  00DD               	movwf	??_ADC_PF
  3984  0493  075D               	addwf	??_ADC_PF,w
  3985  0494  1683               	bsf	3,5	;RP0=1, select bank1
  3986  0495  1303               	bcf	3,6	;RP1=0, select bank1
  3987  0496  0752               	addwf	ADC_PF@ARRAY^(0+128),w
  3988  0497  1283               	bcf	3,5	;RP0=0, select bank0
  3989  0498  1303               	bcf	3,6	;RP1=0, select bank0
  3990  0499  00DE               	movwf	??_ADC_PF+1
  3991  049A  085E               	movf	??_ADC_PF+1,w
  3992  049B  0084               	movwf	4
  3993  049C  300F               	movlw	15
  3994  049D  0080               	movwf	0
  3995  049E  0A84               	incf	4,f
  3996  049F  3027               	movlw	39
  3997  04A0  0080               	movwf	0
  3998  04A1                     l2684:	
  3999                           
  4000                           ;adc.c: 139: temp = (10000.0/(float)freq_clock);
  4001  04A1  1683               	bsf	3,5	;RP0=1, select bank1
  4002  04A2  1303               	bcf	3,6	;RP1=0, select bank1
  4003  04A3  0851               	movf	(ADC_PF@freq_clock+1)^(0+128),w
  4004  04A4  1283               	bcf	3,5	;RP0=0, select bank0
  4005  04A5  1303               	bcf	3,6	;RP1=0, select bank0
  4006  04A6  00A9               	movwf	___lwtoft@c+1
  4007  04A7  1683               	bsf	3,5	;RP0=1, select bank1
  4008  04A8  1303               	bcf	3,6	;RP1=0, select bank1
  4009  04A9  0850               	movf	ADC_PF@freq_clock^(0+128),w
  4010  04AA  1283               	bcf	3,5	;RP0=0, select bank0
  4011  04AB  1303               	bcf	3,6	;RP1=0, select bank0
  4012  04AC  00A8               	movwf	___lwtoft@c
  4013  04AD  158A  2185  118A   	fcall	___lwtoft
  4014  04B0  1283               	bcf	3,5	;RP0=0, select bank0
  4015  04B1  1303               	bcf	3,6	;RP1=0, select bank0
  4016  04B2  0828               	movf	?___lwtoft,w
  4017  04B3  00BE               	movwf	___ftdiv@f2
  4018  04B4  0829               	movf	?___lwtoft+1,w
  4019  04B5  00BF               	movwf	___ftdiv@f2+1
  4020  04B6  082A               	movf	?___lwtoft+2,w
  4021  04B7  00C0               	movwf	___ftdiv@f2+2
  4022  04B8  3040               	movlw	64
  4023  04B9  00C1               	movwf	___ftdiv@f1
  4024  04BA  301C               	movlw	28
  4025  04BB  00C2               	movwf	___ftdiv@f1+1
  4026  04BC  3046               	movlw	70
  4027  04BD  00C3               	movwf	___ftdiv@f1+2
  4028  04BE  158A  2749  118A   	fcall	___ftdiv
  4029  04C1  1283               	bcf	3,5	;RP0=0, select bank0
  4030  04C2  1303               	bcf	3,6	;RP1=0, select bank0
  4031  04C3  083E               	movf	?___ftdiv,w
  4032  04C4  1683               	bsf	3,5	;RP0=1, select bank1
  4033  04C5  1303               	bcf	3,6	;RP1=0, select bank1
  4034  04C6  00D8               	movwf	ADC_PF@temp^(0+128)
  4035  04C7  1283               	bcf	3,5	;RP0=0, select bank0
  4036  04C8  1303               	bcf	3,6	;RP1=0, select bank0
  4037  04C9  083F               	movf	?___ftdiv+1,w
  4038  04CA  1683               	bsf	3,5	;RP0=1, select bank1
  4039  04CB  1303               	bcf	3,6	;RP1=0, select bank1
  4040  04CC  00D9               	movwf	(ADC_PF@temp+1)^(0+128)
  4041  04CD  1283               	bcf	3,5	;RP0=0, select bank0
  4042  04CE  1303               	bcf	3,6	;RP1=0, select bank0
  4043  04CF  0840               	movf	?___ftdiv+2,w
  4044  04D0  1683               	bsf	3,5	;RP0=1, select bank1
  4045  04D1  1303               	bcf	3,6	;RP1=0, select bank1
  4046  04D2  00DA               	movwf	(ADC_PF@temp+2)^(0+128)
  4047                           
  4048                           ;adc.c: 140: FREQUENCY_ARRAY[index] = (uint16_t)(temp*5000.0);
  4049  04D3  0858               	movf	ADC_PF@temp^(0+128),w
  4050  04D4  1283               	bcf	3,5	;RP0=0, select bank0
  4051  04D5  1303               	bcf	3,6	;RP1=0, select bank0
  4052  04D6  00B1               	movwf	___ftmul@f2
  4053  04D7  1683               	bsf	3,5	;RP0=1, select bank1
  4054  04D8  1303               	bcf	3,6	;RP1=0, select bank1
  4055  04D9  0859               	movf	(ADC_PF@temp+1)^(0+128),w
  4056  04DA  1283               	bcf	3,5	;RP0=0, select bank0
  4057  04DB  1303               	bcf	3,6	;RP1=0, select bank0
  4058  04DC  00B2               	movwf	___ftmul@f2+1
  4059  04DD  1683               	bsf	3,5	;RP0=1, select bank1
  4060  04DE  1303               	bcf	3,6	;RP1=0, select bank1
  4061  04DF  085A               	movf	(ADC_PF@temp+2)^(0+128),w
  4062  04E0  1283               	bcf	3,5	;RP0=0, select bank0
  4063  04E1  1303               	bcf	3,6	;RP1=0, select bank0
  4064  04E2  00B3               	movwf	___ftmul@f2+2
  4065  04E3  3040               	movlw	64
  4066  04E4  00AE               	movwf	___ftmul@f1
  4067  04E5  309C               	movlw	156
  4068  04E6  00AF               	movwf	___ftmul@f1+1
  4069  04E7  3045               	movlw	69
  4070  04E8  00B0               	movwf	___ftmul@f1+2
  4071  04E9  118A  270F  118A   	fcall	___ftmul
  4072  04EC  1283               	bcf	3,5	;RP0=0, select bank0
  4073  04ED  1303               	bcf	3,6	;RP1=0, select bank0
  4074  04EE  082E               	movf	?___ftmul,w
  4075  04EF  00CE               	movwf	___fttol@f1
  4076  04F0  082F               	movf	?___ftmul+1,w
  4077  04F1  00CF               	movwf	___fttol@f1+1
  4078  04F2  0830               	movf	?___ftmul+2,w
  4079  04F3  00D0               	movwf	___fttol@f1+2
  4080  04F4  158A  24D3         	fcall	___fttol
  4081  04F6  1283               	bcf	3,5	;RP0=0, select bank0
  4082  04F7  1303               	bcf	3,6	;RP1=0, select bank0
  4083  04F8  085C               	movf	ADC_PF@index,w
  4084  04F9  00DD               	movwf	??_ADC_PF
  4085  04FA  075D               	addwf	??_ADC_PF,w
  4086  04FB  3EAB               	addlw	(low (_FREQUENCY_ARRAY| 0))& (0+255)
  4087  04FC  0084               	movwf	4
  4088  04FD  084E               	movf	?___fttol,w
  4089  04FE  1383               	bcf	3,7	;select IRP bank1
  4090  04FF  0080               	movwf	0
  4091  0500  0A84               	incf	4,f
  4092  0501  084F               	movf	?___fttol+1,w
  4093  0502  0080               	movwf	0
  4094  0503  0008               	return
  4095  0504                     __end_of_ADC_PF:	
  4096                           
  4097                           	psect	text12
  4098  09F1                     __ptext12:	
  4099 ;; *************** function ___wmul *****************
  4100 ;; Defined at:
  4101 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  4102 ;; Parameters:    Size  Location     Type
  4103 ;;  multiplier      2    0[BANK0 ] unsigned int 
  4104 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  4105 ;; Auto vars:     Size  Location     Type
  4106 ;;  product         2    4[BANK0 ] unsigned int 
  4107 ;; Return value:  Size  Location     Type
  4108 ;;                  2    0[BANK0 ] unsigned int 
  4109 ;; Registers used:
  4110 ;;		wreg, status,2, status,0
  4111 ;; Tracked objects:
  4112 ;;		On entry : 0/0
  4113 ;;		On exit  : 0/0
  4114 ;;		Unchanged: 0/0
  4115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4116 ;;      Params:         0       4       0       0
  4117 ;;      Locals:         0       2       0       0
  4118 ;;      Temps:          0       0       0       0
  4119 ;;      Totals:         0       6       0       0
  4120 ;;Total ram usage:        6 bytes
  4121 ;; Hardware stack levels used:    1
  4122 ;; Hardware stack levels required when called:    2
  4123 ;; This function calls:
  4124 ;;		Nothing
  4125 ;; This function is called by:
  4126 ;;		_ADC_PF
  4127 ;;		_Send
  4128 ;; This function uses a non-reentrant model
  4129 ;;
  4130                           
  4131                           
  4132                           ;psect for function ___wmul
  4133  09F1                     ___wmul:	
  4134                           
  4135                           ;incstack = 0
  4136                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4137  09F1  1283               	bcf	3,5	;RP0=0, select bank0
  4138  09F2  1303               	bcf	3,6	;RP1=0, select bank0
  4139  09F3  01A4               	clrf	___wmul@product
  4140  09F4  01A5               	clrf	___wmul@product+1
  4141  09F5                     l2318:	
  4142  09F5  1C20               	btfss	___wmul@multiplier,0
  4143  09F6  29FD               	goto	l376
  4144  09F7  0822               	movf	___wmul@multiplicand,w
  4145  09F8  07A4               	addwf	___wmul@product,f
  4146  09F9  1803               	skipnc
  4147  09FA  0AA5               	incf	___wmul@product+1,f
  4148  09FB  0823               	movf	___wmul@multiplicand+1,w
  4149  09FC  07A5               	addwf	___wmul@product+1,f
  4150  09FD                     l376:	
  4151  09FD  3001               	movlw	1
  4152  09FE                     u2925:	
  4153  09FE  1003               	clrc
  4154  09FF  0DA2               	rlf	___wmul@multiplicand,f
  4155  0A00  0DA3               	rlf	___wmul@multiplicand+1,f
  4156  0A01  3EFF               	addlw	-1
  4157  0A02  1D03               	skipz
  4158  0A03  29FE               	goto	u2925
  4159  0A04  3001               	movlw	1
  4160  0A05                     u2935:	
  4161  0A05  1003               	clrc
  4162  0A06  0CA1               	rrf	___wmul@multiplier+1,f
  4163  0A07  0CA0               	rrf	___wmul@multiplier,f
  4164  0A08  3EFF               	addlw	-1
  4165  0A09  1D03               	skipz
  4166  0A0A  2A05               	goto	u2935
  4167  0A0B  0820               	movf	___wmul@multiplier,w
  4168  0A0C  0421               	iorwf	___wmul@multiplier+1,w
  4169  0A0D  1D03               	btfss	3,2
  4170  0A0E  29F5               	goto	l2318
  4171  0A0F  0825               	movf	___wmul@product+1,w
  4172  0A10  00A1               	movwf	?___wmul+1
  4173  0A11  0824               	movf	___wmul@product,w
  4174  0A12  00A0               	movwf	?___wmul
  4175  0A13  0008               	return
  4176  0A14                     __end_of___wmul:	
  4177                           
  4178                           	psect	text13
  4179  0985                     __ptext13:	
  4180 ;; *************** function ___lwtoft *****************
  4181 ;; Defined at:
  4182 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwtoft.c"
  4183 ;; Parameters:    Size  Location     Type
  4184 ;;  c               2    8[BANK0 ] unsigned int 
  4185 ;; Auto vars:     Size  Location     Type
  4186 ;;		None
  4187 ;; Return value:  Size  Location     Type
  4188 ;;                  3    8[BANK0 ] float 
  4189 ;; Registers used:
  4190 ;;		wreg, status,2, status,0, pclath, cstack
  4191 ;; Tracked objects:
  4192 ;;		On entry : 0/0
  4193 ;;		On exit  : 0/0
  4194 ;;		Unchanged: 0/0
  4195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4196 ;;      Params:         0       3       0       0
  4197 ;;      Locals:         0       0       0       0
  4198 ;;      Temps:          0       1       0       0
  4199 ;;      Totals:         0       4       0       0
  4200 ;;Total ram usage:        4 bytes
  4201 ;; Hardware stack levels used:    1
  4202 ;; Hardware stack levels required when called:    3
  4203 ;; This function calls:
  4204 ;;		___ftpack
  4205 ;; This function is called by:
  4206 ;;		_ADC_RMS
  4207 ;;		_ADC_PF
  4208 ;;		_AVG
  4209 ;;		_Send
  4210 ;; This function uses a non-reentrant model
  4211 ;;
  4212                           
  4213                           
  4214                           ;psect for function ___lwtoft
  4215  0985                     ___lwtoft:	
  4216                           
  4217                           ;incstack = 0
  4218                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  4219  0985  1283               	bcf	3,5	;RP0=0, select bank0
  4220  0986  1303               	bcf	3,6	;RP1=0, select bank0
  4221  0987  0828               	movf	___lwtoft@c,w
  4222  0988  00A0               	movwf	___ftpack@arg
  4223  0989  0829               	movf	___lwtoft@c+1,w
  4224  098A  00A1               	movwf	___ftpack@arg+1
  4225  098B  01A2               	clrf	___ftpack@arg+2
  4226  098C  308E               	movlw	142
  4227  098D  00AB               	movwf	??___lwtoft
  4228  098E  082B               	movf	??___lwtoft,w
  4229  098F  00A3               	movwf	___ftpack@exp
  4230  0990  01A4               	clrf	___ftpack@sign
  4231  0991  158A  23EA         	fcall	___ftpack
  4232  0993  1283               	bcf	3,5	;RP0=0, select bank0
  4233  0994  1303               	bcf	3,6	;RP1=0, select bank0
  4234  0995  0820               	movf	?___ftpack,w
  4235  0996  00A8               	movwf	?___lwtoft
  4236  0997  0821               	movf	?___ftpack+1,w
  4237  0998  00A9               	movwf	?___lwtoft+1
  4238  0999  0822               	movf	?___ftpack+2,w
  4239  099A  00AA               	movwf	?___lwtoft+2
  4240  099B  0008               	return
  4241  099C                     __end_of___lwtoft:	
  4242                           
  4243                           	psect	text14
  4244  0B21                     __ptext14:	
  4245 ;; *************** function ___lwdiv *****************
  4246 ;; Defined at:
  4247 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  4248 ;; Parameters:    Size  Location     Type
  4249 ;;  divisor         2    0[BANK0 ] unsigned int 
  4250 ;;  dividend        2    2[BANK0 ] unsigned int 
  4251 ;; Auto vars:     Size  Location     Type
  4252 ;;  quotient        2    6[BANK0 ] unsigned int 
  4253 ;;  counter         1    5[BANK0 ] unsigned char 
  4254 ;; Return value:  Size  Location     Type
  4255 ;;                  2    0[BANK0 ] unsigned int 
  4256 ;; Registers used:
  4257 ;;		wreg, status,2, status,0
  4258 ;; Tracked objects:
  4259 ;;		On entry : 0/0
  4260 ;;		On exit  : 0/0
  4261 ;;		Unchanged: 0/0
  4262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4263 ;;      Params:         0       4       0       0
  4264 ;;      Locals:         0       3       0       0
  4265 ;;      Temps:          0       1       0       0
  4266 ;;      Totals:         0       8       0       0
  4267 ;;Total ram usage:        8 bytes
  4268 ;; Hardware stack levels used:    1
  4269 ;; Hardware stack levels required when called:    2
  4270 ;; This function calls:
  4271 ;;		Nothing
  4272 ;; This function is called by:
  4273 ;;		_ADC_PF
  4274 ;;		_floatTostr
  4275 ;; This function uses a non-reentrant model
  4276 ;;
  4277                           
  4278                           
  4279                           ;psect for function ___lwdiv
  4280  0B21                     ___lwdiv:	
  4281                           
  4282                           ;incstack = 0
  4283                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4284  0B21  1283               	bcf	3,5	;RP0=0, select bank0
  4285  0B22  1303               	bcf	3,6	;RP1=0, select bank0
  4286  0B23  01A6               	clrf	___lwdiv@quotient
  4287  0B24  01A7               	clrf	___lwdiv@quotient+1
  4288  0B25  0820               	movf	___lwdiv@divisor,w
  4289  0B26  0421               	iorwf	___lwdiv@divisor+1,w
  4290  0B27  1903               	btfsc	3,2
  4291  0B28  2B5A               	goto	l2254
  4292  0B29  01A5               	clrf	___lwdiv@counter
  4293  0B2A  0AA5               	incf	___lwdiv@counter,f
  4294  0B2B                     l2242:	
  4295  0B2B  1BA1               	btfsc	___lwdiv@divisor+1,7
  4296  0B2C  2B39               	goto	l2244
  4297  0B2D  3001               	movlw	1
  4298  0B2E                     u2755:	
  4299  0B2E  1003               	clrc
  4300  0B2F  0DA0               	rlf	___lwdiv@divisor,f
  4301  0B30  0DA1               	rlf	___lwdiv@divisor+1,f
  4302  0B31  3EFF               	addlw	-1
  4303  0B32  1D03               	skipz
  4304  0B33  2B2E               	goto	u2755
  4305  0B34  3001               	movlw	1
  4306  0B35  00A4               	movwf	??___lwdiv
  4307  0B36  0824               	movf	??___lwdiv,w
  4308  0B37  07A5               	addwf	___lwdiv@counter,f
  4309  0B38  2B2B               	goto	l2242
  4310  0B39                     l2244:	
  4311  0B39  3001               	movlw	1
  4312  0B3A                     u2775:	
  4313  0B3A  1003               	clrc
  4314  0B3B  0DA6               	rlf	___lwdiv@quotient,f
  4315  0B3C  0DA7               	rlf	___lwdiv@quotient+1,f
  4316  0B3D  3EFF               	addlw	-1
  4317  0B3E  1D03               	skipz
  4318  0B3F  2B3A               	goto	u2775
  4319  0B40  0821               	movf	___lwdiv@divisor+1,w
  4320  0B41  0223               	subwf	___lwdiv@dividend+1,w
  4321  0B42  1D03               	skipz
  4322  0B43  2B46               	goto	u2785
  4323  0B44  0820               	movf	___lwdiv@divisor,w
  4324  0B45  0222               	subwf	___lwdiv@dividend,w
  4325  0B46                     u2785:	
  4326  0B46  1C03               	skipc
  4327  0B47  2B4F               	goto	l2250
  4328  0B48  0820               	movf	___lwdiv@divisor,w
  4329  0B49  02A2               	subwf	___lwdiv@dividend,f
  4330  0B4A  0821               	movf	___lwdiv@divisor+1,w
  4331  0B4B  1C03               	skipc
  4332  0B4C  03A3               	decf	___lwdiv@dividend+1,f
  4333  0B4D  02A3               	subwf	___lwdiv@dividend+1,f
  4334  0B4E  1426               	bsf	___lwdiv@quotient,0
  4335  0B4F                     l2250:	
  4336  0B4F  3001               	movlw	1
  4337  0B50                     u2795:	
  4338  0B50  1003               	clrc
  4339  0B51  0CA1               	rrf	___lwdiv@divisor+1,f
  4340  0B52  0CA0               	rrf	___lwdiv@divisor,f
  4341  0B53  3EFF               	addlw	-1
  4342  0B54  1D03               	skipz
  4343  0B55  2B50               	goto	u2795
  4344  0B56  3001               	movlw	1
  4345  0B57  02A5               	subwf	___lwdiv@counter,f
  4346  0B58  1D03               	btfss	3,2
  4347  0B59  2B39               	goto	l2244
  4348  0B5A                     l2254:	
  4349  0B5A  0827               	movf	___lwdiv@quotient+1,w
  4350  0B5B  00A1               	movwf	?___lwdiv+1
  4351  0B5C  0826               	movf	___lwdiv@quotient,w
  4352  0B5D  00A0               	movwf	?___lwdiv
  4353  0B5E  0008               	return
  4354  0B5F                     __end_of___lwdiv:	
  4355                           
  4356                           	psect	text15
  4357  0CD3                     __ptext15:	
  4358 ;; *************** function ___fttol *****************
  4359 ;; Defined at:
  4360 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
  4361 ;; Parameters:    Size  Location     Type
  4362 ;;  f1              3   46[BANK0 ] float 
  4363 ;; Auto vars:     Size  Location     Type
  4364 ;;  lval            4   55[BANK0 ] unsigned long 
  4365 ;;  exp1            1   59[BANK0 ] unsigned char 
  4366 ;;  sign1           1   54[BANK0 ] unsigned char 
  4367 ;; Return value:  Size  Location     Type
  4368 ;;                  4   46[BANK0 ] long 
  4369 ;; Registers used:
  4370 ;;		wreg, status,2, status,0
  4371 ;; Tracked objects:
  4372 ;;		On entry : 0/0
  4373 ;;		On exit  : 0/0
  4374 ;;		Unchanged: 0/0
  4375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4376 ;;      Params:         0       4       0       0
  4377 ;;      Locals:         0       6       0       0
  4378 ;;      Temps:          0       4       0       0
  4379 ;;      Totals:         0      14       0       0
  4380 ;;Total ram usage:       14 bytes
  4381 ;; Hardware stack levels used:    1
  4382 ;; Hardware stack levels required when called:    2
  4383 ;; This function calls:
  4384 ;;		Nothing
  4385 ;; This function is called by:
  4386 ;;		_ADC_RMS
  4387 ;;		_ADC_PF
  4388 ;;		_AVG
  4389 ;;		_Send
  4390 ;; This function uses a non-reentrant model
  4391 ;;
  4392                           
  4393                           
  4394                           ;psect for function ___fttol
  4395  0CD3                     ___fttol:	
  4396                           
  4397                           ;incstack = 0
  4398                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  4399  0CD3  1283               	bcf	3,5	;RP0=0, select bank0
  4400  0CD4  1303               	bcf	3,6	;RP1=0, select bank0
  4401  0CD5  084E               	movf	___fttol@f1,w
  4402  0CD6  00D2               	movwf	??___fttol
  4403  0CD7  084F               	movf	___fttol@f1+1,w
  4404  0CD8  00D3               	movwf	??___fttol+1
  4405  0CD9  0850               	movf	___fttol@f1+2,w
  4406  0CDA  00D4               	movwf	??___fttol+2
  4407  0CDB  1003               	clrc
  4408  0CDC  0D53               	rlf	??___fttol+1,w
  4409  0CDD  0D54               	rlf	??___fttol+2,w
  4410  0CDE  00D5               	movwf	??___fttol+3
  4411  0CDF  0855               	movf	??___fttol+3,w
  4412  0CE0  00DB               	movwf	___fttol@exp1
  4413  0CE1  085B               	movf	___fttol@exp1,w
  4414  0CE2  1D03               	btfss	3,2
  4415  0CE3  2CED               	goto	l2510
  4416  0CE4  3000               	movlw	0
  4417  0CE5  00D1               	movwf	?___fttol+3
  4418  0CE6  3000               	movlw	0
  4419  0CE7  00D0               	movwf	?___fttol+2
  4420  0CE8  3000               	movlw	0
  4421  0CE9  00CF               	movwf	?___fttol+1
  4422  0CEA  3000               	movlw	0
  4423  0CEB  00CE               	movwf	?___fttol
  4424  0CEC  0008               	return
  4425  0CED                     l2510:	
  4426  0CED  084E               	movf	___fttol@f1,w
  4427  0CEE  00D2               	movwf	??___fttol
  4428  0CEF  084F               	movf	___fttol@f1+1,w
  4429  0CF0  00D3               	movwf	??___fttol+1
  4430  0CF1  0850               	movf	___fttol@f1+2,w
  4431  0CF2  00D4               	movwf	??___fttol+2
  4432  0CF3  3017               	movlw	23
  4433  0CF4                     u3435:	
  4434  0CF4  1003               	clrc
  4435  0CF5  0CD4               	rrf	??___fttol+2,f
  4436  0CF6  0CD3               	rrf	??___fttol+1,f
  4437  0CF7  0CD2               	rrf	??___fttol,f
  4438  0CF8  3EFF               	addlw	-1
  4439  0CF9  1D03               	skipz
  4440  0CFA  2CF4               	goto	u3435
  4441  0CFB  0852               	movf	??___fttol,w
  4442  0CFC  00D5               	movwf	??___fttol+3
  4443  0CFD  0855               	movf	??___fttol+3,w
  4444  0CFE  00D6               	movwf	___fttol@sign1
  4445  0CFF  17CF               	bsf	___fttol@f1+1,7
  4446  0D00  30FF               	movlw	255
  4447  0D01  05CE               	andwf	___fttol@f1,f
  4448  0D02  30FF               	movlw	255
  4449  0D03  05CF               	andwf	___fttol@f1+1,f
  4450  0D04  3000               	movlw	0
  4451  0D05  05D0               	andwf	___fttol@f1+2,f
  4452  0D06  084E               	movf	___fttol@f1,w
  4453  0D07  00D7               	movwf	___fttol@lval
  4454  0D08  084F               	movf	___fttol@f1+1,w
  4455  0D09  00D8               	movwf	___fttol@lval+1
  4456  0D0A  0850               	movf	___fttol@f1+2,w
  4457  0D0B  00D9               	movwf	___fttol@lval+2
  4458  0D0C  01DA               	clrf	___fttol@lval+3
  4459  0D0D  308E               	movlw	142
  4460  0D0E  02DB               	subwf	___fttol@exp1,f
  4461  0D0F  1FDB               	btfss	___fttol@exp1,7
  4462  0D10  2D2F               	goto	l2530
  4463  0D11  085B               	movf	___fttol@exp1,w
  4464  0D12  3A80               	xorlw	128
  4465  0D13  3E8F               	addlw	143
  4466  0D14  1803               	skipnc
  4467  0D15  2D1F               	goto	l2528
  4468  0D16  3000               	movlw	0
  4469  0D17  00D1               	movwf	?___fttol+3
  4470  0D18  3000               	movlw	0
  4471  0D19  00D0               	movwf	?___fttol+2
  4472  0D1A  3000               	movlw	0
  4473  0D1B  00CF               	movwf	?___fttol+1
  4474  0D1C  3000               	movlw	0
  4475  0D1D  00CE               	movwf	?___fttol
  4476  0D1E  0008               	return
  4477  0D1F                     l2528:	
  4478  0D1F  3001               	movlw	1
  4479  0D20                     u3465:	
  4480  0D20  1003               	clrc
  4481  0D21  0CDA               	rrf	___fttol@lval+3,f
  4482  0D22  0CD9               	rrf	___fttol@lval+2,f
  4483  0D23  0CD8               	rrf	___fttol@lval+1,f
  4484  0D24  0CD7               	rrf	___fttol@lval,f
  4485  0D25  3EFF               	addlw	-1
  4486  0D26  1D03               	skipz
  4487  0D27  2D20               	goto	u3465
  4488  0D28  3001               	movlw	1
  4489  0D29  00D2               	movwf	??___fttol
  4490  0D2A  0852               	movf	??___fttol,w
  4491  0D2B  07DB               	addwf	___fttol@exp1,f
  4492  0D2C  1903               	btfsc	3,2
  4493  0D2D  2D4A               	goto	l2538
  4494  0D2E  2D1F               	goto	l2528
  4495  0D2F                     l2530:	
  4496  0D2F  3018               	movlw	24
  4497  0D30  025B               	subwf	___fttol@exp1,w
  4498  0D31  1C03               	skipc
  4499  0D32  2D47               	goto	l628
  4500  0D33  3000               	movlw	0
  4501  0D34  00D1               	movwf	?___fttol+3
  4502  0D35  3000               	movlw	0
  4503  0D36  00D0               	movwf	?___fttol+2
  4504  0D37  3000               	movlw	0
  4505  0D38  00CF               	movwf	?___fttol+1
  4506  0D39  3000               	movlw	0
  4507  0D3A  00CE               	movwf	?___fttol
  4508  0D3B  0008               	return
  4509  0D3C                     l2536:	
  4510  0D3C  3001               	movlw	1
  4511  0D3D  00D2               	movwf	??___fttol
  4512  0D3E                     u3495:	
  4513  0D3E  1003               	clrc
  4514  0D3F  0DD7               	rlf	___fttol@lval,f
  4515  0D40  0DD8               	rlf	___fttol@lval+1,f
  4516  0D41  0DD9               	rlf	___fttol@lval+2,f
  4517  0D42  0DDA               	rlf	___fttol@lval+3,f
  4518  0D43  0BD2               	decfsz	??___fttol,f
  4519  0D44  2D3E               	goto	u3495
  4520  0D45  3001               	movlw	1
  4521  0D46  02DB               	subwf	___fttol@exp1,f
  4522  0D47                     l628:	
  4523  0D47  085B               	movf	___fttol@exp1,w
  4524  0D48  1D03               	btfss	3,2
  4525  0D49  2D3C               	goto	l2536
  4526  0D4A                     l2538:	
  4527  0D4A  0856               	movf	___fttol@sign1,w
  4528  0D4B  1903               	btfsc	3,2
  4529  0D4C  2D58               	goto	l2542
  4530  0D4D  09D7               	comf	___fttol@lval,f
  4531  0D4E  09D8               	comf	___fttol@lval+1,f
  4532  0D4F  09D9               	comf	___fttol@lval+2,f
  4533  0D50  09DA               	comf	___fttol@lval+3,f
  4534  0D51  0AD7               	incf	___fttol@lval,f
  4535  0D52  1903               	skipnz
  4536  0D53  0AD8               	incf	___fttol@lval+1,f
  4537  0D54  1903               	skipnz
  4538  0D55  0AD9               	incf	___fttol@lval+2,f
  4539  0D56  1903               	skipnz
  4540  0D57  0ADA               	incf	___fttol@lval+3,f
  4541  0D58                     l2542:	
  4542  0D58  085A               	movf	___fttol@lval+3,w
  4543  0D59  00D1               	movwf	?___fttol+3
  4544  0D5A  0859               	movf	___fttol@lval+2,w
  4545  0D5B  00D0               	movwf	?___fttol+2
  4546  0D5C  0858               	movf	___fttol@lval+1,w
  4547  0D5D  00CF               	movwf	?___fttol+1
  4548  0D5E  0857               	movf	___fttol@lval,w
  4549  0D5F  00CE               	movwf	?___fttol
  4550  0D60  0008               	return
  4551  0D61                     __end_of___fttol:	
  4552                           
  4553                           	psect	text16
  4554  070F                     __ptext16:	
  4555 ;; *************** function ___ftmul *****************
  4556 ;; Defined at:
  4557 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  4558 ;; Parameters:    Size  Location     Type
  4559 ;;  f1              3   14[BANK0 ] float 
  4560 ;;  f2              3   17[BANK0 ] float 
  4561 ;; Auto vars:     Size  Location     Type
  4562 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  4563 ;;  sign            1   29[BANK0 ] unsigned char 
  4564 ;;  cntr            1   28[BANK0 ] unsigned char 
  4565 ;;  exp             1   24[BANK0 ] unsigned char 
  4566 ;; Return value:  Size  Location     Type
  4567 ;;                  3   14[BANK0 ] float 
  4568 ;; Registers used:
  4569 ;;		wreg, status,2, status,0, pclath, cstack
  4570 ;; Tracked objects:
  4571 ;;		On entry : 0/0
  4572 ;;		On exit  : 0/0
  4573 ;;		Unchanged: 0/0
  4574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4575 ;;      Params:         0       6       0       0
  4576 ;;      Locals:         0       6       0       0
  4577 ;;      Temps:          0       4       0       0
  4578 ;;      Totals:         0      16       0       0
  4579 ;;Total ram usage:       16 bytes
  4580 ;; Hardware stack levels used:    1
  4581 ;; Hardware stack levels required when called:    3
  4582 ;; This function calls:
  4583 ;;		___ftpack
  4584 ;; This function is called by:
  4585 ;;		_ADC_RMS
  4586 ;;		_ADC_PF
  4587 ;; This function uses a non-reentrant model
  4588 ;;
  4589                           
  4590                           
  4591                           ;psect for function ___ftmul
  4592  070F                     ___ftmul:	
  4593                           
  4594                           ;incstack = 0
  4595                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  4596  070F  1283               	bcf	3,5	;RP0=0, select bank0
  4597  0710  1303               	bcf	3,6	;RP1=0, select bank0
  4598  0711  082E               	movf	___ftmul@f1,w
  4599  0712  00B4               	movwf	??___ftmul
  4600  0713  082F               	movf	___ftmul@f1+1,w
  4601  0714  00B5               	movwf	??___ftmul+1
  4602  0715  0830               	movf	___ftmul@f1+2,w
  4603  0716  00B6               	movwf	??___ftmul+2
  4604  0717  1003               	clrc
  4605  0718  0D35               	rlf	??___ftmul+1,w
  4606  0719  0D36               	rlf	??___ftmul+2,w
  4607  071A  00B7               	movwf	??___ftmul+3
  4608  071B  0837               	movf	??___ftmul+3,w
  4609  071C  00B8               	movwf	___ftmul@exp
  4610  071D  0838               	movf	___ftmul@exp,w
  4611  071E  1D03               	btfss	3,2
  4612  071F  2F27               	goto	l2460
  4613  0720  3000               	movlw	0
  4614  0721  00AE               	movwf	?___ftmul
  4615  0722  3000               	movlw	0
  4616  0723  00AF               	movwf	?___ftmul+1
  4617  0724  3000               	movlw	0
  4618  0725  00B0               	movwf	?___ftmul+2
  4619  0726  0008               	return
  4620  0727                     l2460:	
  4621  0727  0831               	movf	___ftmul@f2,w
  4622  0728  00B4               	movwf	??___ftmul
  4623  0729  0832               	movf	___ftmul@f2+1,w
  4624  072A  00B5               	movwf	??___ftmul+1
  4625  072B  0833               	movf	___ftmul@f2+2,w
  4626  072C  00B6               	movwf	??___ftmul+2
  4627  072D  1003               	clrc
  4628  072E  0D35               	rlf	??___ftmul+1,w
  4629  072F  0D36               	rlf	??___ftmul+2,w
  4630  0730  00B7               	movwf	??___ftmul+3
  4631  0731  0837               	movf	??___ftmul+3,w
  4632  0732  00BD               	movwf	___ftmul@sign
  4633  0733  083D               	movf	___ftmul@sign,w
  4634  0734  1D03               	btfss	3,2
  4635  0735  2F3D               	goto	l2466
  4636  0736  3000               	movlw	0
  4637  0737  00AE               	movwf	?___ftmul
  4638  0738  3000               	movlw	0
  4639  0739  00AF               	movwf	?___ftmul+1
  4640  073A  3000               	movlw	0
  4641  073B  00B0               	movwf	?___ftmul+2
  4642  073C  0008               	return
  4643  073D                     l2466:	
  4644  073D  083D               	movf	___ftmul@sign,w
  4645  073E  3E7B               	addlw	123
  4646  073F  00B4               	movwf	??___ftmul
  4647  0740  0834               	movf	??___ftmul,w
  4648  0741  07B8               	addwf	___ftmul@exp,f
  4649  0742  082E               	movf	___ftmul@f1,w
  4650  0743  00B4               	movwf	??___ftmul
  4651  0744  082F               	movf	___ftmul@f1+1,w
  4652  0745  00B5               	movwf	??___ftmul+1
  4653  0746  0830               	movf	___ftmul@f1+2,w
  4654  0747  00B6               	movwf	??___ftmul+2
  4655  0748  3010               	movlw	16
  4656  0749                     u3305:	
  4657  0749  1003               	clrc
  4658  074A  0CB6               	rrf	??___ftmul+2,f
  4659  074B  0CB5               	rrf	??___ftmul+1,f
  4660  074C  0CB4               	rrf	??___ftmul,f
  4661  074D  3EFF               	addlw	-1
  4662  074E  1D03               	skipz
  4663  074F  2F49               	goto	u3305
  4664  0750  0834               	movf	??___ftmul,w
  4665  0751  00B7               	movwf	??___ftmul+3
  4666  0752  0837               	movf	??___ftmul+3,w
  4667  0753  00BD               	movwf	___ftmul@sign
  4668  0754  0831               	movf	___ftmul@f2,w
  4669  0755  00B4               	movwf	??___ftmul
  4670  0756  0832               	movf	___ftmul@f2+1,w
  4671  0757  00B5               	movwf	??___ftmul+1
  4672  0758  0833               	movf	___ftmul@f2+2,w
  4673  0759  00B6               	movwf	??___ftmul+2
  4674  075A  3010               	movlw	16
  4675  075B                     u3315:	
  4676  075B  1003               	clrc
  4677  075C  0CB6               	rrf	??___ftmul+2,f
  4678  075D  0CB5               	rrf	??___ftmul+1,f
  4679  075E  0CB4               	rrf	??___ftmul,f
  4680  075F  3EFF               	addlw	-1
  4681  0760  1D03               	skipz
  4682  0761  2F5B               	goto	u3315
  4683  0762  0834               	movf	??___ftmul,w
  4684  0763  00B7               	movwf	??___ftmul+3
  4685  0764  0837               	movf	??___ftmul+3,w
  4686  0765  06BD               	xorwf	___ftmul@sign,f
  4687  0766  3080               	movlw	128
  4688  0767  00B4               	movwf	??___ftmul
  4689  0768  0834               	movf	??___ftmul,w
  4690  0769  05BD               	andwf	___ftmul@sign,f
  4691  076A  17AF               	bsf	___ftmul@f1+1,7
  4692  076B  17B2               	bsf	___ftmul@f2+1,7
  4693  076C  30FF               	movlw	255
  4694  076D  05B1               	andwf	___ftmul@f2,f
  4695  076E  30FF               	movlw	255
  4696  076F  05B2               	andwf	___ftmul@f2+1,f
  4697  0770  3000               	movlw	0
  4698  0771  05B3               	andwf	___ftmul@f2+2,f
  4699  0772  3000               	movlw	0
  4700  0773  00B9               	movwf	___ftmul@f3_as_product
  4701  0774  3000               	movlw	0
  4702  0775  00BA               	movwf	___ftmul@f3_as_product+1
  4703  0776  3000               	movlw	0
  4704  0777  00BB               	movwf	___ftmul@f3_as_product+2
  4705  0778  3007               	movlw	7
  4706  0779  00B4               	movwf	??___ftmul
  4707  077A  0834               	movf	??___ftmul,w
  4708  077B  00BC               	movwf	___ftmul@cntr
  4709  077C                     l2478:	
  4710  077C  1C2E               	btfss	___ftmul@f1,0
  4711  077D  2F8C               	goto	l2482
  4712  077E  0831               	movf	___ftmul@f2,w
  4713  077F  07B9               	addwf	___ftmul@f3_as_product,f
  4714  0780  0832               	movf	___ftmul@f2+1,w
  4715  0781  1103               	clrz
  4716  0782  1803               	skipnc
  4717  0783  0A32               	incf	___ftmul@f2+1,w
  4718  0784  1D03               	btfss	3,2
  4719  0785  07BA               	addwf	___ftmul@f3_as_product+1,f
  4720  0786  0833               	movf	___ftmul@f2+2,w
  4721  0787  1103               	clrz
  4722  0788  1803               	skipnc
  4723  0789  0A33               	incf	___ftmul@f2+2,w
  4724  078A  1D03               	btfss	3,2
  4725  078B  07BB               	addwf	___ftmul@f3_as_product+2,f
  4726  078C                     l2482:	
  4727  078C  3001               	movlw	1
  4728  078D                     u3345:	
  4729  078D  1003               	clrc
  4730  078E  0CB0               	rrf	___ftmul@f1+2,f
  4731  078F  0CAF               	rrf	___ftmul@f1+1,f
  4732  0790  0CAE               	rrf	___ftmul@f1,f
  4733  0791  3EFF               	addlw	-1
  4734  0792  1D03               	skipz
  4735  0793  2F8D               	goto	u3345
  4736  0794  3001               	movlw	1
  4737  0795                     u3355:	
  4738  0795  1003               	clrc
  4739  0796  0DB1               	rlf	___ftmul@f2,f
  4740  0797  0DB2               	rlf	___ftmul@f2+1,f
  4741  0798  0DB3               	rlf	___ftmul@f2+2,f
  4742  0799  3EFF               	addlw	-1
  4743  079A  1D03               	skipz
  4744  079B  2F95               	goto	u3355
  4745  079C  3001               	movlw	1
  4746  079D  02BC               	subwf	___ftmul@cntr,f
  4747  079E  1D03               	btfss	3,2
  4748  079F  2F7C               	goto	l2478
  4749  07A0  3009               	movlw	9
  4750  07A1  00B4               	movwf	??___ftmul
  4751  07A2  0834               	movf	??___ftmul,w
  4752  07A3  00BC               	movwf	___ftmul@cntr
  4753  07A4                     l2490:	
  4754  07A4  1C2E               	btfss	___ftmul@f1,0
  4755  07A5  2FB4               	goto	l2494
  4756  07A6  0831               	movf	___ftmul@f2,w
  4757  07A7  07B9               	addwf	___ftmul@f3_as_product,f
  4758  07A8  0832               	movf	___ftmul@f2+1,w
  4759  07A9  1103               	clrz
  4760  07AA  1803               	skipnc
  4761  07AB  0A32               	incf	___ftmul@f2+1,w
  4762  07AC  1D03               	btfss	3,2
  4763  07AD  07BA               	addwf	___ftmul@f3_as_product+1,f
  4764  07AE  0833               	movf	___ftmul@f2+2,w
  4765  07AF  1103               	clrz
  4766  07B0  1803               	skipnc
  4767  07B1  0A33               	incf	___ftmul@f2+2,w
  4768  07B2  1D03               	btfss	3,2
  4769  07B3  07BB               	addwf	___ftmul@f3_as_product+2,f
  4770  07B4                     l2494:	
  4771  07B4  3001               	movlw	1
  4772  07B5                     u3395:	
  4773  07B5  1003               	clrc
  4774  07B6  0CB0               	rrf	___ftmul@f1+2,f
  4775  07B7  0CAF               	rrf	___ftmul@f1+1,f
  4776  07B8  0CAE               	rrf	___ftmul@f1,f
  4777  07B9  3EFF               	addlw	-1
  4778  07BA  1D03               	skipz
  4779  07BB  2FB5               	goto	u3395
  4780  07BC  3001               	movlw	1
  4781  07BD                     u3405:	
  4782  07BD  1003               	clrc
  4783  07BE  0CBB               	rrf	___ftmul@f3_as_product+2,f
  4784  07BF  0CBA               	rrf	___ftmul@f3_as_product+1,f
  4785  07C0  0CB9               	rrf	___ftmul@f3_as_product,f
  4786  07C1  3EFF               	addlw	-1
  4787  07C2  1D03               	skipz
  4788  07C3  2FBD               	goto	u3405
  4789  07C4  3001               	movlw	1
  4790  07C5  02BC               	subwf	___ftmul@cntr,f
  4791  07C6  1D03               	btfss	3,2
  4792  07C7  2FA4               	goto	l2490
  4793  07C8  0839               	movf	___ftmul@f3_as_product,w
  4794  07C9  00A0               	movwf	___ftpack@arg
  4795  07CA  083A               	movf	___ftmul@f3_as_product+1,w
  4796  07CB  00A1               	movwf	___ftpack@arg+1
  4797  07CC  083B               	movf	___ftmul@f3_as_product+2,w
  4798  07CD  00A2               	movwf	___ftpack@arg+2
  4799  07CE  0838               	movf	___ftmul@exp,w
  4800  07CF  00B4               	movwf	??___ftmul
  4801  07D0  0834               	movf	??___ftmul,w
  4802  07D1  00A3               	movwf	___ftpack@exp
  4803  07D2  083D               	movf	___ftmul@sign,w
  4804  07D3  00B5               	movwf	??___ftmul+1
  4805  07D4  0835               	movf	??___ftmul+1,w
  4806  07D5  00A4               	movwf	___ftpack@sign
  4807  07D6  158A  23EA         	fcall	___ftpack
  4808  07D8  1283               	bcf	3,5	;RP0=0, select bank0
  4809  07D9  1303               	bcf	3,6	;RP1=0, select bank0
  4810  07DA  0820               	movf	?___ftpack,w
  4811  07DB  00AE               	movwf	?___ftmul
  4812  07DC  0821               	movf	?___ftpack+1,w
  4813  07DD  00AF               	movwf	?___ftmul+1
  4814  07DE  0822               	movf	?___ftpack+2,w
  4815  07DF  00B0               	movwf	?___ftmul+2
  4816  07E0  0008               	return
  4817  07E1                     __end_of___ftmul:	
  4818                           
  4819                           	psect	text17
  4820  0F49                     __ptext17:	
  4821 ;; *************** function ___ftdiv *****************
  4822 ;; Defined at:
  4823 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdiv.c"
  4824 ;; Parameters:    Size  Location     Type
  4825 ;;  f2              3   30[BANK0 ] float 
  4826 ;;  f1              3   33[BANK0 ] float 
  4827 ;; Auto vars:     Size  Location     Type
  4828 ;;  f3              3   41[BANK0 ] float 
  4829 ;;  sign            1   45[BANK0 ] unsigned char 
  4830 ;;  exp             1   44[BANK0 ] unsigned char 
  4831 ;;  cntr            1   40[BANK0 ] unsigned char 
  4832 ;; Return value:  Size  Location     Type
  4833 ;;                  3   30[BANK0 ] float 
  4834 ;; Registers used:
  4835 ;;		wreg, status,2, status,0, pclath, cstack
  4836 ;; Tracked objects:
  4837 ;;		On entry : 0/0
  4838 ;;		On exit  : 0/0
  4839 ;;		Unchanged: 0/0
  4840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4841 ;;      Params:         0       6       0       0
  4842 ;;      Locals:         0       6       0       0
  4843 ;;      Temps:          0       4       0       0
  4844 ;;      Totals:         0      16       0       0
  4845 ;;Total ram usage:       16 bytes
  4846 ;; Hardware stack levels used:    1
  4847 ;; Hardware stack levels required when called:    3
  4848 ;; This function calls:
  4849 ;;		___ftpack
  4850 ;; This function is called by:
  4851 ;;		_ADC_RMS
  4852 ;;		_ADC_PF
  4853 ;;		_AVG
  4854 ;;		_Send
  4855 ;; This function uses a non-reentrant model
  4856 ;;
  4857                           
  4858                           
  4859                           ;psect for function ___ftdiv
  4860  0F49                     ___ftdiv:	
  4861                           
  4862                           ;incstack = 0
  4863                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  4864  0F49  1283               	bcf	3,5	;RP0=0, select bank0
  4865  0F4A  1303               	bcf	3,6	;RP1=0, select bank0
  4866  0F4B  0841               	movf	___ftdiv@f1,w
  4867  0F4C  00C4               	movwf	??___ftdiv
  4868  0F4D  0842               	movf	___ftdiv@f1+1,w
  4869  0F4E  00C5               	movwf	??___ftdiv+1
  4870  0F4F  0843               	movf	___ftdiv@f1+2,w
  4871  0F50  00C6               	movwf	??___ftdiv+2
  4872  0F51  1003               	clrc
  4873  0F52  0D45               	rlf	??___ftdiv+1,w
  4874  0F53  0D46               	rlf	??___ftdiv+2,w
  4875  0F54  00C7               	movwf	??___ftdiv+3
  4876  0F55  0847               	movf	??___ftdiv+3,w
  4877  0F56  00CC               	movwf	___ftdiv@exp
  4878  0F57  084C               	movf	___ftdiv@exp,w
  4879  0F58  1D03               	btfss	3,2
  4880  0F59  2F61               	goto	l2418
  4881  0F5A  3000               	movlw	0
  4882  0F5B  00BE               	movwf	?___ftdiv
  4883  0F5C  3000               	movlw	0
  4884  0F5D  00BF               	movwf	?___ftdiv+1
  4885  0F5E  3000               	movlw	0
  4886  0F5F  00C0               	movwf	?___ftdiv+2
  4887  0F60  0008               	return
  4888  0F61                     l2418:	
  4889  0F61  083E               	movf	___ftdiv@f2,w
  4890  0F62  00C4               	movwf	??___ftdiv
  4891  0F63  083F               	movf	___ftdiv@f2+1,w
  4892  0F64  00C5               	movwf	??___ftdiv+1
  4893  0F65  0840               	movf	___ftdiv@f2+2,w
  4894  0F66  00C6               	movwf	??___ftdiv+2
  4895  0F67  1003               	clrc
  4896  0F68  0D45               	rlf	??___ftdiv+1,w
  4897  0F69  0D46               	rlf	??___ftdiv+2,w
  4898  0F6A  00C7               	movwf	??___ftdiv+3
  4899  0F6B  0847               	movf	??___ftdiv+3,w
  4900  0F6C  00CD               	movwf	___ftdiv@sign
  4901  0F6D  084D               	movf	___ftdiv@sign,w
  4902  0F6E  1D03               	btfss	3,2
  4903  0F6F  2F77               	goto	l2424
  4904  0F70  3000               	movlw	0
  4905  0F71  00BE               	movwf	?___ftdiv
  4906  0F72  3000               	movlw	0
  4907  0F73  00BF               	movwf	?___ftdiv+1
  4908  0F74  3000               	movlw	0
  4909  0F75  00C0               	movwf	?___ftdiv+2
  4910  0F76  0008               	return
  4911  0F77                     l2424:	
  4912  0F77  3000               	movlw	0
  4913  0F78  00C9               	movwf	___ftdiv@f3
  4914  0F79  3000               	movlw	0
  4915  0F7A  00CA               	movwf	___ftdiv@f3+1
  4916  0F7B  3000               	movlw	0
  4917  0F7C  00CB               	movwf	___ftdiv@f3+2
  4918  0F7D  3089               	movlw	137
  4919  0F7E  074D               	addwf	___ftdiv@sign,w
  4920  0F7F  00C4               	movwf	??___ftdiv
  4921  0F80  0844               	movf	??___ftdiv,w
  4922  0F81  02CC               	subwf	___ftdiv@exp,f
  4923  0F82  0841               	movf	___ftdiv@f1,w
  4924  0F83  00C4               	movwf	??___ftdiv
  4925  0F84  0842               	movf	___ftdiv@f1+1,w
  4926  0F85  00C5               	movwf	??___ftdiv+1
  4927  0F86  0843               	movf	___ftdiv@f1+2,w
  4928  0F87  00C6               	movwf	??___ftdiv+2
  4929  0F88  3010               	movlw	16
  4930  0F89                     u3225:	
  4931  0F89  1003               	clrc
  4932  0F8A  0CC6               	rrf	??___ftdiv+2,f
  4933  0F8B  0CC5               	rrf	??___ftdiv+1,f
  4934  0F8C  0CC4               	rrf	??___ftdiv,f
  4935  0F8D  3EFF               	addlw	-1
  4936  0F8E  1D03               	skipz
  4937  0F8F  2F89               	goto	u3225
  4938  0F90  0844               	movf	??___ftdiv,w
  4939  0F91  00C7               	movwf	??___ftdiv+3
  4940  0F92  0847               	movf	??___ftdiv+3,w
  4941  0F93  00CD               	movwf	___ftdiv@sign
  4942  0F94  083E               	movf	___ftdiv@f2,w
  4943  0F95  00C4               	movwf	??___ftdiv
  4944  0F96  083F               	movf	___ftdiv@f2+1,w
  4945  0F97  00C5               	movwf	??___ftdiv+1
  4946  0F98  0840               	movf	___ftdiv@f2+2,w
  4947  0F99  00C6               	movwf	??___ftdiv+2
  4948  0F9A  3010               	movlw	16
  4949  0F9B                     u3235:	
  4950  0F9B  1003               	clrc
  4951  0F9C  0CC6               	rrf	??___ftdiv+2,f
  4952  0F9D  0CC5               	rrf	??___ftdiv+1,f
  4953  0F9E  0CC4               	rrf	??___ftdiv,f
  4954  0F9F  3EFF               	addlw	-1
  4955  0FA0  1D03               	skipz
  4956  0FA1  2F9B               	goto	u3235
  4957  0FA2  0844               	movf	??___ftdiv,w
  4958  0FA3  00C7               	movwf	??___ftdiv+3
  4959  0FA4  0847               	movf	??___ftdiv+3,w
  4960  0FA5  06CD               	xorwf	___ftdiv@sign,f
  4961  0FA6  3080               	movlw	128
  4962  0FA7  00C4               	movwf	??___ftdiv
  4963  0FA8  0844               	movf	??___ftdiv,w
  4964  0FA9  05CD               	andwf	___ftdiv@sign,f
  4965  0FAA  17C2               	bsf	___ftdiv@f1+1,7
  4966  0FAB  30FF               	movlw	255
  4967  0FAC  05C1               	andwf	___ftdiv@f1,f
  4968  0FAD  30FF               	movlw	255
  4969  0FAE  05C2               	andwf	___ftdiv@f1+1,f
  4970  0FAF  3000               	movlw	0
  4971  0FB0  05C3               	andwf	___ftdiv@f1+2,f
  4972  0FB1  17BF               	bsf	___ftdiv@f2+1,7
  4973  0FB2  30FF               	movlw	255
  4974  0FB3  05BE               	andwf	___ftdiv@f2,f
  4975  0FB4  30FF               	movlw	255
  4976  0FB5  05BF               	andwf	___ftdiv@f2+1,f
  4977  0FB6  3000               	movlw	0
  4978  0FB7  05C0               	andwf	___ftdiv@f2+2,f
  4979  0FB8  3018               	movlw	24
  4980  0FB9  00C4               	movwf	??___ftdiv
  4981  0FBA  0844               	movf	??___ftdiv,w
  4982  0FBB  00C8               	movwf	___ftdiv@cntr
  4983  0FBC                     l2438:	
  4984  0FBC  3001               	movlw	1
  4985  0FBD                     u3245:	
  4986  0FBD  1003               	clrc
  4987  0FBE  0DC9               	rlf	___ftdiv@f3,f
  4988  0FBF  0DCA               	rlf	___ftdiv@f3+1,f
  4989  0FC0  0DCB               	rlf	___ftdiv@f3+2,f
  4990  0FC1  3EFF               	addlw	-1
  4991  0FC2  1D03               	skipz
  4992  0FC3  2FBD               	goto	u3245
  4993  0FC4  0840               	movf	___ftdiv@f2+2,w
  4994  0FC5  0243               	subwf	___ftdiv@f1+2,w
  4995  0FC6  1D03               	skipz
  4996  0FC7  2FCE               	goto	u3255
  4997  0FC8  083F               	movf	___ftdiv@f2+1,w
  4998  0FC9  0242               	subwf	___ftdiv@f1+1,w
  4999  0FCA  1D03               	skipz
  5000  0FCB  2FCE               	goto	u3255
  5001  0FCC  083E               	movf	___ftdiv@f2,w
  5002  0FCD  0241               	subwf	___ftdiv@f1,w
  5003  0FCE                     u3255:	
  5004  0FCE  1C03               	skipc
  5005  0FCF  2FDB               	goto	l2446
  5006  0FD0  083E               	movf	___ftdiv@f2,w
  5007  0FD1  02C1               	subwf	___ftdiv@f1,f
  5008  0FD2  083F               	movf	___ftdiv@f2+1,w
  5009  0FD3  1C03               	skipc
  5010  0FD4  0F3F               	incfsz	___ftdiv@f2+1,w
  5011  0FD5  02C2               	subwf	___ftdiv@f1+1,f
  5012  0FD6  0840               	movf	___ftdiv@f2+2,w
  5013  0FD7  1C03               	skipc
  5014  0FD8  0A40               	incf	___ftdiv@f2+2,w
  5015  0FD9  02C3               	subwf	___ftdiv@f1+2,f
  5016  0FDA  1449               	bsf	___ftdiv@f3,0
  5017  0FDB                     l2446:	
  5018  0FDB  3001               	movlw	1
  5019  0FDC                     u3265:	
  5020  0FDC  1003               	clrc
  5021  0FDD  0DC1               	rlf	___ftdiv@f1,f
  5022  0FDE  0DC2               	rlf	___ftdiv@f1+1,f
  5023  0FDF  0DC3               	rlf	___ftdiv@f1+2,f
  5024  0FE0  3EFF               	addlw	-1
  5025  0FE1  1D03               	skipz
  5026  0FE2  2FDC               	goto	u3265
  5027  0FE3  3001               	movlw	1
  5028  0FE4  02C8               	subwf	___ftdiv@cntr,f
  5029  0FE5  1D03               	btfss	3,2
  5030  0FE6  2FBC               	goto	l2438
  5031  0FE7  0849               	movf	___ftdiv@f3,w
  5032  0FE8  00A0               	movwf	___ftpack@arg
  5033  0FE9  084A               	movf	___ftdiv@f3+1,w
  5034  0FEA  00A1               	movwf	___ftpack@arg+1
  5035  0FEB  084B               	movf	___ftdiv@f3+2,w
  5036  0FEC  00A2               	movwf	___ftpack@arg+2
  5037  0FED  084C               	movf	___ftdiv@exp,w
  5038  0FEE  00C4               	movwf	??___ftdiv
  5039  0FEF  0844               	movf	??___ftdiv,w
  5040  0FF0  00A3               	movwf	___ftpack@exp
  5041  0FF1  084D               	movf	___ftdiv@sign,w
  5042  0FF2  00C5               	movwf	??___ftdiv+1
  5043  0FF3  0845               	movf	??___ftdiv+1,w
  5044  0FF4  00A4               	movwf	___ftpack@sign
  5045  0FF5  158A  23EA         	fcall	___ftpack
  5046  0FF7  1283               	bcf	3,5	;RP0=0, select bank0
  5047  0FF8  1303               	bcf	3,6	;RP1=0, select bank0
  5048  0FF9  0820               	movf	?___ftpack,w
  5049  0FFA  00BE               	movwf	?___ftdiv
  5050  0FFB  0821               	movf	?___ftpack+1,w
  5051  0FFC  00BF               	movwf	?___ftdiv+1
  5052  0FFD  0822               	movf	?___ftpack+2,w
  5053  0FFE  00C0               	movwf	?___ftdiv+2
  5054  0FFF  0008               	return
  5055  1000                     __end_of___ftdiv:	
  5056                           
  5057                           	psect	text18
  5058  0504                     __ptext18:	
  5059 ;; *************** function ___ftadd *****************
  5060 ;; Defined at:
  5061 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftadd.c"
  5062 ;; Parameters:    Size  Location     Type
  5063 ;;  f1              3   12[BANK0 ] float 
  5064 ;;  f2              3   15[BANK0 ] float 
  5065 ;; Auto vars:     Size  Location     Type
  5066 ;;  exp1            1   24[BANK0 ] unsigned char 
  5067 ;;  exp2            1   23[BANK0 ] unsigned char 
  5068 ;;  sign            1   22[BANK0 ] unsigned char 
  5069 ;; Return value:  Size  Location     Type
  5070 ;;                  3   12[BANK0 ] float 
  5071 ;; Registers used:
  5072 ;;		wreg, status,2, status,0, pclath, cstack
  5073 ;; Tracked objects:
  5074 ;;		On entry : 0/0
  5075 ;;		On exit  : 0/0
  5076 ;;		Unchanged: 0/0
  5077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5078 ;;      Params:         0       6       0       0
  5079 ;;      Locals:         0       3       0       0
  5080 ;;      Temps:          0       4       0       0
  5081 ;;      Totals:         0      13       0       0
  5082 ;;Total ram usage:       13 bytes
  5083 ;; Hardware stack levels used:    1
  5084 ;; Hardware stack levels required when called:    3
  5085 ;; This function calls:
  5086 ;;		___ftpack
  5087 ;; This function is called by:
  5088 ;;		_ADC_PF
  5089 ;;		_AVG
  5090 ;; This function uses a non-reentrant model
  5091 ;;
  5092                           
  5093                           
  5094                           ;psect for function ___ftadd
  5095  0504                     ___ftadd:	
  5096                           
  5097                           ;incstack = 0
  5098                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  5099  0504  1283               	bcf	3,5	;RP0=0, select bank0
  5100  0505  1303               	bcf	3,6	;RP1=0, select bank0
  5101  0506  082C               	movf	___ftadd@f1,w
  5102  0507  00B2               	movwf	??___ftadd
  5103  0508  082D               	movf	___ftadd@f1+1,w
  5104  0509  00B3               	movwf	??___ftadd+1
  5105  050A  082E               	movf	___ftadd@f1+2,w
  5106  050B  00B4               	movwf	??___ftadd+2
  5107  050C  1003               	clrc
  5108  050D  0D33               	rlf	??___ftadd+1,w
  5109  050E  0D34               	rlf	??___ftadd+2,w
  5110  050F  00B5               	movwf	??___ftadd+3
  5111  0510  0835               	movf	??___ftadd+3,w
  5112  0511  00B8               	movwf	___ftadd@exp1
  5113  0512  082F               	movf	___ftadd@f2,w
  5114  0513  00B2               	movwf	??___ftadd
  5115  0514  0830               	movf	___ftadd@f2+1,w
  5116  0515  00B3               	movwf	??___ftadd+1
  5117  0516  0831               	movf	___ftadd@f2+2,w
  5118  0517  00B4               	movwf	??___ftadd+2
  5119  0518  1003               	clrc
  5120  0519  0D33               	rlf	??___ftadd+1,w
  5121  051A  0D34               	rlf	??___ftadd+2,w
  5122  051B  00B5               	movwf	??___ftadd+3
  5123  051C  0835               	movf	??___ftadd+3,w
  5124  051D  00B7               	movwf	___ftadd@exp2
  5125  051E  0838               	movf	___ftadd@exp1,w
  5126  051F  1903               	btfsc	3,2
  5127  0520  2D2D               	goto	l2348
  5128  0521  0837               	movf	___ftadd@exp2,w
  5129  0522  0238               	subwf	___ftadd@exp1,w
  5130  0523  1803               	skipnc
  5131  0524  2D34               	goto	l2352
  5132  0525  0338               	decf	___ftadd@exp1,w
  5133  0526  3AFF               	xorlw	255
  5134  0527  0737               	addwf	___ftadd@exp2,w
  5135  0528  00B2               	movwf	??___ftadd
  5136  0529  3019               	movlw	25
  5137  052A  0232               	subwf	??___ftadd,w
  5138  052B  1C03               	skipc
  5139  052C  2D34               	goto	l2352
  5140  052D                     l2348:	
  5141  052D  082F               	movf	___ftadd@f2,w
  5142  052E  00AC               	movwf	?___ftadd
  5143  052F  0830               	movf	___ftadd@f2+1,w
  5144  0530  00AD               	movwf	?___ftadd+1
  5145  0531  0831               	movf	___ftadd@f2+2,w
  5146  0532  00AE               	movwf	?___ftadd+2
  5147  0533  0008               	return
  5148  0534                     l2352:	
  5149  0534  0837               	movf	___ftadd@exp2,w
  5150  0535  1903               	btfsc	3,2
  5151  0536  0008               	return
  5152  0537  0838               	movf	___ftadd@exp1,w
  5153  0538  0237               	subwf	___ftadd@exp2,w
  5154  0539  1803               	skipnc
  5155  053A  2D43               	goto	l2358
  5156  053B  0337               	decf	___ftadd@exp2,w
  5157  053C  3AFF               	xorlw	255
  5158  053D  0738               	addwf	___ftadd@exp1,w
  5159  053E  00B2               	movwf	??___ftadd
  5160  053F  3019               	movlw	25
  5161  0540  0232               	subwf	??___ftadd,w
  5162  0541  1803               	btfsc	3,0
  5163  0542  0008               	return
  5164  0543                     l2358:	
  5165  0543  3006               	movlw	6
  5166  0544  00B2               	movwf	??___ftadd
  5167  0545  0832               	movf	??___ftadd,w
  5168  0546  00B6               	movwf	___ftadd@sign
  5169  0547  1BAE               	btfsc	___ftadd@f1+2,7
  5170  0548  17B6               	bsf	___ftadd@sign,7
  5171  0549  1BB1               	btfsc	___ftadd@f2+2,7
  5172  054A  1736               	bsf	___ftadd@sign,6
  5173  054B  17AD               	bsf	___ftadd@f1+1,7
  5174  054C  30FF               	movlw	255
  5175  054D  05AC               	andwf	___ftadd@f1,f
  5176  054E  30FF               	movlw	255
  5177  054F  05AD               	andwf	___ftadd@f1+1,f
  5178  0550  3000               	movlw	0
  5179  0551  05AE               	andwf	___ftadd@f1+2,f
  5180  0552  17B0               	bsf	___ftadd@f2+1,7
  5181  0553  30FF               	movlw	255
  5182  0554  05AF               	andwf	___ftadd@f2,f
  5183  0555  30FF               	movlw	255
  5184  0556  05B0               	andwf	___ftadd@f2+1,f
  5185  0557  3000               	movlw	0
  5186  0558  05B1               	andwf	___ftadd@f2+2,f
  5187  0559  0837               	movf	___ftadd@exp2,w
  5188  055A  0238               	subwf	___ftadd@exp1,w
  5189  055B  1803               	skipnc
  5190  055C  2D83               	goto	l2380
  5191  055D                     l2370:	
  5192  055D  3001               	movlw	1
  5193  055E                     u3055:	
  5194  055E  1003               	clrc
  5195  055F  0DAF               	rlf	___ftadd@f2,f
  5196  0560  0DB0               	rlf	___ftadd@f2+1,f
  5197  0561  0DB1               	rlf	___ftadd@f2+2,f
  5198  0562  3EFF               	addlw	-1
  5199  0563  1D03               	skipz
  5200  0564  2D5E               	goto	u3055
  5201  0565  3001               	movlw	1
  5202  0566  02B7               	subwf	___ftadd@exp2,f
  5203  0567  0837               	movf	___ftadd@exp2,w
  5204  0568  0638               	xorwf	___ftadd@exp1,w
  5205  0569  1903               	skipnz
  5206  056A  2D7E               	goto	l2378
  5207  056B  3001               	movlw	1
  5208  056C  02B6               	subwf	___ftadd@sign,f
  5209  056D  0836               	movf	___ftadd@sign,w
  5210  056E  3907               	andlw	7
  5211  056F  1903               	btfsc	3,2
  5212  0570  2D7E               	goto	l2378
  5213  0571  2D5D               	goto	l2370
  5214  0572                     l2376:	
  5215  0572  3001               	movlw	1
  5216  0573                     u3085:	
  5217  0573  1003               	clrc
  5218  0574  0CAE               	rrf	___ftadd@f1+2,f
  5219  0575  0CAD               	rrf	___ftadd@f1+1,f
  5220  0576  0CAC               	rrf	___ftadd@f1,f
  5221  0577  3EFF               	addlw	-1
  5222  0578  1D03               	skipz
  5223  0579  2D73               	goto	u3085
  5224  057A  3001               	movlw	1
  5225  057B  00B2               	movwf	??___ftadd
  5226  057C  0832               	movf	??___ftadd,w
  5227  057D  07B8               	addwf	___ftadd@exp1,f
  5228  057E                     l2378:	
  5229  057E  0838               	movf	___ftadd@exp1,w
  5230  057F  0637               	xorwf	___ftadd@exp2,w
  5231  0580  1903               	btfsc	3,2
  5232  0581  2DAC               	goto	l568
  5233  0582  2D72               	goto	l2376
  5234  0583                     l2380:	
  5235  0583  0838               	movf	___ftadd@exp1,w
  5236  0584  0237               	subwf	___ftadd@exp2,w
  5237  0585  1803               	skipnc
  5238  0586  2DAC               	goto	l568
  5239  0587                     l2382:	
  5240  0587  3001               	movlw	1
  5241  0588                     u3115:	
  5242  0588  1003               	clrc
  5243  0589  0DAC               	rlf	___ftadd@f1,f
  5244  058A  0DAD               	rlf	___ftadd@f1+1,f
  5245  058B  0DAE               	rlf	___ftadd@f1+2,f
  5246  058C  3EFF               	addlw	-1
  5247  058D  1D03               	skipz
  5248  058E  2D88               	goto	u3115
  5249  058F  3001               	movlw	1
  5250  0590  02B8               	subwf	___ftadd@exp1,f
  5251  0591  0837               	movf	___ftadd@exp2,w
  5252  0592  0638               	xorwf	___ftadd@exp1,w
  5253  0593  1903               	skipnz
  5254  0594  2DA8               	goto	l2390
  5255  0595  3001               	movlw	1
  5256  0596  02B6               	subwf	___ftadd@sign,f
  5257  0597  0836               	movf	___ftadd@sign,w
  5258  0598  3907               	andlw	7
  5259  0599  1903               	btfsc	3,2
  5260  059A  2DA8               	goto	l2390
  5261  059B  2D87               	goto	l2382
  5262  059C                     l2388:	
  5263  059C  3001               	movlw	1
  5264  059D                     u3145:	
  5265  059D  1003               	clrc
  5266  059E  0CB1               	rrf	___ftadd@f2+2,f
  5267  059F  0CB0               	rrf	___ftadd@f2+1,f
  5268  05A0  0CAF               	rrf	___ftadd@f2,f
  5269  05A1  3EFF               	addlw	-1
  5270  05A2  1D03               	skipz
  5271  05A3  2D9D               	goto	u3145
  5272  05A4  3001               	movlw	1
  5273  05A5  00B2               	movwf	??___ftadd
  5274  05A6  0832               	movf	??___ftadd,w
  5275  05A7  07B7               	addwf	___ftadd@exp2,f
  5276  05A8                     l2390:	
  5277  05A8  0838               	movf	___ftadd@exp1,w
  5278  05A9  0637               	xorwf	___ftadd@exp2,w
  5279  05AA  1D03               	skipz
  5280  05AB  2D9C               	goto	l2388
  5281  05AC                     l568:	
  5282  05AC  1FB6               	btfss	___ftadd@sign,7
  5283  05AD  2DBE               	goto	l2394
  5284  05AE  30FF               	movlw	255
  5285  05AF  06AC               	xorwf	___ftadd@f1,f
  5286  05B0  30FF               	movlw	255
  5287  05B1  06AD               	xorwf	___ftadd@f1+1,f
  5288  05B2  30FF               	movlw	255
  5289  05B3  06AE               	xorwf	___ftadd@f1+2,f
  5290  05B4  3001               	movlw	1
  5291  05B5  07AC               	addwf	___ftadd@f1,f
  5292  05B6  3000               	movlw	0
  5293  05B7  1803               	skipnc
  5294  05B8  3001               	movlw	1
  5295  05B9  07AD               	addwf	___ftadd@f1+1,f
  5296  05BA  3000               	movlw	0
  5297  05BB  1803               	skipnc
  5298  05BC  3001               	movlw	1
  5299  05BD  07AE               	addwf	___ftadd@f1+2,f
  5300  05BE                     l2394:	
  5301  05BE  1F36               	btfss	___ftadd@sign,6
  5302  05BF  2DD0               	goto	l2398
  5303  05C0  30FF               	movlw	255
  5304  05C1  06AF               	xorwf	___ftadd@f2,f
  5305  05C2  30FF               	movlw	255
  5306  05C3  06B0               	xorwf	___ftadd@f2+1,f
  5307  05C4  30FF               	movlw	255
  5308  05C5  06B1               	xorwf	___ftadd@f2+2,f
  5309  05C6  3001               	movlw	1
  5310  05C7  07AF               	addwf	___ftadd@f2,f
  5311  05C8  3000               	movlw	0
  5312  05C9  1803               	skipnc
  5313  05CA  3001               	movlw	1
  5314  05CB  07B0               	addwf	___ftadd@f2+1,f
  5315  05CC  3000               	movlw	0
  5316  05CD  1803               	skipnc
  5317  05CE  3001               	movlw	1
  5318  05CF  07B1               	addwf	___ftadd@f2+2,f
  5319  05D0                     l2398:	
  5320  05D0  01B6               	clrf	___ftadd@sign
  5321  05D1  082C               	movf	___ftadd@f1,w
  5322  05D2  07AF               	addwf	___ftadd@f2,f
  5323  05D3  082D               	movf	___ftadd@f1+1,w
  5324  05D4  1103               	clrz
  5325  05D5  1803               	skipnc
  5326  05D6  0A2D               	incf	___ftadd@f1+1,w
  5327  05D7  1D03               	btfss	3,2
  5328  05D8  07B0               	addwf	___ftadd@f2+1,f
  5329  05D9  082E               	movf	___ftadd@f1+2,w
  5330  05DA  1103               	clrz
  5331  05DB  1803               	skipnc
  5332  05DC  0A2E               	incf	___ftadd@f1+2,w
  5333  05DD  1D03               	btfss	3,2
  5334  05DE  07B1               	addwf	___ftadd@f2+2,f
  5335  05DF  1FB1               	btfss	___ftadd@f2+2,7
  5336  05E0  2DF3               	goto	l2408
  5337  05E1  30FF               	movlw	255
  5338  05E2  06AF               	xorwf	___ftadd@f2,f
  5339  05E3  30FF               	movlw	255
  5340  05E4  06B0               	xorwf	___ftadd@f2+1,f
  5341  05E5  30FF               	movlw	255
  5342  05E6  06B1               	xorwf	___ftadd@f2+2,f
  5343  05E7  3001               	movlw	1
  5344  05E8  07AF               	addwf	___ftadd@f2,f
  5345  05E9  3000               	movlw	0
  5346  05EA  1803               	skipnc
  5347  05EB  3001               	movlw	1
  5348  05EC  07B0               	addwf	___ftadd@f2+1,f
  5349  05ED  3000               	movlw	0
  5350  05EE  1803               	skipnc
  5351  05EF  3001               	movlw	1
  5352  05F0  07B1               	addwf	___ftadd@f2+2,f
  5353  05F1  01B6               	clrf	___ftadd@sign
  5354  05F2  0AB6               	incf	___ftadd@sign,f
  5355  05F3                     l2408:	
  5356  05F3  082F               	movf	___ftadd@f2,w
  5357  05F4  00A0               	movwf	___ftpack@arg
  5358  05F5  0830               	movf	___ftadd@f2+1,w
  5359  05F6  00A1               	movwf	___ftpack@arg+1
  5360  05F7  0831               	movf	___ftadd@f2+2,w
  5361  05F8  00A2               	movwf	___ftpack@arg+2
  5362  05F9  0838               	movf	___ftadd@exp1,w
  5363  05FA  00B2               	movwf	??___ftadd
  5364  05FB  0832               	movf	??___ftadd,w
  5365  05FC  00A3               	movwf	___ftpack@exp
  5366  05FD  0836               	movf	___ftadd@sign,w
  5367  05FE  00B3               	movwf	??___ftadd+1
  5368  05FF  0833               	movf	??___ftadd+1,w
  5369  0600  00A4               	movwf	___ftpack@sign
  5370  0601  158A  23EA         	fcall	___ftpack
  5371  0603  1283               	bcf	3,5	;RP0=0, select bank0
  5372  0604  1303               	bcf	3,6	;RP1=0, select bank0
  5373  0605  0820               	movf	?___ftpack,w
  5374  0606  00AC               	movwf	?___ftadd
  5375  0607  0821               	movf	?___ftpack+1,w
  5376  0608  00AD               	movwf	?___ftadd+1
  5377  0609  0822               	movf	?___ftpack+2,w
  5378  060A  00AE               	movwf	?___ftadd+2
  5379  060B  0008               	return
  5380  060C                     __end_of___ftadd:	
  5381                           
  5382                           	psect	text19
  5383  0A14                     __ptext19:	
  5384 ;; *************** function ___awtoft *****************
  5385 ;; Defined at:
  5386 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awtoft.c"
  5387 ;; Parameters:    Size  Location     Type
  5388 ;;  c               2    8[BANK0 ] int 
  5389 ;; Auto vars:     Size  Location     Type
  5390 ;;  sign            1   13[BANK0 ] unsigned char 
  5391 ;; Return value:  Size  Location     Type
  5392 ;;                  3    8[BANK0 ] float 
  5393 ;; Registers used:
  5394 ;;		wreg, status,2, status,0, pclath, cstack
  5395 ;; Tracked objects:
  5396 ;;		On entry : 0/0
  5397 ;;		On exit  : 0/0
  5398 ;;		Unchanged: 0/0
  5399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5400 ;;      Params:         0       3       0       0
  5401 ;;      Locals:         0       1       0       0
  5402 ;;      Temps:          0       2       0       0
  5403 ;;      Totals:         0       6       0       0
  5404 ;;Total ram usage:        6 bytes
  5405 ;; Hardware stack levels used:    1
  5406 ;; Hardware stack levels required when called:    3
  5407 ;; This function calls:
  5408 ;;		___ftpack
  5409 ;; This function is called by:
  5410 ;;		_ADC_PF
  5411 ;; This function uses a non-reentrant model
  5412 ;;
  5413                           
  5414                           
  5415                           ;psect for function ___awtoft
  5416  0A14                     ___awtoft:	
  5417                           
  5418                           ;incstack = 0
  5419                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  5420  0A14  1283               	bcf	3,5	;RP0=0, select bank0
  5421  0A15  1303               	bcf	3,6	;RP1=0, select bank0
  5422  0A16  01AD               	clrf	___awtoft@sign
  5423  0A17  1FA9               	btfss	___awtoft@c+1,7
  5424  0A18  2A20               	goto	l2338
  5425  0A19  09A8               	comf	___awtoft@c,f
  5426  0A1A  09A9               	comf	___awtoft@c+1,f
  5427  0A1B  0AA8               	incf	___awtoft@c,f
  5428  0A1C  1903               	skipnz
  5429  0A1D  0AA9               	incf	___awtoft@c+1,f
  5430  0A1E  01AD               	clrf	___awtoft@sign
  5431  0A1F  0AAD               	incf	___awtoft@sign,f
  5432  0A20                     l2338:	
  5433  0A20  0828               	movf	___awtoft@c,w
  5434  0A21  00A0               	movwf	___ftpack@arg
  5435  0A22  0829               	movf	___awtoft@c+1,w
  5436  0A23  00A1               	movwf	___ftpack@arg+1
  5437  0A24  01A2               	clrf	___ftpack@arg+2
  5438  0A25  308E               	movlw	142
  5439  0A26  00AB               	movwf	??___awtoft
  5440  0A27  082B               	movf	??___awtoft,w
  5441  0A28  00A3               	movwf	___ftpack@exp
  5442  0A29  082D               	movf	___awtoft@sign,w
  5443  0A2A  00AC               	movwf	??___awtoft+1
  5444  0A2B  082C               	movf	??___awtoft+1,w
  5445  0A2C  00A4               	movwf	___ftpack@sign
  5446  0A2D  158A  23EA         	fcall	___ftpack
  5447  0A2F  1283               	bcf	3,5	;RP0=0, select bank0
  5448  0A30  1303               	bcf	3,6	;RP1=0, select bank0
  5449  0A31  0820               	movf	?___ftpack,w
  5450  0A32  00A8               	movwf	?___awtoft
  5451  0A33  0821               	movf	?___ftpack+1,w
  5452  0A34  00A9               	movwf	?___awtoft+1
  5453  0A35  0822               	movf	?___ftpack+2,w
  5454  0A36  00AA               	movwf	?___awtoft+2
  5455  0A37  0008               	return
  5456  0A38                     __end_of___awtoft:	
  5457                           
  5458                           	psect	text20
  5459  0BEA                     __ptext20:	
  5460 ;; *************** function ___ftpack *****************
  5461 ;; Defined at:
  5462 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  5463 ;; Parameters:    Size  Location     Type
  5464 ;;  arg             3    0[BANK0 ] unsigned um
  5465 ;;  exp             1    3[BANK0 ] unsigned char 
  5466 ;;  sign            1    4[BANK0 ] unsigned char 
  5467 ;; Auto vars:     Size  Location     Type
  5468 ;;		None
  5469 ;; Return value:  Size  Location     Type
  5470 ;;                  3    0[BANK0 ] float 
  5471 ;; Registers used:
  5472 ;;		wreg, status,2, status,0
  5473 ;; Tracked objects:
  5474 ;;		On entry : 0/0
  5475 ;;		On exit  : 0/0
  5476 ;;		Unchanged: 0/0
  5477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5478 ;;      Params:         0       5       0       0
  5479 ;;      Locals:         0       0       0       0
  5480 ;;      Temps:          0       3       0       0
  5481 ;;      Totals:         0       8       0       0
  5482 ;;Total ram usage:        8 bytes
  5483 ;; Hardware stack levels used:    1
  5484 ;; Hardware stack levels required when called:    2
  5485 ;; This function calls:
  5486 ;;		Nothing
  5487 ;; This function is called by:
  5488 ;;		___awtoft
  5489 ;;		___ftadd
  5490 ;;		___ftdiv
  5491 ;;		___ftmul
  5492 ;;		___lbtoft
  5493 ;;		___lwtoft
  5494 ;; This function uses a non-reentrant model
  5495 ;;
  5496                           
  5497                           
  5498                           ;psect for function ___ftpack
  5499  0BEA                     ___ftpack:	
  5500                           
  5501                           ;incstack = 0
  5502                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  5503  0BEA  1283               	bcf	3,5	;RP0=0, select bank0
  5504  0BEB  1303               	bcf	3,6	;RP1=0, select bank0
  5505  0BEC  0823               	movf	___ftpack@exp,w
  5506  0BED  1903               	btfsc	3,2
  5507  0BEE  2BF4               	goto	l2204
  5508  0BEF  0822               	movf	___ftpack@arg+2,w
  5509  0BF0  0421               	iorwf	___ftpack@arg+1,w
  5510  0BF1  0420               	iorwf	___ftpack@arg,w
  5511  0BF2  1D03               	skipz
  5512  0BF3  2C07               	goto	l2210
  5513  0BF4                     l2204:	
  5514  0BF4  3000               	movlw	0
  5515  0BF5  00A0               	movwf	?___ftpack
  5516  0BF6  3000               	movlw	0
  5517  0BF7  00A1               	movwf	?___ftpack+1
  5518  0BF8  3000               	movlw	0
  5519  0BF9  00A2               	movwf	?___ftpack+2
  5520  0BFA  0008               	return
  5521  0BFB                     l2208:	
  5522  0BFB  3001               	movlw	1
  5523  0BFC  00A5               	movwf	??___ftpack
  5524  0BFD  0825               	movf	??___ftpack,w
  5525  0BFE  07A3               	addwf	___ftpack@exp,f
  5526  0BFF  3001               	movlw	1
  5527  0C00                     u2645:	
  5528  0C00  1003               	clrc
  5529  0C01  0CA2               	rrf	___ftpack@arg+2,f
  5530  0C02  0CA1               	rrf	___ftpack@arg+1,f
  5531  0C03  0CA0               	rrf	___ftpack@arg,f
  5532  0C04  3EFF               	addlw	-1
  5533  0C05  1D03               	skipz
  5534  0C06  2C00               	goto	u2645
  5535  0C07                     l2210:	
  5536  0C07  30FE               	movlw	254
  5537  0C08  0522               	andwf	___ftpack@arg+2,w
  5538  0C09  1903               	btfsc	3,2
  5539  0C0A  2C22               	goto	l537
  5540  0C0B  2BFB               	goto	l2208
  5541  0C0C                     l2212:	
  5542  0C0C  3001               	movlw	1
  5543  0C0D  00A5               	movwf	??___ftpack
  5544  0C0E  0825               	movf	??___ftpack,w
  5545  0C0F  07A3               	addwf	___ftpack@exp,f
  5546  0C10  3001               	movlw	1
  5547  0C11  07A0               	addwf	___ftpack@arg,f
  5548  0C12  3000               	movlw	0
  5549  0C13  1803               	skipnc
  5550  0C14  3001               	movlw	1
  5551  0C15  07A1               	addwf	___ftpack@arg+1,f
  5552  0C16  3000               	movlw	0
  5553  0C17  1803               	skipnc
  5554  0C18  3001               	movlw	1
  5555  0C19  07A2               	addwf	___ftpack@arg+2,f
  5556  0C1A  3001               	movlw	1
  5557  0C1B                     u2665:	
  5558  0C1B  1003               	clrc
  5559  0C1C  0CA2               	rrf	___ftpack@arg+2,f
  5560  0C1D  0CA1               	rrf	___ftpack@arg+1,f
  5561  0C1E  0CA0               	rrf	___ftpack@arg,f
  5562  0C1F  3EFF               	addlw	-1
  5563  0C20  1D03               	skipz
  5564  0C21  2C1B               	goto	u2665
  5565  0C22                     l537:	
  5566  0C22  30FF               	movlw	255
  5567  0C23  0522               	andwf	___ftpack@arg+2,w
  5568  0C24  1903               	btfsc	3,2
  5569  0C25  2C31               	goto	l2220
  5570  0C26  2C0C               	goto	l2212
  5571  0C27                     l2218:	
  5572  0C27  3001               	movlw	1
  5573  0C28  02A3               	subwf	___ftpack@exp,f
  5574  0C29  3001               	movlw	1
  5575  0C2A                     u2685:	
  5576  0C2A  1003               	clrc
  5577  0C2B  0DA0               	rlf	___ftpack@arg,f
  5578  0C2C  0DA1               	rlf	___ftpack@arg+1,f
  5579  0C2D  0DA2               	rlf	___ftpack@arg+2,f
  5580  0C2E  3EFF               	addlw	-1
  5581  0C2F  1D03               	skipz
  5582  0C30  2C2A               	goto	u2685
  5583  0C31                     l2220:	
  5584  0C31  1BA1               	btfsc	___ftpack@arg+1,7
  5585  0C32  2C37               	goto	l544
  5586  0C33  3002               	movlw	2
  5587  0C34  0223               	subwf	___ftpack@exp,w
  5588  0C35  1803               	skipnc
  5589  0C36  2C27               	goto	l2218
  5590  0C37                     l544:	
  5591  0C37  1823               	btfsc	___ftpack@exp,0
  5592  0C38  2C3F               	goto	l545
  5593  0C39  30FF               	movlw	255
  5594  0C3A  05A0               	andwf	___ftpack@arg,f
  5595  0C3B  307F               	movlw	127
  5596  0C3C  05A1               	andwf	___ftpack@arg+1,f
  5597  0C3D  30FF               	movlw	255
  5598  0C3E  05A2               	andwf	___ftpack@arg+2,f
  5599  0C3F                     l545:	
  5600  0C3F  1003               	clrc
  5601  0C40  0CA3               	rrf	___ftpack@exp,f
  5602  0C41  0823               	movf	___ftpack@exp,w
  5603  0C42  00A5               	movwf	??___ftpack
  5604  0C43  01A6               	clrf	??___ftpack+1
  5605  0C44  01A7               	clrf	??___ftpack+2
  5606  0C45  3010               	movlw	16
  5607  0C46                     u2725:	
  5608  0C46  1003               	clrc
  5609  0C47  0DA5               	rlf	??___ftpack,f
  5610  0C48  0DA6               	rlf	??___ftpack+1,f
  5611  0C49  0DA7               	rlf	??___ftpack+2,f
  5612  0C4A  3EFF               	addlw	-1
  5613  0C4B  1D03               	skipz
  5614  0C4C  2C46               	goto	u2725
  5615  0C4D  0825               	movf	??___ftpack,w
  5616  0C4E  04A0               	iorwf	___ftpack@arg,f
  5617  0C4F  0826               	movf	??___ftpack+1,w
  5618  0C50  04A1               	iorwf	___ftpack@arg+1,f
  5619  0C51  0827               	movf	??___ftpack+2,w
  5620  0C52  04A2               	iorwf	___ftpack@arg+2,f
  5621  0C53  0824               	movf	___ftpack@sign,w
  5622  0C54  1903               	btfsc	3,2
  5623  0C55  0008               	return
  5624  0C56  17A2               	bsf	___ftpack@arg+2,7
  5625  0C57  0008               	return
  5626  0C58                     __end_of___ftpack:	
  5627                           
  5628                           	psect	text21
  5629  0948                     __ptext21:	
  5630 ;; *************** function _Init *****************
  5631 ;; Defined at:
  5632 ;;		line 66 in file "main.c"
  5633 ;; Parameters:    Size  Location     Type
  5634 ;;		None
  5635 ;; Auto vars:     Size  Location     Type
  5636 ;;		None
  5637 ;; Return value:  Size  Location     Type
  5638 ;;                  1    wreg      void 
  5639 ;; Registers used:
  5640 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5641 ;; Tracked objects:
  5642 ;;		On entry : 0/0
  5643 ;;		On exit  : 0/0
  5644 ;;		Unchanged: 0/0
  5645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5646 ;;      Params:         0       0       0       0
  5647 ;;      Locals:         0       0       0       0
  5648 ;;      Temps:          0       0       0       0
  5649 ;;      Totals:         0       0       0       0
  5650 ;;Total ram usage:        0 bytes
  5651 ;; Hardware stack levels used:    1
  5652 ;; Hardware stack levels required when called:    4
  5653 ;; This function calls:
  5654 ;;		_ADC_Init
  5655 ;;		_Init_Setup
  5656 ;;		_UART_Init
  5657 ;;		_UART_Write
  5658 ;; This function is called by:
  5659 ;;		_main
  5660 ;; This function uses a non-reentrant model
  5661 ;;
  5662                           
  5663                           
  5664                           ;psect for function _Init
  5665  0948                     _Init:	
  5666                           
  5667                           ;main.c: 67: ADC_Init();
  5668                           
  5669                           ;incstack = 0
  5670                           ; Regs used in _Init: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5671  0948  158A  216E  158A   	fcall	_ADC_Init
  5672                           
  5673                           ;main.c: 68: UART_Init();
  5674  094B  158A  219C  158A   	fcall	_UART_Init
  5675                           
  5676                           ;main.c: 69: UART_Write("WELCOME MAAM");
  5677  094E  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  5678  094F  1283               	bcf	3,5	;RP0=0, select bank0
  5679  0950  1303               	bcf	3,6	;RP1=0, select bank0
  5680  0951  00A1               	movwf	UART_Write@data
  5681  0952  3080               	movlw	128
  5682  0953  00A2               	movwf	UART_Write@data+1
  5683  0954  158A  2263  158A   	fcall	_UART_Write
  5684                           
  5685                           ;main.c: 70: Init_Setup();
  5686  0957  158A  21D1         	fcall	_Init_Setup
  5687  0959  0008               	return
  5688  095A                     __end_of_Init:	
  5689                           
  5690                           	psect	text22
  5691  0A63                     __ptext22:	
  5692 ;; *************** function _UART_Write *****************
  5693 ;; Defined at:
  5694 ;;		line 42 in file "uart.c"
  5695 ;; Parameters:    Size  Location     Type
  5696 ;;  data            2    1[BANK0 ] PTR const unsigned char 
  5697 ;;		 -> UART_Send@txt(8), STR_1(13), 
  5698 ;; Auto vars:     Size  Location     Type
  5699 ;;  i               1    4[BANK0 ] unsigned char 
  5700 ;; Return value:  Size  Location     Type
  5701 ;;                  1    wreg      void 
  5702 ;; Registers used:
  5703 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5704 ;; Tracked objects:
  5705 ;;		On entry : 0/0
  5706 ;;		On exit  : 0/0
  5707 ;;		Unchanged: 0/0
  5708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5709 ;;      Params:         0       2       0       0
  5710 ;;      Locals:         0       1       0       0
  5711 ;;      Temps:          0       1       0       0
  5712 ;;      Totals:         0       4       0       0
  5713 ;;Total ram usage:        4 bytes
  5714 ;; Hardware stack levels used:    1
  5715 ;; Hardware stack levels required when called:    3
  5716 ;; This function calls:
  5717 ;;		_UART_PutC
  5718 ;; This function is called by:
  5719 ;;		_Init
  5720 ;;		_UART_Send
  5721 ;; This function uses a non-reentrant model
  5722 ;;
  5723                           
  5724                           
  5725                           ;psect for function _UART_Write
  5726  0A63                     _UART_Write:	
  5727                           
  5728                           ;uart.c: 43: uint8_t i = 0;
  5729                           
  5730                           ;incstack = 0
  5731                           ; Regs used in _UART_Write: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5732  0A63  1283               	bcf	3,5	;RP0=0, select bank0
  5733  0A64  1303               	bcf	3,6	;RP1=0, select bank0
  5734  0A65  01A4               	clrf	UART_Write@i
  5735  0A66                     l2302:	
  5736                           ;uart.c: 44: while (data[i] != '\0')
  5737                           
  5738  0A66  0824               	movf	UART_Write@i,w
  5739  0A67  0721               	addwf	UART_Write@data,w
  5740  0A68  0084               	movwf	4
  5741  0A69  0822               	movf	UART_Write@data+1,w
  5742  0A6A  1803               	skipnc
  5743  0A6B  0A22               	incf	UART_Write@data+1,w
  5744  0A6C  00FF               	movwf	127
  5745  0A6D  118A  27E1  158A   	fcall	stringtab
  5746  0A70  3A00               	xorlw	0
  5747  0A71  1903               	btfsc	3,2
  5748  0A72  2A87               	goto	l2304
  5749                           
  5750                           ;uart.c: 45: UART_PutC (data[i++]);
  5751  0A73  0824               	movf	UART_Write@i,w
  5752  0A74  0721               	addwf	UART_Write@data,w
  5753  0A75  0084               	movwf	4
  5754  0A76  0822               	movf	UART_Write@data+1,w
  5755  0A77  1803               	skipnc
  5756  0A78  0A22               	incf	UART_Write@data+1,w
  5757  0A79  00FF               	movwf	127
  5758  0A7A  118A  27E1  158A   	fcall	stringtab
  5759  0A7D  158A  2125  158A   	fcall	_UART_PutC
  5760  0A80  3001               	movlw	1
  5761  0A81  1283               	bcf	3,5	;RP0=0, select bank0
  5762  0A82  1303               	bcf	3,6	;RP1=0, select bank0
  5763  0A83  00A3               	movwf	??_UART_Write
  5764  0A84  0823               	movf	??_UART_Write,w
  5765  0A85  07A4               	addwf	UART_Write@i,f
  5766  0A86  2A66               	goto	l2302
  5767  0A87                     l2304:	
  5768                           
  5769                           ;uart.c: 46: UART_PutC('\n');
  5770  0A87  300A               	movlw	10
  5771  0A88  158A  2125  158A   	fcall	_UART_PutC
  5772                           
  5773                           ;uart.c: 47: UART_PutC('\r');
  5774  0A8B  300D               	movlw	13
  5775  0A8C  158A  2125         	fcall	_UART_PutC
  5776  0A8E  0008               	return
  5777  0A8F                     __end_of_UART_Write:	
  5778                           
  5779                           	psect	text23
  5780  0925                     __ptext23:	
  5781 ;; *************** function _UART_PutC *****************
  5782 ;; Defined at:
  5783 ;;		line 35 in file "uart.c"
  5784 ;; Parameters:    Size  Location     Type
  5785 ;;  data            1    wreg     const unsigned char 
  5786 ;; Auto vars:     Size  Location     Type
  5787 ;;  data            1    0[BANK0 ] const unsigned char 
  5788 ;; Return value:  Size  Location     Type
  5789 ;;                  1    wreg      void 
  5790 ;; Registers used:
  5791 ;;		wreg
  5792 ;; Tracked objects:
  5793 ;;		On entry : 0/0
  5794 ;;		On exit  : 0/0
  5795 ;;		Unchanged: 0/0
  5796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5797 ;;      Params:         0       0       0       0
  5798 ;;      Locals:         0       1       0       0
  5799 ;;      Temps:          0       0       0       0
  5800 ;;      Totals:         0       1       0       0
  5801 ;;Total ram usage:        1 bytes
  5802 ;; Hardware stack levels used:    1
  5803 ;; Hardware stack levels required when called:    2
  5804 ;; This function calls:
  5805 ;;		Nothing
  5806 ;; This function is called by:
  5807 ;;		_UART_Write
  5808 ;;		_UART_Send
  5809 ;; This function uses a non-reentrant model
  5810 ;;
  5811                           
  5812                           
  5813                           ;psect for function _UART_PutC
  5814  0925                     _UART_PutC:	
  5815                           
  5816                           ;incstack = 0
  5817                           ; Regs used in _UART_PutC: [wreg]
  5818                           ;UART_PutC@data stored from wreg
  5819  0925  1283               	bcf	3,5	;RP0=0, select bank0
  5820  0926  1303               	bcf	3,6	;RP1=0, select bank0
  5821  0927  00A0               	movwf	UART_PutC@data
  5822  0928                     l271:	
  5823                           ;uart.c: 36: while(TXIF==0);
  5824                           
  5825  0928  1C8C               	btfss	12,1	;volatile
  5826  0929  2928               	goto	l271
  5827                           
  5828                           ;uart.c: 37: TXIF=0;
  5829  092A  108C               	bcf	12,1	;volatile
  5830                           
  5831                           ;uart.c: 38: TXREG = data;
  5832  092B  0820               	movf	UART_PutC@data,w
  5833  092C  0095               	movwf	21	;volatile
  5834  092D  0008               	return
  5835  092E                     __end_of_UART_PutC:	
  5836                           
  5837                           	psect	text24
  5838  099C                     __ptext24:	
  5839 ;; *************** function _UART_Init *****************
  5840 ;; Defined at:
  5841 ;;		line 7 in file "uart.c"
  5842 ;; Parameters:    Size  Location     Type
  5843 ;;		None
  5844 ;; Auto vars:     Size  Location     Type
  5845 ;;		None
  5846 ;; Return value:  Size  Location     Type
  5847 ;;                  1    wreg      void 
  5848 ;; Registers used:
  5849 ;;		wreg
  5850 ;; Tracked objects:
  5851 ;;		On entry : 0/0
  5852 ;;		On exit  : 0/0
  5853 ;;		Unchanged: 0/0
  5854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5855 ;;      Params:         0       0       0       0
  5856 ;;      Locals:         0       0       0       0
  5857 ;;      Temps:          0       0       0       0
  5858 ;;      Totals:         0       0       0       0
  5859 ;;Total ram usage:        0 bytes
  5860 ;; Hardware stack levels used:    1
  5861 ;; Hardware stack levels required when called:    2
  5862 ;; This function calls:
  5863 ;;		Nothing
  5864 ;; This function is called by:
  5865 ;;		_Init
  5866 ;; This function uses a non-reentrant model
  5867 ;;
  5868                           
  5869                           
  5870                           ;psect for function _UART_Init
  5871  099C                     _UART_Init:	
  5872                           
  5873                           ;uart.c: 8: TRISCbits.TRISC4 = 0; TRISCbits.TRISC5 = 1;
  5874                           
  5875                           ;incstack = 0
  5876                           ; Regs used in _UART_Init: [wreg]
  5877  099C  1683               	bsf	3,5	;RP0=1, select bank1
  5878  099D  1303               	bcf	3,6	;RP1=0, select bank1
  5879  099E  1207               	bcf	7,4	;volatile
  5880  099F  1687               	bsf	7,5	;volatile
  5881                           
  5882                           ;uart.c: 9: SPBRG = 51;
  5883  09A0  3033               	movlw	51
  5884  09A1  1283               	bcf	3,5	;RP0=0, select bank0
  5885  09A2  1303               	bcf	3,6	;RP1=0, select bank0
  5886  09A3  0093               	movwf	19	;volatile
  5887                           
  5888                           ;uart.c: 10: TXSTAbits.BRGH = 1;
  5889  09A4  1516               	bsf	22,2	;volatile
  5890                           
  5891                           ;uart.c: 12: TXSTAbits.SYNC = 0;
  5892  09A5  1216               	bcf	22,4	;volatile
  5893                           
  5894                           ;uart.c: 13: RCSTAbits.SPEN = 1;
  5895  09A6  1797               	bsf	23,7	;volatile
  5896                           
  5897                           ;uart.c: 14: TXSTAbits.TXEN = 1;
  5898  09A7  1696               	bsf	22,5	;volatile
  5899                           
  5900                           ;uart.c: 15: RCSTAbits.CREN = 1;
  5901  09A8  1617               	bsf	23,4	;volatile
  5902                           
  5903                           ;uart.c: 16: TXSTAbits.TX9 = 0;
  5904  09A9  1316               	bcf	22,6	;volatile
  5905                           
  5906                           ;uart.c: 17: RCSTAbits.RX9 = 0;
  5907  09AA  1317               	bcf	23,6	;volatile
  5908                           
  5909                           ;uart.c: 19: PIE1bits.RCIE = 1;
  5910  09AB  1683               	bsf	3,5	;RP0=1, select bank1
  5911  09AC  1303               	bcf	3,6	;RP1=0, select bank1
  5912  09AD  168C               	bsf	12,5	;volatile
  5913                           
  5914                           ;uart.c: 20: PIR1bits.RCIF = 0;
  5915  09AE  1283               	bcf	3,5	;RP0=0, select bank0
  5916  09AF  1303               	bcf	3,6	;RP1=0, select bank0
  5917  09B0  128C               	bcf	12,5	;volatile
  5918                           
  5919                           ;uart.c: 21: INTCONbits.GIE = 1;
  5920  09B1  178B               	bsf	11,7	;volatile
  5921                           
  5922                           ;uart.c: 22: INTCONbits.PEIE = 1;
  5923  09B2  170B               	bsf	11,6	;volatile
  5924  09B3  0008               	return
  5925  09B4                     __end_of_UART_Init:	
  5926                           
  5927                           	psect	text25
  5928  09D1                     __ptext25:	
  5929 ;; *************** function _Init_Setup *****************
  5930 ;; Defined at:
  5931 ;;		line 7 in file "setup.c"
  5932 ;; Parameters:    Size  Location     Type
  5933 ;;		None
  5934 ;; Auto vars:     Size  Location     Type
  5935 ;;		None
  5936 ;; Return value:  Size  Location     Type
  5937 ;;                  1    wreg      void 
  5938 ;; Registers used:
  5939 ;;		wreg
  5940 ;; Tracked objects:
  5941 ;;		On entry : 0/0
  5942 ;;		On exit  : 0/0
  5943 ;;		Unchanged: 0/0
  5944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5945 ;;      Params:         0       0       0       0
  5946 ;;      Locals:         0       0       0       0
  5947 ;;      Temps:          0       0       0       0
  5948 ;;      Totals:         0       0       0       0
  5949 ;;Total ram usage:        0 bytes
  5950 ;; Hardware stack levels used:    1
  5951 ;; Hardware stack levels required when called:    2
  5952 ;; This function calls:
  5953 ;;		Nothing
  5954 ;; This function is called by:
  5955 ;;		_Init
  5956 ;; This function uses a non-reentrant model
  5957 ;;
  5958                           
  5959                           
  5960                           ;psect for function _Init_Setup
  5961  09D1                     _Init_Setup:	
  5962                           
  5963                           ;setup.c: 13: TRISA = 0x07;
  5964                           
  5965                           ;incstack = 0
  5966                           ; Regs used in _Init_Setup: [wreg]
  5967  09D1  3007               	movlw	7
  5968  09D2  1683               	bsf	3,5	;RP0=1, select bank1
  5969  09D3  1303               	bcf	3,6	;RP1=0, select bank1
  5970  09D4  0085               	movwf	5	;volatile
  5971                           
  5972                           ;setup.c: 14: TRISC = 0x23;
  5973  09D5  3023               	movlw	35
  5974  09D6  0087               	movwf	7	;volatile
  5975                           
  5976                           ;setup.c: 17: OPTION_REGbits.T0CS = 0;
  5977  09D7  1281               	bcf	1,5	;volatile
  5978                           
  5979                           ;setup.c: 18: OPTION_REGbits.PSA = 0;
  5980  09D8  1181               	bcf	1,3	;volatile
  5981                           
  5982                           ;setup.c: 19: OPTION_REGbits.PS0 = 0;
  5983  09D9  1001               	bcf	1,0	;volatile
  5984                           
  5985                           ;setup.c: 20: OPTION_REGbits.PS1 = 1;
  5986  09DA  1481               	bsf	1,1	;volatile
  5987                           
  5988                           ;setup.c: 21: OPTION_REGbits.PS2 = 0;
  5989  09DB  1101               	bcf	1,2	;volatile
  5990                           
  5991                           ;setup.c: 22: INTCONbits.T0IE = 1;
  5992  09DC  168B               	bsf	11,5	;volatile
  5993                           
  5994                           ;setup.c: 23: TMR0 = 6;
  5995  09DD  3006               	movlw	6
  5996  09DE  1283               	bcf	3,5	;RP0=0, select bank0
  5997  09DF  1303               	bcf	3,6	;RP1=0, select bank0
  5998  09E0  0081               	movwf	1	;volatile
  5999                           
  6000                           ;setup.c: 26: T1CONbits.TMR1CS = 0;
  6001  09E1  1090               	bcf	16,1	;volatile
  6002                           
  6003                           ;setup.c: 27: T1CONbits.T1CKPS0 = 0;
  6004  09E2  1210               	bcf	16,4	;volatile
  6005                           
  6006                           ;setup.c: 28: T1CONbits.T1CKPS1 = 1;
  6007  09E3  1690               	bsf	16,5	;volatile
  6008                           
  6009                           ;setup.c: 29: T1CONbits.TMR1ON = 0;
  6010  09E4  1010               	bcf	16,0	;volatile
  6011                           
  6012                           ;setup.c: 33: OPTION_REGbits.INTEDG = 1;
  6013  09E5  1683               	bsf	3,5	;RP0=1, select bank1
  6014  09E6  1303               	bcf	3,6	;RP1=0, select bank1
  6015  09E7  1701               	bsf	1,6	;volatile
  6016                           
  6017                           ;setup.c: 34: OPTION_REGbits.nRAPU = 0;
  6018  09E8  1381               	bcf	1,7	;volatile
  6019                           
  6020                           ;setup.c: 35: INTCONbits.INTE = 1;
  6021  09E9  160B               	bsf	11,4	;volatile
  6022                           
  6023                           ;setup.c: 36: INTCONbits.GIE = 1;
  6024  09EA  178B               	bsf	11,7	;volatile
  6025                           
  6026                           ;setup.c: 37: INTCONbits.PEIE = 1;
  6027  09EB  170B               	bsf	11,6	;volatile
  6028                           
  6029                           ;setup.c: 40: PORTC = 0x04;
  6030  09EC  3004               	movlw	4
  6031  09ED  1283               	bcf	3,5	;RP0=0, select bank0
  6032  09EE  1303               	bcf	3,6	;RP1=0, select bank0
  6033  09EF  0087               	movwf	7	;volatile
  6034  09F0  0008               	return
  6035  09F1                     __end_of_Init_Setup:	
  6036                           
  6037                           	psect	text26
  6038  096E                     __ptext26:	
  6039 ;; *************** function _ADC_Init *****************
  6040 ;; Defined at:
  6041 ;;		line 7 in file "adc.c"
  6042 ;; Parameters:    Size  Location     Type
  6043 ;;		None
  6044 ;; Auto vars:     Size  Location     Type
  6045 ;;		None
  6046 ;; Return value:  Size  Location     Type
  6047 ;;                  1    wreg      void 
  6048 ;; Registers used:
  6049 ;;		wreg, status,2
  6050 ;; Tracked objects:
  6051 ;;		On entry : 0/0
  6052 ;;		On exit  : 0/0
  6053 ;;		Unchanged: 0/0
  6054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6055 ;;      Params:         0       0       0       0
  6056 ;;      Locals:         0       0       0       0
  6057 ;;      Temps:          0       0       0       0
  6058 ;;      Totals:         0       0       0       0
  6059 ;;Total ram usage:        0 bytes
  6060 ;; Hardware stack levels used:    1
  6061 ;; Hardware stack levels required when called:    2
  6062 ;; This function calls:
  6063 ;;		Nothing
  6064 ;; This function is called by:
  6065 ;;		_Init
  6066 ;; This function uses a non-reentrant model
  6067 ;;
  6068                           
  6069                           
  6070                           ;psect for function _ADC_Init
  6071  096E                     _ADC_Init:	
  6072                           
  6073                           ;adc.c: 8: CMCON0 = 0x07 ;
  6074                           
  6075                           ;incstack = 0
  6076                           ; Regs used in _ADC_Init: [wreg+status,2]
  6077  096E  3007               	movlw	7
  6078  096F  1283               	bcf	3,5	;RP0=0, select bank0
  6079  0970  1303               	bcf	3,6	;RP1=0, select bank0
  6080  0971  0099               	movwf	25	;volatile
  6081                           
  6082                           ;adc.c: 9: ANSEL = 0x03;
  6083  0972  3003               	movlw	3
  6084  0973  1683               	bsf	3,5	;RP0=1, select bank1
  6085  0974  1303               	bcf	3,6	;RP1=0, select bank1
  6086  0975  0091               	movwf	17	;volatile
  6087                           
  6088                           ;adc.c: 10: ADCON0 = 0x81;
  6089  0976  3081               	movlw	129
  6090  0977  1283               	bcf	3,5	;RP0=0, select bank0
  6091  0978  1303               	bcf	3,6	;RP1=0, select bank0
  6092  0979  009F               	movwf	31	;volatile
  6093                           
  6094                           ;adc.c: 11: ADCON1 = 0x50;
  6095  097A  3050               	movlw	80
  6096  097B  1683               	bsf	3,5	;RP0=1, select bank1
  6097  097C  1303               	bcf	3,6	;RP1=0, select bank1
  6098  097D  009F               	movwf	31	;volatile
  6099                           
  6100                           ;adc.c: 12: ADRESH = 0;
  6101  097E  1283               	bcf	3,5	;RP0=0, select bank0
  6102  097F  1303               	bcf	3,6	;RP1=0, select bank0
  6103  0980  019E               	clrf	30	;volatile
  6104                           
  6105                           ;adc.c: 13: ADRESL = 0;
  6106  0981  1683               	bsf	3,5	;RP0=1, select bank1
  6107  0982  1303               	bcf	3,6	;RP1=0, select bank1
  6108  0983  019E               	clrf	30	;volatile
  6109  0984  0008               	return
  6110  0985                     __end_of_ADC_Init:	
  6111                           
  6112                           	psect	text27
  6113  0A38                     __ptext27:	
  6114 ;; *************** function _Button_Press *****************
  6115 ;; Defined at:
  6116 ;;		line 52 in file "setup.c"
  6117 ;; Parameters:    Size  Location     Type
  6118 ;;		None
  6119 ;; Auto vars:     Size  Location     Type
  6120 ;;  input           1    2[BANK0 ] unsigned char 
  6121 ;; Return value:  Size  Location     Type
  6122 ;;                  1    wreg      unsigned char 
  6123 ;; Registers used:
  6124 ;;		wreg, status,2, status,0
  6125 ;; Tracked objects:
  6126 ;;		On entry : 0/0
  6127 ;;		On exit  : 0/0
  6128 ;;		Unchanged: 0/0
  6129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6130 ;;      Params:         0       0       0       0
  6131 ;;      Locals:         0       1       0       0
  6132 ;;      Temps:          0       2       0       0
  6133 ;;      Totals:         0       3       0       0
  6134 ;;Total ram usage:        3 bytes
  6135 ;; Hardware stack levels used:    1
  6136 ;; Hardware stack levels required when called:    2
  6137 ;; This function calls:
  6138 ;;		Nothing
  6139 ;; This function is called by:
  6140 ;;		_main
  6141 ;; This function uses a non-reentrant model
  6142 ;;
  6143                           
  6144                           
  6145                           ;psect for function _Button_Press
  6146  0A38                     _Button_Press:	
  6147                           
  6148                           ;setup.c: 53: static uint8_t switch_state = 0;
  6149                           ;setup.c: 54: uint8_t input = (PORTC & 0x02);
  6150                           
  6151                           ;incstack = 0
  6152                           ; Regs used in _Button_Press: [wreg+status,2+status,0]
  6153  0A38  1283               	bcf	3,5	;RP0=0, select bank0
  6154  0A39  1303               	bcf	3,6	;RP1=0, select bank0
  6155  0A3A  0807               	movf	7,w	;volatile
  6156  0A3B  3902               	andlw	2
  6157  0A3C  00A0               	movwf	??_Button_Press
  6158  0A3D  0820               	movf	??_Button_Press,w
  6159  0A3E  00A2               	movwf	Button_Press@input
  6160                           
  6161                           ;setup.c: 55: if((switch_state==0)&&(input)){
  6162  0A3F  1683               	bsf	3,5	;RP0=1, select bank1
  6163  0A40  1303               	bcf	3,6	;RP1=0, select bank1
  6164  0A41  0828               	movf	Button_Press@switch_state^(0+128),w
  6165  0A42  1D03               	btfss	3,2
  6166  0A43  2A5A               	goto	l2814
  6167  0A44  1283               	bcf	3,5	;RP0=0, select bank0
  6168  0A45  1303               	bcf	3,6	;RP1=0, select bank0
  6169  0A46  0822               	movf	Button_Press@input,w
  6170  0A47  1903               	btfsc	3,2
  6171  0A48  2A5A               	goto	l2814
  6172                           
  6173                           ;setup.c: 56: _delay((unsigned long)((5)*(8000000/4000.0)));
  6174  0A49  300D               	movlw	13
  6175  0A4A  1283               	bcf	3,5	;RP0=0, select bank0
  6176  0A4B  1303               	bcf	3,6	;RP1=0, select bank0
  6177  0A4C  00A1               	movwf	??_Button_Press+1
  6178  0A4D  30FB               	movlw	251
  6179  0A4E  00A0               	movwf	??_Button_Press
  6180  0A4F                     u3867:	
  6181  0A4F  0BA0               	decfsz	??_Button_Press,f
  6182  0A50  2A4F               	goto	u3867
  6183  0A51  0BA1               	decfsz	??_Button_Press+1,f
  6184  0A52  2A4F               	goto	u3867
  6185  0A53  0000               	nop
  6186                           
  6187                           ;setup.c: 57: switch_state = 1;
  6188  0A54  1683               	bsf	3,5	;RP0=1, select bank1
  6189  0A55  1303               	bcf	3,6	;RP1=0, select bank1
  6190  0A56  01A8               	clrf	Button_Press@switch_state^(0+128)
  6191  0A57  0AA8               	incf	Button_Press@switch_state^(0+128),f
  6192                           
  6193                           ;setup.c: 58: return 'T';
  6194  0A58  3054               	movlw	84
  6195  0A59  0008               	return
  6196  0A5A                     l2814:	
  6197                           
  6198                           ;setup.c: 59: }
  6199                           ;setup.c: 60: if(input == 0)
  6200  0A5A  1283               	bcf	3,5	;RP0=0, select bank0
  6201  0A5B  0822               	movf	Button_Press@input,w
  6202  0A5C  1D03               	btfss	3,2
  6203  0A5D  2A61               	goto	l2818
  6204                           
  6205                           ;setup.c: 61: switch_state = 0;
  6206  0A5E  1683               	bsf	3,5	;RP0=1, select bank1
  6207  0A5F  1303               	bcf	3,6	;RP1=0, select bank1
  6208  0A60  01A8               	clrf	Button_Press@switch_state^(0+128)
  6209  0A61                     l2818:	
  6210                           
  6211                           ;setup.c: 62: return 0;
  6212  0A61  3000               	movlw	0
  6213  0A62  0008               	return
  6214  0A63                     __end_of_Button_Press:	
  6215                           
  6216                           	psect	text28
  6217  0BA4                     __ptext28:	
  6218 ;; *************** function _ISR *****************
  6219 ;; Defined at:
  6220 ;;		line 39 in file "main.c"
  6221 ;; Parameters:    Size  Location     Type
  6222 ;;		None
  6223 ;; Auto vars:     Size  Location     Type
  6224 ;;		None
  6225 ;; Return value:  Size  Location     Type
  6226 ;;                  1    wreg      void 
  6227 ;; Registers used:
  6228 ;;		wreg, status,2, status,0, pclath, cstack
  6229 ;; Tracked objects:
  6230 ;;		On entry : 0/0
  6231 ;;		On exit  : 0/0
  6232 ;;		Unchanged: 0/0
  6233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6234 ;;      Params:         0       0       0       0
  6235 ;;      Locals:         0       0       0       0
  6236 ;;      Temps:          5       0       0       0
  6237 ;;      Totals:         5       0       0       0
  6238 ;;Total ram usage:        5 bytes
  6239 ;; Hardware stack levels used:    1
  6240 ;; Hardware stack levels required when called:    1
  6241 ;; This function calls:
  6242 ;;		_UART_GetC
  6243 ;; This function is called by:
  6244 ;;		Interrupt level 1
  6245 ;; This function uses a non-reentrant model
  6246 ;;
  6247                           
  6248                           
  6249                           ;psect for function _ISR
  6250  0BA4                     _ISR:	
  6251                           
  6252                           ;main.c: 40: if(INTCONbits.INTF){
  6253  0BA4  1C8B               	btfss	11,1	;volatile
  6254  0BA5  2BAF               	goto	i1l2174
  6255                           
  6256                           ;main.c: 41: PF_FLAG = 1;
  6257  0BA6  1683               	bsf	3,5	;RP0=1, select bank1
  6258  0BA7  1303               	bcf	3,6	;RP1=0, select bank1
  6259  0BA8  01AA               	clrf	_PF_FLAG^(0+128)
  6260  0BA9  0AAA               	incf	_PF_FLAG^(0+128),f
  6261                           
  6262                           ;main.c: 42: ++ZERO_CROSS;
  6263  0BAA  3001               	movlw	1
  6264  0BAB  00F5               	movwf	??_ISR
  6265  0BAC  0875               	movf	??_ISR,w
  6266  0BAD  07F2               	addwf	_ZERO_CROSS,f
  6267                           
  6268                           ;main.c: 43: INTCONbits.INTF = 0;
  6269  0BAE  108B               	bcf	11,1	;volatile
  6270  0BAF                     i1l2174:	
  6271                           
  6272                           ;main.c: 44: }
  6273                           ;main.c: 45: if(INTCONbits.T0IF){
  6274  0BAF  1D0B               	btfss	11,2	;volatile
  6275  0BB0  2BD3               	goto	i1l2190
  6276                           
  6277                           ;main.c: 46: TMR0 = 6;
  6278  0BB1  3006               	movlw	6
  6279  0BB2  1283               	bcf	3,5	;RP0=0, select bank0
  6280  0BB3  0081               	movwf	1	;volatile
  6281                           
  6282                           ;main.c: 47: if((++TIME_MS)>=1000){
  6283  0BB4  3001               	movlw	1
  6284  0BB5  1683               	bsf	3,5	;RP0=1, select bank1
  6285  0BB6  1303               	bcf	3,6	;RP1=0, select bank1
  6286  0BB7  07A0               	addwf	_TIME_MS^(0+128),f
  6287  0BB8  1803               	skipnc
  6288  0BB9  0AA1               	incf	(_TIME_MS+1)^(0+128),f
  6289  0BBA  3000               	movlw	0
  6290  0BBB  07A1               	addwf	(_TIME_MS+1)^(0+128),f
  6291  0BBC  3003               	movlw	3
  6292  0BBD  0221               	subwf	(_TIME_MS+1)^(0+128),w
  6293  0BBE  30E8               	movlw	232
  6294  0BBF  1903               	skipnz
  6295  0BC0  0220               	subwf	_TIME_MS^(0+128),w
  6296  0BC1  1C03               	skipc
  6297  0BC2  2BD2               	goto	i1l2188
  6298                           
  6299                           ;main.c: 48: TIME_MS = 0;
  6300  0BC3  01A0               	clrf	_TIME_MS^(0+128)
  6301  0BC4  01A1               	clrf	(_TIME_MS+1)^(0+128)
  6302                           
  6303                           ;main.c: 49: if((++TIME_S)>60){
  6304  0BC5  3001               	movlw	1
  6305  0BC6  00F5               	movwf	??_ISR
  6306  0BC7  0875               	movf	??_ISR,w
  6307  0BC8  07F3               	addwf	_TIME_S,f
  6308  0BC9  303D               	movlw	61
  6309  0BCA  0273               	subwf	_TIME_S,w
  6310  0BCB  1803               	btfsc	3,0
  6311                           
  6312                           ;main.c: 50: TIME_S = 0;
  6313  0BCC  01F3               	clrf	_TIME_S
  6314                           
  6315                           ;main.c: 51: }
  6316                           ;main.c: 52: CHAR_STATE = 'S';
  6317  0BCD  3053               	movlw	83
  6318  0BCE  00F5               	movwf	??_ISR
  6319  0BCF  0875               	movf	??_ISR,w
  6320  0BD0  00F1               	movwf	_CHAR_STATE
  6321                           
  6322                           ;main.c: 53: ZERO_CROSS = 0;
  6323  0BD1  01F2               	clrf	_ZERO_CROSS
  6324  0BD2                     i1l2188:	
  6325                           
  6326                           ;main.c: 54: }
  6327                           ;main.c: 55: INTCONbits.T0IF = 0;
  6328  0BD2  110B               	bcf	11,2	;volatile
  6329  0BD3                     i1l2190:	
  6330                           
  6331                           ;main.c: 56: }
  6332                           ;main.c: 57: if(PIR1bits.RCIF){
  6333  0BD3  1283               	bcf	3,5	;RP0=0, select bank0
  6334  0BD4  1E8C               	btfss	12,5	;volatile
  6335  0BD5  2BDF               	goto	i1l180
  6336                           
  6337                           ;main.c: 58: CHAR_STATE = UART_GetC();
  6338  0BD6  158A  2115  158A   	fcall	_UART_GetC
  6339  0BD9  00F5               	movwf	??_ISR
  6340  0BDA  0875               	movf	??_ISR,w
  6341  0BDB  00F1               	movwf	_CHAR_STATE
  6342                           
  6343                           ;main.c: 59: PIR1bits.RCIF = 0;
  6344  0BDC  1283               	bcf	3,5	;RP0=0, select bank0
  6345  0BDD  1303               	bcf	3,6	;RP1=0, select bank0
  6346  0BDE  128C               	bcf	12,5	;volatile
  6347  0BDF                     i1l180:	
  6348  0BDF  0879               	movf	??_ISR+4,w
  6349  0BE0  00FF               	movwf	127
  6350  0BE1  0878               	movf	??_ISR+3,w
  6351  0BE2  008A               	movwf	10
  6352  0BE3  0877               	movf	??_ISR+2,w
  6353  0BE4  0084               	movwf	4
  6354  0BE5  0E76               	swapf	(??_ISR+1)^(0+-128),w
  6355  0BE6  0083               	movwf	3
  6356  0BE7  0EFE               	swapf	126,f
  6357  0BE8  0E7E               	swapf	126,w
  6358  0BE9  0009               	retfie
  6359  0BEA                     __end_of_ISR:	
  6360                           
  6361                           	psect	intentry
  6362  0004                     __pintentry:	
  6363                           ;incstack = 0
  6364                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  6365                           
  6366  0004                     interrupt_function:	
  6367  007E                     saved_w	set	btemp
  6368  0004  00FE               	movwf	btemp
  6369  0005  0E03               	swapf	3,w
  6370  0006  00F6               	movwf	??_ISR+1
  6371  0007  0804               	movf	4,w
  6372  0008  00F7               	movwf	??_ISR+2
  6373  0009  080A               	movf	10,w
  6374  000A  00F8               	movwf	??_ISR+3
  6375  000B  1283               	bcf	3,5	;RP0=0, select bank0
  6376  000C  1303               	bcf	3,6	;RP1=0, select bank0
  6377  000D  087F               	movf	btemp+1,w
  6378  000E  00F9               	movwf	??_ISR+4
  6379  000F  158A  2BA4         	ljmp	_ISR
  6380                           
  6381                           	psect	text29
  6382  0915                     __ptext29:	
  6383 ;; *************** function _UART_GetC *****************
  6384 ;; Defined at:
  6385 ;;		line 26 in file "uart.c"
  6386 ;; Parameters:    Size  Location     Type
  6387 ;;		None
  6388 ;; Auto vars:     Size  Location     Type
  6389 ;;		None
  6390 ;; Return value:  Size  Location     Type
  6391 ;;                  1    wreg      unsigned char 
  6392 ;; Registers used:
  6393 ;;		wreg
  6394 ;; Tracked objects:
  6395 ;;		On entry : 0/0
  6396 ;;		On exit  : 0/0
  6397 ;;		Unchanged: 0/0
  6398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6399 ;;      Params:         0       0       0       0
  6400 ;;      Locals:         0       0       0       0
  6401 ;;      Temps:          0       0       0       0
  6402 ;;      Totals:         0       0       0       0
  6403 ;;Total ram usage:        0 bytes
  6404 ;; Hardware stack levels used:    1
  6405 ;; This function calls:
  6406 ;;		Nothing
  6407 ;; This function is called by:
  6408 ;;		_ISR
  6409 ;; This function uses a non-reentrant model
  6410 ;;
  6411                           
  6412                           
  6413                           ;psect for function _UART_GetC
  6414  0915                     _UART_GetC:	
  6415                           
  6416                           ;uart.c: 27: if (OERR) {
  6417                           
  6418                           ;incstack = 0
  6419                           ; Regs used in _UART_GetC: [wreg]
  6420  0915  1283               	bcf	3,5	;RP0=0, select bank0
  6421  0916  1303               	bcf	3,6	;RP1=0, select bank0
  6422  0917  1C97               	btfss	23,1	;volatile
  6423  0918  291B               	goto	i1l2150
  6424                           
  6425                           ;uart.c: 28: CREN = 0;
  6426  0919  1217               	bcf	23,4	;volatile
  6427                           
  6428                           ;uart.c: 29: CREN = 1;
  6429  091A  1617               	bsf	23,4	;volatile
  6430  091B                     i1l2150:	
  6431                           
  6432                           ;uart.c: 30: }
  6433                           ;uart.c: 31: return RCREG;
  6434  091B  0814               	movf	20,w	;volatile
  6435  091C  0008               	return
  6436  091D                     __end_of_UART_GetC:	
  6437  007E                     btemp	set	126	;btemp
  6438  007E                     wtemp0	set	126


Data Sizes:
    Strings     13
    Constant    0
    Data        10
    BSS         48
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     80      80
    BANK1            80     24      77
    BANK2            80      0       0

Pointer List with Targets:

    floatTostr@txt	PTR unsigned char  size(1) Largest target is 8
		 -> UART_Send@txt(BANK0[8]), 

    UART_Write@data	PTR const unsigned char  size(2) Largest target is 13
		 -> UART_Send@txt(BANK0[8]), STR_1(CODE[13]), 

    AVG@ARRAY	PTR unsigned int  size(1) Largest target is 8
		 -> POWER_FACTOR_ARRAY(BANK1[8]), CURRENT_ARRAY(BANK1[8]), VOLT_ARRAY(BANK1[8]), FREQUENCY_ARRAY(BANK1[8]), 

    ADC_PF@ARRAY	PTR unsigned int  size(1) Largest target is 8
		 -> POWER_FACTOR_ARRAY(BANK1[8]), 

    ADC_RMS@ARRAY	PTR unsigned int  size(1) Largest target is 8
		 -> CURRENT_ARRAY(BANK1[8]), VOLT_ARRAY(BANK1[8]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Measure
    _main->_Send
    _Send->_UART_Send
    _UART_Send->___fttol
    _floatTostr->___lwmod
    ___lwmod->___lwdiv
    _Measure->_ADC_RMS
    _AVG->___fttol
    ___lbtoft->___ftpack
    _ADC_RMS->___fttol
    _ADC_PF->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftdiv
    ___ftmul->___awtoft
    ___ftdiv->___ftmul
    ___ftadd->___lwtoft
    ___awtoft->___ftpack
    _Init->_UART_Write
    _UART_Write->_UART_PutC

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Measure
    _Measure->_ADC_PF

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   60910
                                             79 BANK0      1     1      0
                       _Button_Press
                               _Init
                            _Measure
                               _Send
                            ___lwmod
 ---------------------------------------------------------------------------------
 (1) _Send                                                 7     7      0   11947
                                             75 BANK0      4     4      0
                                              0 BANK1      2     2      0
                       _Toggle_Relay
                          _UART_Send
                            ___ftdiv
                            ___fttol
                           ___lwtoft
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _UART_Send                                           15    12      3    3914
                                             60 BANK0     15    12      3
                          _UART_PutC
                         _UART_Write
                            ___ftdiv (ARG)
                            ___fttol (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
                         _floatTostr
 ---------------------------------------------------------------------------------
 (3) _floatTostr                                           4     1      3    2374
                                             14 BANK0      4     1      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              6     2      4    1012
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _Toggle_Relay                                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Measure                                              5     5      0   47595
                                             78 BANK0      1     1      0
                                             20 BANK1      4     4      0
                             _ADC_PF
                            _ADC_RMS
                                _AVG
 ---------------------------------------------------------------------------------
 (2) _AVG                                                 12    10      2   14194
                                             60 BANK0     12    10      2
                            ___ftadd
                            ___ftdiv
                            ___fttol
                           ___lbtoft
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) ___lbtoft                                             8     5      3    2219
                                              8 BANK0      8     5      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _ADC_RMS                                             18    14      4   12416
                                             60 BANK0     18    14      4
                           _ADC_Read
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) _ADC_Read                                             5     3      2      62
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _ADC_PF                                              28    27      1   20948
                                             60 BANK0      5     4      1
                                              0 BANK1     20    20      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                            ___lwdiv
                           ___lwtoft
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     656
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             4     1      3    2804
                                              8 BANK0      4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     891
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     761
                                             46 BANK0     14    10      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    4106
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3778
                                             30 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    3893
                                             12 BANK0     13     7      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    2451
                                              8 BANK0      6     3      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2188
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _Init                                                 0     0      0     291
                           _ADC_Init
                         _Init_Setup
                          _UART_Init
                         _UART_Write
 ---------------------------------------------------------------------------------
 (3) _UART_Write                                           4     2      2     291
                                              1 BANK0      4     2      2
                          _UART_PutC
 ---------------------------------------------------------------------------------
 (4) _UART_PutC                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _UART_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_Setup                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Button_Press                                         3     3      0      65
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  5     5      0       0
                                              0 COMMON     5     5      0
                          _UART_GetC
 ---------------------------------------------------------------------------------
 (6) _UART_GetC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Button_Press
   _Init
     _ADC_Init
     _Init_Setup
     _UART_Init
     _UART_Write
       _UART_PutC
   _Measure
     _ADC_PF
       ___awtoft
         ___ftpack
         ___wmul (ARG)
       ___ftadd
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___wmul (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___wmul (ARG)
       ___fttol
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___wmul (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___wmul (ARG)
       ___lwdiv
       ___lwtoft
         ___ftpack
         ___wmul (ARG)
       ___wmul
     _ADC_RMS
       _ADC_Read
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___wmul (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___wmul (ARG)
       ___fttol
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___wmul (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___wmul (ARG)
       ___lwtoft
         ___ftpack
         ___wmul (ARG)
     _AVG
       ___ftadd
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___wmul (ARG)
       ___fttol
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___wmul (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___wmul (ARG)
       ___lbtoft
         ___ftpack
       ___lwtoft
         ___ftpack
         ___wmul (ARG)
   _Send
     _Toggle_Relay
     _UART_Send
       _UART_PutC
       _UART_Write
         _UART_PutC
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___wmul (ARG)
       ___fttol (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___wmul (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___wmul (ARG)
       ___lwtoft (ARG)
         ___ftpack
         ___wmul (ARG)
       ___wmul (ARG)
       _floatTostr (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
         ___wmul (ARG)
       ___wmul (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___wmul (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___wmul (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
         ___wmul (ARG)
       ___wmul (ARG)
     ___lwtoft
       ___ftpack
       ___wmul (ARG)
     ___wmul
   ___lwmod
     ___lwdiv (ARG)

 _ISR (ROOT)
   _UART_GetC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      0       0       7        0.0%
BITBANK2            50      0       0       6        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     18      4D       5       96.3%
BITBANK1            50      0       0       4        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     50      50       3      100.0%
BITBANK0            50      0       0       9        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      A7      10        0.0%
ABS                  0      0      A7       8        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Jul 05 08:33:29 2021

                       pc 0002                _ZERO_CROSS 0072                _VOLT_ARRAY 00C3  
             __CFG_CP$OFF 0000                        l61 0D85                        l54 0AE2  
                      l72 0055                        l69 004C                        fsr 0004  
     ___wmul@multiplicand 0022              ___ftadd@exp1 0038              ___ftadd@exp2 0037  
            ___ftadd@sign 0036                       l271 0928                       l191 070E  
                     l544 0C37                       l376 09FD                       l545 0C3F  
                     l537 0C22                       l628 0D47                       l568 05AC  
                     _AVG 0C58              __CFG_CPD$OFF 0000                       _ISR 0BA4  
         __end_of_ADC_RMS 0DF7                       fsr0 0004                       indf 0000  
            __CFG_IESO$ON 0000              __CFG_FOSC$HS 0000                      AVG@i 0067  
                    ?_AVG 005C                      ?_ISR 0075              ___ftdiv@cntr 0048  
            ___ftdiv@sign 004D                      l2210 0C07                      l2220 0C31  
                    l2212 0C0C                      l2204 0BF4                      l2302 0A66  
                    l2304 0A87                      l2208 0BFB                      l2218 0C27  
                    l2250 0B4F                      l2242 0B2B                      l2244 0B39  
                    l2510 0CED                      l2254 0B5A                      l2318 09F5  
                    l2408 05F3                      l2352 0534                      l2424 0F77  
                    l2272 0B11                      l2338 0A20                      l2370 055D  
                    l2418 0F61                      l2530 0D2F                      l2610 0069  
                    l2266 0AF5                      l2380 0583                      l2348 052D  
                    l2460 0727                      l2268 0B03                      l2276 0B1C  
                    l2390 05A8                      l2382 0587                      l2358 0543  
                    l2446 0FDB                      l2438 0FBC                      l2542 0D58  
                    l2630 012B                      l2614 0072                      l2286 0AC7  
                    l2376 0572                      l2536 0D3C                      l2528 0D1F  
                    l2632 0131                      l2704 0CA5                      l2394 05BE  
                    l2378 057E                      l2490 07A4                      l2482 078C  
                    l2466 073D                      l2538 0D4A                      l2634 0137  
                    l2642 014B                      l2388 059C                      l2660 02D9  
                    l2644 0180                      l2628 0129                      l2580 0D99  
                    l2708 0CAD                      l2814 0A5A                      l2398 05D0  
                    l2494 07B4                      l2478 077C                      l2638 0145  
                    l2672 0361                      l2592 0043                      l2576 0D91  
                    l2568 0D6F                      l2818 0A61                      l2684 04A1  
                    l2844 0E90                      l2828 0E23                      l2678 0443  
                    l2774 096A                      l2790 0B8F                      l2854 062A  
                    l2870 0A92                      l2848 060D                      l2698 0C68  
                    l2858 0690                      l2866 0703                      l2876 0AB6  
                    STR_1 07F1                      _CREN 00BC                      u3115 0588  
                    u3055 055E                      u3145 059D                      u3225 0F89  
                    u3305 0749                      u3235 0F9B                      u3315 075B  
                    u3085 0573                      u3245 0FBD                      u3405 07BD  
                    u3255 0FCE                      u3265 0FDC                      u3345 078D  
                    u3355 0795                      u3435 0CF4                      u2725 0C46  
                    u2645 0C00                      u3535 0D7F                      u3720 0B69  
                    u2665 0C1B                      u3465 0D20                      u3545 0D8B  
                    u2825 0AF8                      u3395 07B5                      u2755 0B2E  
                    u2685 0C2A                      u2925 09FE                      u2845 0B09  
                    u3495 0D3E                      u2775 0B3A                      u2935 0A05  
                    u2855 0B12                      u3815 0615                      u2785 0B46  
                    u3825 067B                      u2795 0B50                      u2885 0ACE  
                    u3857 0ADC                      u3867 0A4F                      _OERR 00B9  
                    _TMR0 0001                      _TXIF 0061                      _Init 0948  
                    _Send 060C             __CFG_FCMEN$ON 0000                      _main 0A8F  
            ___ftpack@arg 0020              ___ftpack@exp 0023                      btemp 007E  
        __end_of_ADC_Init 0985          __end_of_ADC_Read 0AED             __CFG_BOREN$ON 0000  
                    start 0011             __CFG_MCLRE$ON 0000              ___ftmul@cntr 003C  
            ___ftmul@sign 003D           __end_of_Measure 0E9F                     ??_AVG 005E  
                   ??_ISR 0075              ___fttol@exp1 005B              ___fttol@lval 0057  
                   ?_Init 0075                     ?_Send 0075                     ?_main 0075  
         __end_of___ftadd 060C             __CFG_WDTE$OFF 0000           __end_of___ftdiv 1000  
                   _ANSEL 0091           __end_of___ftmul 07E1           __end_of___fttol 0D61  
         __end_of___lwdiv 0B5F                     i1l180 0BDF           __end_of___lwmod 0B21  
                   _RCREG 0014                     _TMR1H 000F                     _TMR1L 000E  
                   _SPBRG 0013                     _PORTC 0007                     _TRISA 0085  
                   _TRISC 0087                     _TXREG 0015             __CFG_PWRTE$ON 0000  
      __size_of_UART_GetC 0008               ?_UART_Write 0021        __size_of_UART_Init 0018  
      __size_of_UART_Send 0045        __size_of_UART_PutC 0009             ?_Button_Press 0075  
           ___awtoft@sign 002D             ___ftpack@sign 0024                     pclath 000A  
                   status 0003                     wtemp0 007E           __initialization 0013  
            __end_of_Init 095A              __end_of_Send 070F                _Init_Setup 09D1  
            __end_of_main 0ABD                 ??_ADC_RMS 0060                    ??_Init 0025  
                  ??_Send 006B                    ??_main 006F             ___fttol@sign1 0056  
                  AVG@avg 0062                    AVG@ret 0063            ??_Button_Press 0020  
                  _ADCON0 001F                    _ADCON1 009F                    _ADC_PF 002C  
                  _ADRESH 001E                    _ADRESL 009E                    _CMCON0 0019  
        __end_of___awtoft 0A38          __end_of___ftpack 0C58          __end_of___lbtoft 09D1  
                  i1l2150 091B                    i1l2190 0BD3                    i1l2174 0BAF  
                  i1l2188 0BD2          __end_of___lwtoft 099C                    _TIME_S 0073  
               ??_Measure 006E         __end_of_UART_GetC 091D         __end_of_UART_Init 09B4  
       __end_of_UART_Send 0BA4         __end_of_UART_PutC 092E       __size_of_UART_Write 002C  
                  ___wmul 09F1                 ??___ftadd 0032                 ??___ftdiv 0044  
               ??___ftmul 0034                 ??___fttol 0052                 ??___lwdiv 0024  
               ??___lwmod 002C     ___ftmul@f3_as_product 0039                 ?_ADC_Init 0075  
               ?_ADC_Read 0020                    saved_w 007E            ADC_PF@time_dif 00CB  
 __end_of__initialization 0029               _Measure$304 00DF                ___ftadd@f1 002C  
              ___ftadd@f2 002F                ___ftdiv@f1 0041                ___ftdiv@f2 003E  
              ___ftdiv@f3 0049                ___awtoft@c 0028                ___lbtoft@c 002F  
              ___ftmul@f1 002E                ___ftmul@f2 0031                ___fttol@f1 004E  
          __pcstackCOMMON 0075               ?_Init_Setup 0075              __pidataBANK1 092E  
              ___lwtoft@c 0028                   ADC_PF@i 00DB            _OPTION_REGbits 0081  
              ??_ADC_Init 0020                ??_ADC_Read 0022                   ?_ADC_PF 005C  
            ADC_RMS@ARRAY 0066                __pbssBANK1 00A0                ADC_RMS@ANC 005C  
              ADC_PF@temp 00D8                ADC_PF@step 00D5              ADC_RMS@index 005F  
              ADC_RMS@max 0067                ADC_RMS@min 0069                __pmaintext 0A8F  
           floatTostr@num 002E             floatTostr@txt 0030      __end_of_Button_Press 0A63  
                 ?___wmul 0020                __pintentry 0004                   _ADC_RMS 0D61  
               ?___awtoft 0028                 ?___ftpack 0020                 ?___lbtoft 0028  
               ?___lwtoft 0028                   _A_VALUE 00A4                   _GO_DONE 00F9  
            ??_UART_Write 0023                   _PF_FLAG 00AA                   _F_VALUE 00EB  
                 _PF_SIGN 0074                   _TIME_MS 00A0       __size_of_Init_Setup 0020  
         __size_of_ADC_PF 04D8                __stringtab 07E1                _floatTostr 0E9F  
                 _V_VALUE 00A6                   _Measure 0DF7                   ___ftadd 0504  
                 ___ftdiv 0F49           __size_of___wmul 0023        __end_of_UART_Write 0A8F  
                 ___ftmul 070F                   ___fttol 0CD3                   ___lwdiv 0B21  
                 ___lwmod 0AED                ??___awtoft 002B                ??___ftpack 0025  
              ??___lbtoft 002B                   __ptext1 060C                   __ptext2 0B5F  
                 __ptext3 0E9F                   __ptext4 0AED                   __ptext5 095A  
                 __ptext6 0DF7                   __ptext7 0C58                   __ptext8 09B4  
                 __ptext9 0D61                ??___lwtoft 002B              __size_of_AVG 007B  
             UART_Send@ch 005E              __size_of_ISR 0046                 _T1CONbits 0010  
           ?_Toggle_Relay 0075               UART_Write@i 0024                   clrloop0 091E  
    end_of_initialization 0029           ADC_PF@rad_angle 00DC                 _RCSTAbits 0017  
               _UART_GetC 0915                 _UART_Init 099C                 _UART_Send 0B5F  
               _UART_PutC 0925            UART_Write@data 0021            ??_Toggle_Relay 0020  
               _TRISCbits 0087         __size_of_ADC_Init 0017         __size_of_ADC_Read 0030  
             ?_floatTostr 002E            __end_of_ADC_PF 0504               ___ftdiv@exp 004C  
               _TXSTAbits 0016     __size_of_Button_Press 002B                 Measure@in 0070  
             ___ftmul@exp 0038              ??_Init_Setup 0020            __end_of___wmul 0A14  
              ?_UART_GetC 0075                ?_UART_Init 0075                ?_UART_Send 005C  
              ?_UART_PutC 0075       start_initialization 0013               __end_of_AVG 0CD3  
             __end_of_ISR 0BEA              _Button_Press 0A38                  ??_ADC_PF 005D  
      __end_of_Init_Setup 09F1                  ADC_RMS@i 006B                  AVG@ARRAY 0066  
                ??___wmul 0024                init_fetch0 0938               __pdataBANK1 00E3  
                ?_ADC_RMS 005C           _FREQUENCY_ARRAY 00AB       __size_of_floatTostr 00AA  
                AVG@index 005C         __size_of___awtoft 0024         __size_of___ftpack 006E  
       __size_of___lbtoft 001D               __pbssCOMMON 0070                 ___latbits 0001  
       __size_of___lwtoft 0017             __pcstackBANK0 0020             __pcstackBANK1 00CB  
             ADC_PF@ARRAY 00D2               ADC_PF@angle 00D3               ADC_PF@index 005C  
                ?_Measure 0075      __end_of_Toggle_Relay 096E          ___lwdiv@dividend 0022  
             ADC_RMS@read 006C               ADC_RMS@rate 005D                  ?___ftadd 002C  
                ?___ftdiv 003E                  ?___ftmul 002E                  ?___fttol 004E  
                ?___lwdiv 0020                  ?___lwmod 0028               ??_UART_GetC 0075  
             ??_UART_Init 0020               ??_UART_Send 005F               ??_UART_PutC 0020  
           UART_Send@F988 00E3                 __pstrings 07E1        _POWER_FACTOR_ARRAY 00B3  
           UART_Send@temp 005C                  _ADC_Init 096E                  _ADC_Read 0ABD  
             ADC_Read@ANC 0024             UART_PutC@data 0020          ___lwdiv@quotient 0026  
       interrupt_function 0004            ___wmul@product 0024                 clear_ram0 091D  
                _PIE1bits 008C                  _PIR1bits 000C                  _PF_VALUE 00A2  
        __size_of_ADC_RMS 0096                _ADCON0bits 001F               __stringbase 07F0  
       ___wmul@multiplier 0020                _ADC_PF$960 00CD              ??_floatTostr 0031  
Button_Press@switch_state 00A8                  _Send$961 00CB          __size_of_Measure 00A8  
              _CHAR_STATE 0071          __size_of___ftadd 0108          __size_of___ftdiv 00B7  
        __size_of___ftmul 00D2          __size_of___fttol 008E          __size_of___lwdiv 003E  
        __size_of___lwmod 0034                  ___awtoft 0A14                  ___ftpack 0BEA  
                ___lbtoft 09B4        __end_of__stringtab 07F1        __end_of_floatTostr 0F49  
                ___lwtoft 0985           ___lwdiv@divisor 0020           ___lwdiv@counter 0025  
                __ptext10 0ABD                  __ptext11 002C                  __ptext20 0BEA  
                __ptext12 09F1                  __ptext21 0948                  __ptext13 0985  
                __ptext22 0A63                  __ptext14 0B21                  __ptext23 0925  
                __ptext15 0CD3                  __ptext24 099C                  __ptext16 070F  
                __ptext25 09D1                  __ptext17 0F49                  __ptext26 096E  
                __ptext18 0504                  __ptext27 0A38                  __ptext19 0A14  
                __ptext28 0BA4                  __ptext29 0915              UART_Send@txt 0063  
   __size_of_Toggle_Relay 0014             __size_of_Init 0012             __size_of_Send 0103  
           __size_of_main 002E          Toggle_Relay@read 00A9                _INTCONbits 000B  
            _Toggle_Relay 095A                  init_ram0 093C         Button_Press@input 0022  
                intlevel1 0000          ADC_PF@freq_clock 00D0          ___lwmod@dividend 002A  
               stringcode 07EB           ___lwmod@divisor 0028           ___lwmod@counter 002D  
                stringdir 07EB                  stringtab 07E1                _UART_Write 0A63  
           _CURRENT_ARRAY 00BB  
