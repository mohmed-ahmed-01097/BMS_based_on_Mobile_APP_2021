

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Apr 05 14:04:38 2021

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F688
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2
    46                           	psect	intentry,global,class=CODE,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	dabs	1,0x7E,2
    49  0000                     
    50                           ; Version 1.41
    51                           ; Generated 25/01/2017 GMT
    52                           ; 
    53                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    54                           ; All rights reserved.
    55                           ; 
    56                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    57                           ; 
    58                           ; Redistribution and use in source and binary forms, with or without modification, are
    59                           ; permitted provided that the following conditions are met:
    60                           ; 
    61                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    62                           ;        conditions and the following disclaimer.
    63                           ; 
    64                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    65                           ;        of conditions and the following disclaimer in the documentation and/or other
    66                           ;        materials provided with the distribution.
    67                           ; 
    68                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    69                           ;        software without specific prior written permission.
    70                           ; 
    71                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    72                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    73                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    74                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    75                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    76                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    77                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    78                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    79                           ; 
    80                           ; 
    81                           ; Code-generator required, PIC16F688 Definitions
    82                           ; 
    83                           ; SFR Addresses
    84  0000                     	;# 
    85  0001                     	;# 
    86  0002                     	;# 
    87  0003                     	;# 
    88  0004                     	;# 
    89  0005                     	;# 
    90  0007                     	;# 
    91  000A                     	;# 
    92  000B                     	;# 
    93  000C                     	;# 
    94  000E                     	;# 
    95  000E                     	;# 
    96  000F                     	;# 
    97  0010                     	;# 
    98  0011                     	;# 
    99  0012                     	;# 
   100  0013                     	;# 
   101  0014                     	;# 
   102  0015                     	;# 
   103  0016                     	;# 
   104  0017                     	;# 
   105  0018                     	;# 
   106  0019                     	;# 
   107  001A                     	;# 
   108  001E                     	;# 
   109  001F                     	;# 
   110  0081                     	;# 
   111  0085                     	;# 
   112  0087                     	;# 
   113  008C                     	;# 
   114  008E                     	;# 
   115  008F                     	;# 
   116  0090                     	;# 
   117  0091                     	;# 
   118  0095                     	;# 
   119  0095                     	;# 
   120  0096                     	;# 
   121  0096                     	;# 
   122  0097                     	;# 
   123  0098                     	;# 
   124  0099                     	;# 
   125  009A                     	;# 
   126  009A                     	;# 
   127  009B                     	;# 
   128  009C                     	;# 
   129  009D                     	;# 
   130  009E                     	;# 
   131  009F                     	;# 
   132  0000                     	;# 
   133  0001                     	;# 
   134  0002                     	;# 
   135  0003                     	;# 
   136  0004                     	;# 
   137  0005                     	;# 
   138  0007                     	;# 
   139  000A                     	;# 
   140  000B                     	;# 
   141  000C                     	;# 
   142  000E                     	;# 
   143  000E                     	;# 
   144  000F                     	;# 
   145  0010                     	;# 
   146  0011                     	;# 
   147  0012                     	;# 
   148  0013                     	;# 
   149  0014                     	;# 
   150  0015                     	;# 
   151  0016                     	;# 
   152  0017                     	;# 
   153  0018                     	;# 
   154  0019                     	;# 
   155  001A                     	;# 
   156  001E                     	;# 
   157  001F                     	;# 
   158  0081                     	;# 
   159  0085                     	;# 
   160  0087                     	;# 
   161  008C                     	;# 
   162  008E                     	;# 
   163  008F                     	;# 
   164  0090                     	;# 
   165  0091                     	;# 
   166  0095                     	;# 
   167  0095                     	;# 
   168  0096                     	;# 
   169  0096                     	;# 
   170  0097                     	;# 
   171  0098                     	;# 
   172  0099                     	;# 
   173  009A                     	;# 
   174  009A                     	;# 
   175  009B                     	;# 
   176  009C                     	;# 
   177  009D                     	;# 
   178  009E                     	;# 
   179  009F                     	;# 
   180  0000                     	;# 
   181  0001                     	;# 
   182  0002                     	;# 
   183  0003                     	;# 
   184  0004                     	;# 
   185  0005                     	;# 
   186  0007                     	;# 
   187  000A                     	;# 
   188  000B                     	;# 
   189  000C                     	;# 
   190  000E                     	;# 
   191  000E                     	;# 
   192  000F                     	;# 
   193  0010                     	;# 
   194  0011                     	;# 
   195  0012                     	;# 
   196  0013                     	;# 
   197  0014                     	;# 
   198  0015                     	;# 
   199  0016                     	;# 
   200  0017                     	;# 
   201  0018                     	;# 
   202  0019                     	;# 
   203  001A                     	;# 
   204  001E                     	;# 
   205  001F                     	;# 
   206  0081                     	;# 
   207  0085                     	;# 
   208  0087                     	;# 
   209  008C                     	;# 
   210  008E                     	;# 
   211  008F                     	;# 
   212  0090                     	;# 
   213  0091                     	;# 
   214  0095                     	;# 
   215  0095                     	;# 
   216  0096                     	;# 
   217  0096                     	;# 
   218  0097                     	;# 
   219  0098                     	;# 
   220  0099                     	;# 
   221  009A                     	;# 
   222  009A                     	;# 
   223  009B                     	;# 
   224  009C                     	;# 
   225  009D                     	;# 
   226  009E                     	;# 
   227  009F                     	;# 
   228  0000                     	;# 
   229  0001                     	;# 
   230  0002                     	;# 
   231  0003                     	;# 
   232  0004                     	;# 
   233  0005                     	;# 
   234  0007                     	;# 
   235  000A                     	;# 
   236  000B                     	;# 
   237  000C                     	;# 
   238  000E                     	;# 
   239  000E                     	;# 
   240  000F                     	;# 
   241  0010                     	;# 
   242  0011                     	;# 
   243  0012                     	;# 
   244  0013                     	;# 
   245  0014                     	;# 
   246  0015                     	;# 
   247  0016                     	;# 
   248  0017                     	;# 
   249  0018                     	;# 
   250  0019                     	;# 
   251  001A                     	;# 
   252  001E                     	;# 
   253  001F                     	;# 
   254  0081                     	;# 
   255  0085                     	;# 
   256  0087                     	;# 
   257  008C                     	;# 
   258  008E                     	;# 
   259  008F                     	;# 
   260  0090                     	;# 
   261  0091                     	;# 
   262  0095                     	;# 
   263  0095                     	;# 
   264  0096                     	;# 
   265  0096                     	;# 
   266  0097                     	;# 
   267  0098                     	;# 
   268  0099                     	;# 
   269  009A                     	;# 
   270  009A                     	;# 
   271  009B                     	;# 
   272  009C                     	;# 
   273  009D                     	;# 
   274  009E                     	;# 
   275  009F                     	;# 
   276                           
   277                           	psect	idataBANK1
   278  09D8                     __pidataBANK1:	
   279                           
   280                           ;initializer for UART_Send@F988
   281  09D8  3430               	retlw	48
   282  09D9  3430               	retlw	48
   283  09DA  3430               	retlw	48
   284  09DB  3430               	retlw	48
   285  09DC  3430               	retlw	48
   286  09DD  3430               	retlw	48
   287  09DE  3430               	retlw	48
   288  09DF  3400               	retlw	0
   289                           
   290                           ;initializer for _F_VALUE
   291  09E0  3432               	retlw	50
   292  09E1  3400               	retlw	0
   293  0015                     _TXREG	set	21
   294  0014                     _RCREG	set	20
   295  0017                     _RCSTAbits	set	23
   296  0016                     _TXSTAbits	set	22
   297  0013                     _SPBRG	set	19
   298  000C                     _PIR1bits	set	12
   299  0001                     _TMR0	set	1
   300  000B                     _INTCONbits	set	11
   301  0007                     _PORTC	set	7
   302  0010                     _T1CONbits	set	16
   303  000E                     _TMR1L	set	14
   304  000F                     _TMR1H	set	15
   305  001F                     _ADCON0bits	set	31
   306  001E                     _ADRESH	set	30
   307  001F                     _ADCON0	set	31
   308  0019                     _CMCON0	set	25
   309  0061                     _TXIF	set	97
   310  00BC                     _CREN	set	188
   311  00B9                     _OERR	set	185
   312  00F9                     _GO_DONE	set	249
   313  008C                     _PIE1bits	set	140
   314  0087                     _TRISCbits	set	135
   315  0081                     _OPTION_REGbits	set	129
   316  0087                     _TRISC	set	135
   317  0085                     _TRISA	set	133
   318  009E                     _ADRESL	set	158
   319  009F                     _ADCON1	set	159
   320  0091                     _ANSEL	set	145
   321                           
   322                           	psect	strings
   323  0800                     __pstrings:	
   324  0800                     stringtab:	
   325  0800                     __stringtab:	
   326                           
   327                           ;	String table - string pointers are 1 byte each
   328  0800  1BFF               	btfsc	btemp+1,7
   329  0801  280A               	ljmp	stringcode
   330  0802  1383               	bcf	3,7
   331  0803  187F               	btfsc	btemp+1,0
   332  0804  1783               	bsf	3,7
   333  0805  0800               	movf	0,w
   334  0806  0A84               	incf	4,f
   335  0807  1903               	skipnz
   336  0808  0AFF               	incf	btemp+1,f
   337  0809  0008               	return
   338  080A                     stringcode:	
   339  080A                     stringdir:	
   340  080A  3008               	movlw	high stringdir
   341  080B  008A               	movwf	10
   342  080C  0804               	movf	4,w
   343  080D  0A84               	incf	4,f
   344  080E  0782               	addwf	2,f
   345  080F                     __stringbase:	
   346  080F  3400               	retlw	0
   347  0810                     __end_of__stringtab:	
   348  0810                     STR_1:	
   349  0810  3457               	retlw	87	;'W'
   350  0811  3445               	retlw	69	;'E'
   351  0812  344C               	retlw	76	;'L'
   352  0813  3443               	retlw	67	;'C'
   353  0814  344F               	retlw	79	;'O'
   354  0815  344D               	retlw	77	;'M'
   355  0816  3445               	retlw	69	;'E'
   356  0817  3420               	retlw	32	;' '
   357  0818  344D               	retlw	77	;'M'
   358  0819  3441               	retlw	65	;'A'
   359  081A  3441               	retlw	65	;'A'
   360  081B  344D               	retlw	77	;'M'
   361  081C  3400               	retlw	0
   362  0810                     
   363                           ; #config settings
   364  0000                     
   365                           	psect	cinit
   366  0013                     start_initialization:	
   367  0013                     __initialization:	
   368                           
   369                           ; Initialize objects allocated to BANK1
   370  0013  1383               	bcf	3,7	;select IRP bank0
   371  0014  30EB               	movlw	low (__pdataBANK1+10)
   372  0015  00FD               	movwf	btemp+-1
   373  0016  3009               	movlw	high __pidataBANK1
   374  0017  00FE               	movwf	btemp
   375  0018  30D8               	movlw	low __pidataBANK1
   376  0019  00FF               	movwf	btemp+1
   377  001A  30E1               	movlw	low __pdataBANK1
   378  001B  0084               	movwf	4
   379  001C  158A  21F5  118A   	fcall	init_ram0
   380                           
   381                           ; Clear objects allocated to BANK1
   382  001F  30A0               	movlw	low __pbssBANK1
   383  0020  0084               	movwf	4
   384  0021  30CD               	movlw	low (__pbssBANK1+45)
   385  0022  158A  21BD         	fcall	clear_ram0
   386                           
   387                           ; Clear objects allocated to COMMON
   388  0024  01F7               	clrf	__pbssCOMMON& (0+127)
   389  0025  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   390  0026  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   391  0027                     end_of_initialization:	
   392                           ;End of C runtime variable initialization code
   393                           
   394  0027                     __end_of__initialization:	
   395  0027  0183               	clrf	3
   396  0028  158A  2B80         	ljmp	_main	;jump to C main() function
   397                           
   398                           	psect	bssCOMMON
   399  0077                     __pbssCOMMON:	
   400  0077                     Button_Press@switch_state:	
   401  0077                     	ds	1
   402  0078                     Toggle_Relay@read:	
   403  0078                     	ds	1
   404  0079                     _TIME_S:	
   405  0079                     	ds	1
   406                           
   407                           	psect	bssBANK1
   408  00A0                     __pbssBANK1:	
   409  00A0                     _TIME_MS:	
   410  00A0                     	ds	2
   411  00A2                     _PF_VALUE:	
   412  00A2                     	ds	2
   413  00A4                     _A_VALUE:	
   414  00A4                     	ds	2
   415  00A6                     _V_VALUE:	
   416  00A6                     	ds	2
   417  00A8                     Measure@in:	
   418  00A8                     	ds	1
   419  00A9                     _CHAR_STATE:	
   420  00A9                     	ds	1
   421  00AA                     _ZERO_CROSS:	
   422  00AA                     	ds	1
   423  00AB                     _PF_SIGN:	
   424  00AB                     	ds	1
   425  00AC                     _PF_FLAG:	
   426  00AC                     	ds	1
   427  00AD                     _FREQUENCY_ARRAY:	
   428  00AD                     	ds	8
   429  00B5                     _POWER_FACTOR_ARRAY:	
   430  00B5                     	ds	8
   431  00BD                     _CURRENT_ARRAY:	
   432  00BD                     	ds	8
   433  00C5                     _VOLT_ARRAY:	
   434  00C5                     	ds	8
   435                           
   436                           	psect	dataBANK1
   437  00E1                     __pdataBANK1:	
   438  00E1                     UART_Send@F988:	
   439  00E1                     	ds	8
   440  00E9                     _F_VALUE:	
   441  00E9                     	ds	2
   442                           
   443                           	psect	inittext
   444  09F1                     init_fetch0:	
   445                           ;	Called with low address in FSR and high address in W
   446                           
   447  09F1  087E               	movf	126,w
   448  09F2  008A               	movwf	10
   449  09F3  087F               	movf	127,w
   450  09F4  0082               	movwf	2
   451  09F5                     init_ram0:	
   452                           ;Called with:
   453                           ;	high address of idata address in btemp 
   454                           ;	low address of idata address in btemp+1 
   455                           ;	low address of data in FSR
   456                           ;	high address + 1 of data in btemp-1
   457                           
   458  09F5  21F1  158A         	fcall	init_fetch0
   459  09F7  0080               	movwf	0
   460  09F8  0A84               	incf	4,f
   461  09F9  0804               	movf	4,w
   462  09FA  067D               	xorwf	125,w
   463  09FB  1903               	btfsc	3,2
   464  09FC  3400               	retlw	0
   465  09FD  0AFF               	incf	127,f
   466  09FE  1903               	btfsc	3,2
   467  09FF  0AFE               	incf	126,f
   468  0A00  29F5               	goto	init_ram0
   469                           
   470                           	psect	clrtext
   471  09BD                     clear_ram0:	
   472                           ;	Called with FSR containing the base address, and
   473                           ;	W with the last address+1
   474                           
   475  09BD  0064               	clrwdt	;clear the watchdog before getting into this loop
   476  09BE                     clrloop0:	
   477  09BE  0180               	clrf	0	;clear RAM location pointed to by FSR
   478  09BF  0A84               	incf	4,f	;increment pointer
   479  09C0  0604               	xorwf	4,w	;XOR with final address
   480  09C1  1903               	btfsc	3,2	;have we reached the end yet?
   481  09C2  3400               	retlw	0	;all done for this memory range, return
   482  09C3  0604               	xorwf	4,w	;XOR again to restore value
   483  09C4  29BE               	goto	clrloop0	;do the next byte
   484                           
   485                           	psect	cstackBANK1
   486  00CD                     __pcstackBANK1:	
   487  00CD                     ADC_PF@ARRAY:	
   488                           
   489                           ; 1 bytes @ 0x0
   490  00CD                     	ds	1
   491  00CE                     _ADC_PF$960:	
   492                           
   493                           ; 3 bytes @ 0x1
   494  00CE                     	ds	3
   495  00D1                     ADC_PF@step:	
   496                           
   497                           ; 3 bytes @ 0x4
   498  00D1                     	ds	3
   499  00D4                     ADC_PF@temp:	
   500                           
   501                           ; 3 bytes @ 0x7
   502  00D4                     	ds	3
   503  00D7                     ADC_PF@angle:	
   504                           
   505                           ; 2 bytes @ 0xA
   506  00D7                     	ds	2
   507  00D9                     ADC_PF@i:	
   508                           
   509                           ; 1 bytes @ 0xC
   510  00D9                     	ds	1
   511  00DA                     ADC_PF@rad_angle:	
   512                           
   513                           ; 3 bytes @ 0xD
   514  00DA                     	ds	3
   515  00DD                     _Measure$304:	
   516                           
   517                           ; 4 bytes @ 0x10
   518  00DD                     	ds	4
   519                           
   520                           	psect	cstackCOMMON
   521  0070                     __pcstackCOMMON:	
   522  0070                     ?_Init:	
   523  0070                     ?_Button_Press:	
   524                           ; 1 bytes @ 0x0
   525                           
   526  0070                     ?_Measure:	
   527                           ; 1 bytes @ 0x0
   528                           
   529  0070                     ?_Send:	
   530                           ; 1 bytes @ 0x0
   531                           
   532  0070                     ?_UART_GetC:	
   533                           ; 1 bytes @ 0x0
   534                           
   535  0070                     ??_UART_GetC:	
   536                           ; 1 bytes @ 0x0
   537                           
   538  0070                     ?_UART_Init:	
   539                           ; 1 bytes @ 0x0
   540                           
   541  0070                     ?_Init_Setup:	
   542                           ; 1 bytes @ 0x0
   543                           
   544  0070                     ?_Toggle_Relay:	
   545                           ; 1 bytes @ 0x0
   546                           
   547  0070                     ?_ADC_Init:	
   548                           ; 1 bytes @ 0x0
   549                           
   550  0070                     ?_main:	
   551                           ; 1 bytes @ 0x0
   552                           
   553  0070                     ?_ISR:	
   554                           ; 1 bytes @ 0x0
   555                           
   556  0070                     ??_ISR:	
   557                           ; 1 bytes @ 0x0
   558                           
   559  0070                     ?_UART_PutC:	
   560                           ; 1 bytes @ 0x0
   561                           
   562                           
   563                           ; 1 bytes @ 0x0
   564  0070                     	ds	7
   565                           
   566                           	psect	cstackBANK0
   567  0020                     __pcstackBANK0:	
   568  0020                     ?___ftge:	
   569  0020                     ??_Button_Press:	
   570                           ; 1 bit 
   571                           
   572  0020                     ??_UART_Init:	
   573                           ; 1 bytes @ 0x0
   574                           
   575  0020                     ??_Init_Setup:	
   576                           ; 1 bytes @ 0x0
   577                           
   578  0020                     ??_Toggle_Relay:	
   579                           ; 1 bytes @ 0x0
   580                           
   581  0020                     ??_ADC_Init:	
   582                           ; 1 bytes @ 0x0
   583                           
   584  0020                     ??_UART_PutC:	
   585                           ; 1 bytes @ 0x0
   586                           
   587  0020                     ?_ADC_Read:	
   588                           ; 1 bytes @ 0x0
   589                           
   590  0020                     ?___wmul:	
   591                           ; 2 bytes @ 0x0
   592                           
   593  0020                     ?___lwdiv:	
   594                           ; 2 bytes @ 0x0
   595                           
   596  0020                     ?___ftpack:	
   597                           ; 2 bytes @ 0x0
   598                           
   599  0020                     ?___ftneg:	
   600                           ; 3 bytes @ 0x0
   601                           
   602  0020                     ?___lldiv:	
   603                           ; 3 bytes @ 0x0
   604                           
   605  0020                     UART_PutC@data:	
   606                           ; 4 bytes @ 0x0
   607                           
   608  0020                     ___wmul@multiplier:	
   609                           ; 1 bytes @ 0x0
   610                           
   611  0020                     ___lwdiv@divisor:	
   612                           ; 2 bytes @ 0x0
   613                           
   614  0020                     ___ftpack@arg:	
   615                           ; 2 bytes @ 0x0
   616                           
   617  0020                     ___ftge@ff1:	
   618                           ; 3 bytes @ 0x0
   619                           
   620  0020                     ___ftneg@f1:	
   621                           ; 3 bytes @ 0x0
   622                           
   623  0020                     ___lldiv@divisor:	
   624                           ; 3 bytes @ 0x0
   625                           
   626                           
   627                           ; 4 bytes @ 0x0
   628  0020                     	ds	1
   629  0021                     ?_UART_Write:	
   630  0021                     UART_Write@data:	
   631                           ; 1 bytes @ 0x1
   632                           
   633                           
   634                           ; 2 bytes @ 0x1
   635  0021                     	ds	1
   636  0022                     ??_ADC_Read:	
   637  0022                     Button_Press@input:	
   638                           ; 1 bytes @ 0x2
   639                           
   640  0022                     ___wmul@multiplicand:	
   641                           ; 1 bytes @ 0x2
   642                           
   643  0022                     ___lwdiv@dividend:	
   644                           ; 2 bytes @ 0x2
   645                           
   646                           
   647                           ; 2 bytes @ 0x2
   648  0022                     	ds	1
   649  0023                     ??_UART_Write:	
   650  0023                     ??___ftneg:	
   651                           ; 1 bytes @ 0x3
   652                           
   653  0023                     ___ftpack@exp:	
   654                           ; 1 bytes @ 0x3
   655                           
   656  0023                     ___ftge@ff2:	
   657                           ; 1 bytes @ 0x3
   658                           
   659                           
   660                           ; 3 bytes @ 0x3
   661  0023                     	ds	1
   662  0024                     ??___wmul:	
   663  0024                     ??___lwdiv:	
   664                           ; 1 bytes @ 0x4
   665                           
   666  0024                     ADC_Read@ANC:	
   667                           ; 1 bytes @ 0x4
   668                           
   669  0024                     UART_Write@i:	
   670                           ; 1 bytes @ 0x4
   671                           
   672  0024                     ___ftpack@sign:	
   673                           ; 1 bytes @ 0x4
   674                           
   675  0024                     ___wmul@product:	
   676                           ; 1 bytes @ 0x4
   677                           
   678  0024                     ___lldiv@dividend:	
   679                           ; 2 bytes @ 0x4
   680                           
   681                           
   682                           ; 4 bytes @ 0x4
   683  0024                     	ds	1
   684  0025                     ??_Init:	
   685  0025                     ??___ftpack:	
   686                           ; 1 bytes @ 0x5
   687                           
   688  0025                     ___lwdiv@quotient:	
   689                           ; 1 bytes @ 0x5
   690                           
   691                           
   692                           ; 2 bytes @ 0x5
   693  0025                     	ds	1
   694  0026                     ??___ftge:	
   695                           
   696                           ; 1 bytes @ 0x6
   697  0026                     	ds	1
   698  0027                     ___lwdiv@counter:	
   699                           
   700                           ; 1 bytes @ 0x7
   701  0027                     	ds	1
   702  0028                     ??___lldiv:	
   703  0028                     ?___lwmod:	
   704                           ; 1 bytes @ 0x8
   705                           
   706  0028                     ?___awtoft:	
   707                           ; 2 bytes @ 0x8
   708                           
   709  0028                     ?___ftadd:	
   710                           ; 3 bytes @ 0x8
   711                           
   712  0028                     ?___lwtoft:	
   713                           ; 3 bytes @ 0x8
   714                           
   715  0028                     ___awtoft@c:	
   716                           ; 3 bytes @ 0x8
   717                           
   718  0028                     ___lwmod@divisor:	
   719                           ; 2 bytes @ 0x8
   720                           
   721  0028                     ___lwtoft@c:	
   722                           ; 2 bytes @ 0x8
   723                           
   724  0028                     ___ftadd@f1:	
   725                           ; 2 bytes @ 0x8
   726                           
   727                           
   728                           ; 3 bytes @ 0x8
   729  0028                     	ds	1
   730  0029                     ___lldiv@quotient:	
   731                           
   732                           ; 4 bytes @ 0x9
   733  0029                     	ds	1
   734  002A                     ___lwmod@dividend:	
   735                           
   736                           ; 2 bytes @ 0xA
   737  002A                     	ds	1
   738  002B                     ??___awtoft:	
   739  002B                     ??___lwtoft:	
   740                           ; 1 bytes @ 0xB
   741                           
   742  002B                     ___ftadd@f2:	
   743                           ; 1 bytes @ 0xB
   744                           
   745                           
   746                           ; 3 bytes @ 0xB
   747  002B                     	ds	1
   748  002C                     ??___lwmod:	
   749                           
   750                           ; 1 bytes @ 0xC
   751  002C                     	ds	1
   752  002D                     ___awtoft@sign:	
   753  002D                     ___lldiv@counter:	
   754                           ; 1 bytes @ 0xD
   755                           
   756  002D                     ___lwmod@counter:	
   757                           ; 1 bytes @ 0xD
   758                           
   759                           
   760                           ; 1 bytes @ 0xD
   761  002D                     	ds	1
   762  002E                     ?_floatTostr:	
   763  002E                     ??___ftadd:	
   764                           ; 1 bytes @ 0xE
   765                           
   766  002E                     ?_AVG:	
   767                           ; 1 bytes @ 0xE
   768                           
   769  002E                     ?___ftmul:	
   770                           ; 2 bytes @ 0xE
   771                           
   772  002E                     AVG@index:	
   773                           ; 3 bytes @ 0xE
   774                           
   775  002E                     floatTostr@num:	
   776                           ; 1 bytes @ 0xE
   777                           
   778  002E                     ___ftmul@f1:	
   779                           ; 2 bytes @ 0xE
   780                           
   781                           
   782                           ; 3 bytes @ 0xE
   783  002E                     	ds	2
   784  0030                     ??_AVG:	
   785  0030                     floatTostr@txt:	
   786                           ; 1 bytes @ 0x10
   787                           
   788                           
   789                           ; 1 bytes @ 0x10
   790  0030                     	ds	1
   791  0031                     ??_floatTostr:	
   792  0031                     ___ftmul@f2:	
   793                           ; 1 bytes @ 0x11
   794                           
   795                           
   796                           ; 3 bytes @ 0x11
   797  0031                     	ds	1
   798  0032                     ?_UART_Send:	
   799  0032                     ___ftadd@sign:	
   800                           ; 1 bytes @ 0x12
   801                           
   802  0032                     UART_Send@temp:	
   803                           ; 1 bytes @ 0x12
   804                           
   805                           
   806                           ; 2 bytes @ 0x12
   807  0032                     	ds	1
   808  0033                     ___ftadd@exp2:	
   809                           
   810                           ; 1 bytes @ 0x13
   811  0033                     	ds	1
   812  0034                     ??___ftmul:	
   813  0034                     UART_Send@ch:	
   814                           ; 1 bytes @ 0x14
   815                           
   816  0034                     ___ftadd@exp1:	
   817                           ; 1 bytes @ 0x14
   818                           
   819                           
   820                           ; 1 bytes @ 0x14
   821  0034                     	ds	1
   822  0035                     ??_UART_Send:	
   823                           
   824                           ; 1 bytes @ 0x15
   825  0035                     	ds	3
   826  0038                     ___ftmul@exp:	
   827  0038                     AVG@ret:	
   828                           ; 1 bytes @ 0x18
   829                           
   830                           
   831                           ; 4 bytes @ 0x18
   832  0038                     	ds	1
   833  0039                     ___ftmul@f3_as_product:	
   834  0039                     UART_Send@txt:	
   835                           ; 3 bytes @ 0x19
   836                           
   837                           
   838                           ; 8 bytes @ 0x19
   839  0039                     	ds	3
   840  003C                     AVG@avg:	
   841  003C                     ___ftmul@cntr:	
   842                           ; 1 bytes @ 0x1C
   843                           
   844                           
   845                           ; 1 bytes @ 0x1C
   846  003C                     	ds	1
   847  003D                     AVG@ARRAY:	
   848  003D                     ___ftmul@sign:	
   849                           ; 1 bytes @ 0x1D
   850                           
   851                           
   852                           ; 1 bytes @ 0x1D
   853  003D                     	ds	1
   854  003E                     ?___ftdiv:	
   855  003E                     AVG@i:	
   856                           ; 3 bytes @ 0x1E
   857                           
   858  003E                     ___ftdiv@f2:	
   859                           ; 1 bytes @ 0x1E
   860                           
   861                           
   862                           ; 3 bytes @ 0x1E
   863  003E                     	ds	3
   864  0041                     ??_Send:	
   865  0041                     ___ftdiv@f1:	
   866                           ; 1 bytes @ 0x21
   867                           
   868                           
   869                           ; 3 bytes @ 0x21
   870  0041                     	ds	3
   871  0044                     ??___ftdiv:	
   872                           
   873                           ; 1 bytes @ 0x24
   874  0044                     	ds	4
   875  0048                     ___ftdiv@cntr:	
   876                           
   877                           ; 1 bytes @ 0x28
   878  0048                     	ds	1
   879  0049                     ___ftdiv@f3:	
   880                           
   881                           ; 3 bytes @ 0x29
   882  0049                     	ds	3
   883  004C                     ___ftdiv@exp:	
   884                           
   885                           ; 1 bytes @ 0x2C
   886  004C                     	ds	1
   887  004D                     ___ftdiv@sign:	
   888                           
   889                           ; 1 bytes @ 0x2D
   890  004D                     	ds	1
   891  004E                     ?___fttol:	
   892  004E                     ___fttol@f1:	
   893                           ; 4 bytes @ 0x2E
   894                           
   895                           
   896                           ; 3 bytes @ 0x2E
   897  004E                     	ds	4
   898  0052                     ??___fttol:	
   899                           
   900                           ; 1 bytes @ 0x32
   901  0052                     	ds	4
   902  0056                     ___fttol@sign1:	
   903                           
   904                           ; 1 bytes @ 0x36
   905  0056                     	ds	1
   906  0057                     ___fttol@lval:	
   907                           
   908                           ; 4 bytes @ 0x37
   909  0057                     	ds	4
   910  005B                     ___fttol@exp1:	
   911                           
   912                           ; 1 bytes @ 0x3B
   913  005B                     	ds	1
   914  005C                     ?_ADC_RMS:	
   915  005C                     ?_ADC_PF:	
   916                           ; 1 bytes @ 0x3C
   917                           
   918  005C                     ADC_RMS@ANC:	
   919                           ; 1 bytes @ 0x3C
   920                           
   921  005C                     ADC_PF@index:	
   922                           ; 1 bytes @ 0x3C
   923                           
   924                           
   925                           ; 1 bytes @ 0x3C
   926  005C                     	ds	1
   927  005D                     ??_ADC_PF:	
   928  005D                     ADC_RMS@rate:	
   929                           ; 1 bytes @ 0x3D
   930                           
   931                           
   932                           ; 2 bytes @ 0x3D
   933  005D                     	ds	2
   934  005F                     ADC_RMS@index:	
   935                           
   936                           ; 1 bytes @ 0x3F
   937  005F                     	ds	1
   938  0060                     ??_ADC_RMS:	
   939                           
   940                           ; 1 bytes @ 0x40
   941  0060                     	ds	6
   942  0066                     ADC_RMS@i:	
   943                           
   944                           ; 1 bytes @ 0x46
   945  0066                     	ds	1
   946  0067                     ADC_RMS@ARRAY:	
   947                           
   948                           ; 1 bytes @ 0x47
   949  0067                     	ds	1
   950  0068                     ADC_RMS@max:	
   951                           
   952                           ; 2 bytes @ 0x48
   953  0068                     	ds	2
   954  006A                     ADC_RMS@min:	
   955                           
   956                           ; 2 bytes @ 0x4A
   957  006A                     	ds	2
   958  006C                     ADC_RMS@read:	
   959                           
   960                           ; 2 bytes @ 0x4C
   961  006C                     	ds	2
   962  006E                     ??_Measure:	
   963                           
   964                           ; 1 bytes @ 0x4E
   965  006E                     	ds	1
   966  006F                     ??_main:	
   967                           
   968                           ; 1 bytes @ 0x4F
   969  006F                     	ds	1
   970                           
   971                           	psect	maintext
   972  0B80                     __pmaintext:	
   973 ;;
   974 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   975 ;;
   976 ;; *************** function _main *****************
   977 ;; Defined at:
   978 ;;		line 27 in file "main.c"
   979 ;; Parameters:    Size  Location     Type
   980 ;;		None
   981 ;; Auto vars:     Size  Location     Type
   982 ;;		None
   983 ;; Return value:  Size  Location     Type
   984 ;;                  1    wreg      void 
   985 ;; Registers used:
   986 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   987 ;; Tracked objects:
   988 ;;		On entry : B00/0
   989 ;;		On exit  : 0/0
   990 ;;		Unchanged: 0/0
   991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   992 ;;      Params:         0       0       0       0
   993 ;;      Locals:         0       0       0       0
   994 ;;      Temps:          0       1       0       0
   995 ;;      Totals:         0       1       0       0
   996 ;;Total ram usage:        1 bytes
   997 ;; Hardware stack levels required when called:    6
   998 ;; This function calls:
   999 ;;		_Button_Press
  1000 ;;		_Init
  1001 ;;		_Measure
  1002 ;;		_Send
  1003 ;;		_UART_Write
  1004 ;;		___lwmod
  1005 ;; This function is called by:
  1006 ;;		Startup code after reset
  1007 ;; This function uses a non-reentrant model
  1008 ;;
  1009                           
  1010                           
  1011                           ;psect for function _main
  1012  0B80                     _main:	
  1013                           
  1014                           ;main.c: 28: Init();
  1015                           
  1016                           ;incstack = 0
  1017                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1018  0B80  158A  2201  158A   	fcall	_Init
  1019  0B83                     l2486:	
  1020                           ;main.c: 29: while(1){
  1021                           
  1022                           
  1023                           ;main.c: 30: CHAR_STATE = Button_Press();
  1024  0B83  158A  2279  158A   	fcall	_Button_Press
  1025  0B86  1283               	bcf	3,5	;RP0=0, select bank0
  1026  0B87  1303               	bcf	3,6	;RP1=0, select bank0
  1027  0B88  00EF               	movwf	??_main
  1028  0B89  086F               	movf	??_main,w
  1029  0B8A  1683               	bsf	3,5	;RP0=1, select bank1
  1030  0B8B  1303               	bcf	3,6	;RP1=0, select bank1
  1031  0B8C  00A9               	movwf	_CHAR_STATE^(0+128)
  1032                           
  1033                           ;main.c: 31: if(TIME_MS%200==0)
  1034  0B8D  30C8               	movlw	200
  1035  0B8E  1283               	bcf	3,5	;RP0=0, select bank0
  1036  0B8F  1303               	bcf	3,6	;RP1=0, select bank0
  1037  0B90  00A8               	movwf	___lwmod@divisor
  1038  0B91  3000               	movlw	0
  1039  0B92  00A9               	movwf	___lwmod@divisor+1
  1040  0B93  1683               	bsf	3,5	;RP0=1, select bank1
  1041  0B94  1303               	bcf	3,6	;RP1=0, select bank1
  1042  0B95  0821               	movf	(_TIME_MS+1)^(0+128),w
  1043  0B96  1283               	bcf	3,5	;RP0=0, select bank0
  1044  0B97  1303               	bcf	3,6	;RP1=0, select bank0
  1045  0B98  00AB               	movwf	___lwmod@dividend+1
  1046  0B99  1683               	bsf	3,5	;RP0=1, select bank1
  1047  0B9A  1303               	bcf	3,6	;RP1=0, select bank1
  1048  0B9B  0820               	movf	_TIME_MS^(0+128),w
  1049  0B9C  1283               	bcf	3,5	;RP0=0, select bank0
  1050  0B9D  1303               	bcf	3,6	;RP1=0, select bank0
  1051  0B9E  00AA               	movwf	___lwmod@dividend
  1052  0B9F  158A  234C  158A   	fcall	___lwmod
  1053  0BA2  1283               	bcf	3,5	;RP0=0, select bank0
  1054  0BA3  1303               	bcf	3,6	;RP1=0, select bank0
  1055  0BA4  0828               	movf	?___lwmod,w
  1056  0BA5  0429               	iorwf	?___lwmod+1,w
  1057  0BA6  1D03               	btfss	3,2
  1058  0BA7  2BAB               	goto	l2492
  1059                           
  1060                           ;main.c: 32: Measure();
  1061  0BA8  118A  2663  158A   	fcall	_Measure
  1062  0BAB                     l2492:	
  1063                           
  1064                           ;main.c: 33: if(CHAR_STATE != 0){
  1065  0BAB  1683               	bsf	3,5	;RP0=1, select bank1
  1066  0BAC  1303               	bcf	3,6	;RP1=0, select bank1
  1067  0BAD  0829               	movf	_CHAR_STATE^(0+128),w
  1068  0BAE  1903               	btfsc	3,2
  1069  0BAF  2B83               	goto	l2486
  1070                           
  1071                           ;main.c: 34: UART_Write("WELCOME MAAM");
  1072  0BB0  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1073  0BB1  1283               	bcf	3,5	;RP0=0, select bank0
  1074  0BB2  1303               	bcf	3,6	;RP1=0, select bank0
  1075  0BB3  00A1               	movwf	UART_Write@data
  1076  0BB4  3080               	movlw	128
  1077  0BB5  00A2               	movwf	UART_Write@data+1
  1078  0BB6  158A  22BF  158A   	fcall	_UART_Write
  1079                           
  1080                           ;main.c: 35: Send();
  1081  0BB9  158A  26C5  158A   	fcall	_Send
  1082  0BBC  2B83               	goto	l2486
  1083  0BBD                     __end_of_main:	
  1084                           
  1085                           	psect	text1
  1086  0EC5                     __ptext1:	
  1087 ;; *************** function _Send *****************
  1088 ;; Defined at:
  1089 ;;		line 77 in file "main.c"
  1090 ;; Parameters:    Size  Location     Type
  1091 ;;		None
  1092 ;; Auto vars:     Size  Location     Type
  1093 ;;  i               1    0        unsigned char 
  1094 ;; Return value:  Size  Location     Type
  1095 ;;                  1    wreg      void 
  1096 ;; Registers used:
  1097 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1098 ;; Tracked objects:
  1099 ;;		On entry : 0/0
  1100 ;;		On exit  : 0/0
  1101 ;;		Unchanged: 0/0
  1102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1103 ;;      Params:         0       0       0       0
  1104 ;;      Locals:         0       0       0       0
  1105 ;;      Temps:          0       4       0       0
  1106 ;;      Totals:         0       4       0       0
  1107 ;;Total ram usage:        4 bytes
  1108 ;; Hardware stack levels used:    1
  1109 ;; Hardware stack levels required when called:    5
  1110 ;; This function calls:
  1111 ;;		_Toggle_Relay
  1112 ;;		_UART_Send
  1113 ;; This function is called by:
  1114 ;;		_main
  1115 ;; This function uses a non-reentrant model
  1116 ;;
  1117                           
  1118                           
  1119                           ;psect for function _Send
  1120  0EC5                     _Send:	
  1121                           
  1122                           ;main.c: 78: uint8_t i;
  1123                           ;main.c: 79: switch(CHAR_STATE){
  1124                           
  1125                           ;incstack = 0
  1126                           ; Regs used in _Send: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1127  0EC5  2F4B               	goto	l2482
  1128  0EC6                     l2470:	
  1129                           ;main.c: 80: case 'T':
  1130                           
  1131                           
  1132                           ;main.c: 81: Toggle_Relay();
  1133  0EC6  158A  21E2  158A   	fcall	_Toggle_Relay
  1134                           
  1135                           ;main.c: 82: UART_Send(((PORTC&0X08)>>3),'@' );
  1136  0EC9  1283               	bcf	3,5	;RP0=0, select bank0
  1137  0ECA  1303               	bcf	3,6	;RP1=0, select bank0
  1138  0ECB  0807               	movf	7,w	;volatile
  1139  0ECC  00C1               	movwf	??_Send
  1140  0ECD  3003               	movlw	3
  1141  0ECE                     u3075:	
  1142  0ECE  1003               	clrc
  1143  0ECF  0CC1               	rrf	??_Send,f
  1144  0ED0  3EFF               	addlw	-1
  1145  0ED1  1D03               	skipz
  1146  0ED2  2ECE               	goto	u3075
  1147  0ED3  0841               	movf	??_Send,w
  1148  0ED4  3901               	andlw	1
  1149  0ED5  00C2               	movwf	??_Send+1
  1150  0ED6  01C3               	clrf	??_Send+2
  1151  0ED7  0842               	movf	??_Send+1,w
  1152  0ED8  00B2               	movwf	UART_Send@temp
  1153  0ED9  0843               	movf	??_Send+2,w
  1154  0EDA  00B3               	movwf	UART_Send@temp+1
  1155  0EDB  3040               	movlw	64
  1156  0EDC  00C4               	movwf	??_Send+3
  1157  0EDD  0844               	movf	??_Send+3,w
  1158  0EDE  00B4               	movwf	UART_Send@ch
  1159  0EDF  158A  23FB         	fcall	_UART_Send
  1160                           
  1161                           ;main.c: 83: CHAR_STATE = 0;
  1162  0EE1  1683               	bsf	3,5	;RP0=1, select bank1
  1163  0EE2  1303               	bcf	3,6	;RP1=0, select bank1
  1164  0EE3  01A9               	clrf	_CHAR_STATE^(0+128)
  1165                           
  1166                           ;main.c: 84: break;
  1167  0EE4  0008               	return
  1168  0EE5                     l2476:	
  1169                           ;main.c: 85: case 'S':
  1170                           
  1171                           
  1172                           ;main.c: 86: UART_Send(F_VALUE ,'F' );
  1173  0EE5  086A               	movf	(_F_VALUE+1)^(0+128),w
  1174  0EE6  1283               	bcf	3,5	;RP0=0, select bank0
  1175  0EE7  1303               	bcf	3,6	;RP1=0, select bank0
  1176  0EE8  00B3               	movwf	UART_Send@temp+1
  1177  0EE9  1683               	bsf	3,5	;RP0=1, select bank1
  1178  0EEA  1303               	bcf	3,6	;RP1=0, select bank1
  1179  0EEB  0869               	movf	_F_VALUE^(0+128),w
  1180  0EEC  1283               	bcf	3,5	;RP0=0, select bank0
  1181  0EED  1303               	bcf	3,6	;RP1=0, select bank0
  1182  0EEE  00B2               	movwf	UART_Send@temp
  1183  0EEF  3046               	movlw	70
  1184  0EF0  00C1               	movwf	??_Send
  1185  0EF1  0841               	movf	??_Send,w
  1186  0EF2  00B4               	movwf	UART_Send@ch
  1187  0EF3  158A  23FB  158A   	fcall	_UART_Send
  1188                           
  1189                           ;main.c: 87: UART_Send(V_VALUE ,'V' );
  1190  0EF6  1683               	bsf	3,5	;RP0=1, select bank1
  1191  0EF7  1303               	bcf	3,6	;RP1=0, select bank1
  1192  0EF8  0827               	movf	(_V_VALUE+1)^(0+128),w
  1193  0EF9  1283               	bcf	3,5	;RP0=0, select bank0
  1194  0EFA  1303               	bcf	3,6	;RP1=0, select bank0
  1195  0EFB  00B3               	movwf	UART_Send@temp+1
  1196  0EFC  1683               	bsf	3,5	;RP0=1, select bank1
  1197  0EFD  1303               	bcf	3,6	;RP1=0, select bank1
  1198  0EFE  0826               	movf	_V_VALUE^(0+128),w
  1199  0EFF  1283               	bcf	3,5	;RP0=0, select bank0
  1200  0F00  1303               	bcf	3,6	;RP1=0, select bank0
  1201  0F01  00B2               	movwf	UART_Send@temp
  1202  0F02  3056               	movlw	86
  1203  0F03  00C1               	movwf	??_Send
  1204  0F04  0841               	movf	??_Send,w
  1205  0F05  00B4               	movwf	UART_Send@ch
  1206  0F06  158A  23FB  158A   	fcall	_UART_Send
  1207                           
  1208                           ;main.c: 88: UART_Send(A_VALUE ,'A' );
  1209  0F09  1683               	bsf	3,5	;RP0=1, select bank1
  1210  0F0A  1303               	bcf	3,6	;RP1=0, select bank1
  1211  0F0B  0825               	movf	(_A_VALUE+1)^(0+128),w
  1212  0F0C  1283               	bcf	3,5	;RP0=0, select bank0
  1213  0F0D  1303               	bcf	3,6	;RP1=0, select bank0
  1214  0F0E  00B3               	movwf	UART_Send@temp+1
  1215  0F0F  1683               	bsf	3,5	;RP0=1, select bank1
  1216  0F10  1303               	bcf	3,6	;RP1=0, select bank1
  1217  0F11  0824               	movf	_A_VALUE^(0+128),w
  1218  0F12  1283               	bcf	3,5	;RP0=0, select bank0
  1219  0F13  1303               	bcf	3,6	;RP1=0, select bank0
  1220  0F14  00B2               	movwf	UART_Send@temp
  1221  0F15  3041               	movlw	65
  1222  0F16  00C1               	movwf	??_Send
  1223  0F17  0841               	movf	??_Send,w
  1224  0F18  00B4               	movwf	UART_Send@ch
  1225  0F19  158A  23FB  158A   	fcall	_UART_Send
  1226                           
  1227                           ;main.c: 89: UART_Send(PF_VALUE ,'%');
  1228  0F1C  1683               	bsf	3,5	;RP0=1, select bank1
  1229  0F1D  1303               	bcf	3,6	;RP1=0, select bank1
  1230  0F1E  0823               	movf	(_PF_VALUE+1)^(0+128),w
  1231  0F1F  1283               	bcf	3,5	;RP0=0, select bank0
  1232  0F20  1303               	bcf	3,6	;RP1=0, select bank0
  1233  0F21  00B3               	movwf	UART_Send@temp+1
  1234  0F22  1683               	bsf	3,5	;RP0=1, select bank1
  1235  0F23  1303               	bcf	3,6	;RP1=0, select bank1
  1236  0F24  0822               	movf	_PF_VALUE^(0+128),w
  1237  0F25  1283               	bcf	3,5	;RP0=0, select bank0
  1238  0F26  1303               	bcf	3,6	;RP1=0, select bank0
  1239  0F27  00B2               	movwf	UART_Send@temp
  1240  0F28  3025               	movlw	37
  1241  0F29  00C1               	movwf	??_Send
  1242  0F2A  0841               	movf	??_Send,w
  1243  0F2B  00B4               	movwf	UART_Send@ch
  1244  0F2C  158A  23FB  158A   	fcall	_UART_Send
  1245                           
  1246                           ;main.c: 90: UART_Send(((PORTC&0X08)>>3),'@' );
  1247  0F2F  1283               	bcf	3,5	;RP0=0, select bank0
  1248  0F30  1303               	bcf	3,6	;RP1=0, select bank0
  1249  0F31  0807               	movf	7,w	;volatile
  1250  0F32  00C1               	movwf	??_Send
  1251  0F33  3003               	movlw	3
  1252  0F34                     u3085:	
  1253  0F34  1003               	clrc
  1254  0F35  0CC1               	rrf	??_Send,f
  1255  0F36  3EFF               	addlw	-1
  1256  0F37  1D03               	skipz
  1257  0F38  2F34               	goto	u3085
  1258  0F39  0841               	movf	??_Send,w
  1259  0F3A  3901               	andlw	1
  1260  0F3B  00C2               	movwf	??_Send+1
  1261  0F3C  01C3               	clrf	??_Send+2
  1262  0F3D  0842               	movf	??_Send+1,w
  1263  0F3E  00B2               	movwf	UART_Send@temp
  1264  0F3F  0843               	movf	??_Send+2,w
  1265  0F40  00B3               	movwf	UART_Send@temp+1
  1266  0F41  3040               	movlw	64
  1267  0F42  00C4               	movwf	??_Send+3
  1268  0F43  0844               	movf	??_Send+3,w
  1269  0F44  00B4               	movwf	UART_Send@ch
  1270  0F45  158A  23FB         	fcall	_UART_Send
  1271                           
  1272                           ;main.c: 91: CHAR_STATE = 0;
  1273  0F47  1683               	bsf	3,5	;RP0=1, select bank1
  1274  0F48  1303               	bcf	3,6	;RP1=0, select bank1
  1275  0F49  01A9               	clrf	_CHAR_STATE^(0+128)
  1276                           
  1277                           ;main.c: 93: }
  1278                           
  1279                           ;main.c: 92: break;
  1280  0F4A  0008               	return
  1281  0F4B                     l2482:	
  1282  0F4B  1683               	bsf	3,5	;RP0=1, select bank1
  1283  0F4C  1303               	bcf	3,6	;RP1=0, select bank1
  1284  0F4D  0829               	movf	_CHAR_STATE^(0+128),w
  1285                           
  1286                           ; Switch size 1, requested type "space"
  1287                           ; Number of cases is 2, Range of values is 83 to 84
  1288                           ; switch strategies available:
  1289                           ; Name         Instructions Cycles
  1290                           ; simple_byte            7     4 (average)
  1291                           ; direct_byte           14    10 (fixed)
  1292                           ; jumptable            263     9 (fixed)
  1293                           ;	Chosen strategy is simple_byte
  1294  0F4E  3A53               	xorlw	83	; case 83
  1295  0F4F  1903               	skipnz
  1296  0F50  2EE5               	goto	l2476
  1297  0F51  3A07               	xorlw	7	; case 84
  1298  0F52  1903               	skipnz
  1299  0F53  2EC6               	goto	l2470
  1300  0F54  2F55               	goto	l183
  1301  0F55                     l183:	
  1302  0F55  0008               	return
  1303  0F56                     __end_of_Send:	
  1304                           
  1305                           	psect	text2
  1306  0BFB                     __ptext2:	
  1307 ;; *************** function _UART_Send *****************
  1308 ;; Defined at:
  1309 ;;		line 51 in file "uart.c"
  1310 ;; Parameters:    Size  Location     Type
  1311 ;;  temp            2   18[BANK0 ] unsigned int 
  1312 ;;  ch              1   20[BANK0 ] unsigned char 
  1313 ;; Auto vars:     Size  Location     Type
  1314 ;;  txt             8   25[BANK0 ] unsigned char [8]
  1315 ;; Return value:  Size  Location     Type
  1316 ;;                  1    wreg      void 
  1317 ;; Registers used:
  1318 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1319 ;; Tracked objects:
  1320 ;;		On entry : 0/0
  1321 ;;		On exit  : 0/0
  1322 ;;		Unchanged: 0/0
  1323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1324 ;;      Params:         0       3       0       0
  1325 ;;      Locals:         0       8       0       0
  1326 ;;      Temps:          0       4       0       0
  1327 ;;      Totals:         0      15       0       0
  1328 ;;Total ram usage:       15 bytes
  1329 ;; Hardware stack levels used:    1
  1330 ;; Hardware stack levels required when called:    4
  1331 ;; This function calls:
  1332 ;;		_UART_PutC
  1333 ;;		_UART_Write
  1334 ;;		_floatTostr
  1335 ;; This function is called by:
  1336 ;;		_Send
  1337 ;; This function uses a non-reentrant model
  1338 ;;
  1339                           
  1340                           
  1341                           ;psect for function _UART_Send
  1342  0BFB                     _UART_Send:	
  1343                           
  1344                           ;uart.c: 52: int8_t txt [8] = "0000000\0";
  1345                           
  1346                           ;incstack = 0
  1347                           ; Regs used in _UART_Send: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1348  0BFB  3039               	movlw	UART_Send@txt& (0+255)
  1349  0BFC  0084               	movwf	4
  1350  0BFD  30E1               	movlw	low UART_Send@F988
  1351  0BFE  1283               	bcf	3,5	;RP0=0, select bank0
  1352  0BFF  1303               	bcf	3,6	;RP1=0, select bank0
  1353  0C00  00B5               	movwf	??_UART_Send
  1354  0C01  0804               	movf	4,w
  1355  0C02  00B6               	movwf	??_UART_Send+1
  1356  0C03  3008               	movlw	8
  1357  0C04  00B7               	movwf	??_UART_Send+2
  1358  0C05                     u3010:	
  1359  0C05  0835               	movf	??_UART_Send,w
  1360  0C06  0084               	movwf	4
  1361  0C07  1383               	bcf	3,7	;select IRP bank1
  1362  0C08  0800               	movf	0,w
  1363  0C09  00B8               	movwf	??_UART_Send+3
  1364  0C0A  0AB5               	incf	??_UART_Send,f
  1365  0C0B  0836               	movf	??_UART_Send+1,w
  1366  0C0C  0084               	movwf	4
  1367  0C0D  0838               	movf	??_UART_Send+3,w
  1368  0C0E  0080               	movwf	0
  1369  0C0F  0AB6               	incf	??_UART_Send+1,f
  1370  0C10  0BB7               	decfsz	??_UART_Send+2,f
  1371  0C11  2C05               	goto	u3010
  1372                           
  1373                           ;uart.c: 53: txt[0] = ch;
  1374  0C12  0834               	movf	UART_Send@ch,w
  1375  0C13  00B5               	movwf	??_UART_Send
  1376  0C14  0835               	movf	??_UART_Send,w
  1377  0C15  00B9               	movwf	UART_Send@txt
  1378                           
  1379                           ;uart.c: 54: floatTostr(temp, txt);
  1380  0C16  0833               	movf	UART_Send@temp+1,w
  1381  0C17  00AF               	movwf	floatTostr@num+1
  1382  0C18  0832               	movf	UART_Send@temp,w
  1383  0C19  00AE               	movwf	floatTostr@num
  1384  0C1A  3039               	movlw	(low (UART_Send@txt| 0))& (0+255)
  1385  0C1B  00B5               	movwf	??_UART_Send
  1386  0C1C  0835               	movf	??_UART_Send,w
  1387  0C1D  00B0               	movwf	floatTostr@txt
  1388  0C1E  158A  2756  158A   	fcall	_floatTostr
  1389                           
  1390                           ;uart.c: 55: if(ch == '%'){
  1391  0C21  3025               	movlw	37
  1392  0C22  1283               	bcf	3,5	;RP0=0, select bank0
  1393  0C23  1303               	bcf	3,6	;RP1=0, select bank0
  1394  0C24  0634               	xorwf	UART_Send@ch,w
  1395  0C25  1D03               	btfss	3,2
  1396  0C26  2C2B               	goto	l2428
  1397                           
  1398                           ;uart.c: 57: else txt[1] = '+';
  1399                           
  1400                           ;uart.c: 56: if(temp>100000) txt[1] = '-';
  1401  0C27  302B               	movlw	43
  1402  0C28  00B5               	movwf	??_UART_Send
  1403  0C29  0835               	movf	??_UART_Send,w
  1404  0C2A  00BA               	movwf	UART_Send@txt+1
  1405  0C2B                     l2428:	
  1406                           
  1407                           ;uart.c: 58: }
  1408                           ;uart.c: 59: UART_Write(txt);
  1409  0C2B  3039               	movlw	(low (UART_Send@txt| 0))& (0+255)
  1410  0C2C  00A1               	movwf	UART_Write@data
  1411  0C2D  3000               	movlw	0
  1412  0C2E  00A2               	movwf	UART_Write@data+1
  1413  0C2F  158A  22BF  158A   	fcall	_UART_Write
  1414                           
  1415                           ;uart.c: 60: if(ch == '@'){
  1416  0C32  3040               	movlw	64
  1417  0C33  1283               	bcf	3,5	;RP0=0, select bank0
  1418  0C34  1303               	bcf	3,6	;RP1=0, select bank0
  1419  0C35  0634               	xorwf	UART_Send@ch,w
  1420  0C36  1D03               	btfss	3,2
  1421  0C37  0008               	return
  1422                           
  1423                           ;uart.c: 61: UART_PutC('\n');
  1424  0C38  300A               	movlw	10
  1425  0C39  158A  21C5  158A   	fcall	_UART_PutC
  1426                           
  1427                           ;uart.c: 62: UART_PutC('\r');
  1428  0C3C  300D               	movlw	13
  1429  0C3D  158A  21C5         	fcall	_UART_PutC
  1430  0C3F  0008               	return
  1431  0C40                     __end_of_UART_Send:	
  1432                           
  1433                           	psect	text3
  1434  0F56                     __ptext3:	
  1435 ;; *************** function _floatTostr *****************
  1436 ;; Defined at:
  1437 ;;		line 67 in file "uart.c"
  1438 ;; Parameters:    Size  Location     Type
  1439 ;;  num             2   14[BANK0 ] unsigned int 
  1440 ;;  txt             1   16[BANK0 ] PTR unsigned char 
  1441 ;;		 -> UART_Send@txt(8), 
  1442 ;; Auto vars:     Size  Location     Type
  1443 ;;		None
  1444 ;; Return value:  Size  Location     Type
  1445 ;;                  1    wreg      void 
  1446 ;; Registers used:
  1447 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1448 ;; Tracked objects:
  1449 ;;		On entry : 0/0
  1450 ;;		On exit  : 0/0
  1451 ;;		Unchanged: 0/0
  1452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1453 ;;      Params:         0       3       0       0
  1454 ;;      Locals:         0       0       0       0
  1455 ;;      Temps:          0       1       0       0
  1456 ;;      Totals:         0       4       0       0
  1457 ;;Total ram usage:        4 bytes
  1458 ;; Hardware stack levels used:    1
  1459 ;; Hardware stack levels required when called:    3
  1460 ;; This function calls:
  1461 ;;		___lwdiv
  1462 ;;		___lwmod
  1463 ;; This function is called by:
  1464 ;;		_UART_Send
  1465 ;; This function uses a non-reentrant model
  1466 ;;
  1467                           
  1468                           
  1469                           ;psect for function _floatTostr
  1470  0F56                     _floatTostr:	
  1471                           
  1472                           ;uart.c: 68: txt[6] = ((num )%10) + '0';
  1473                           
  1474                           ;incstack = 0
  1475                           ; Regs used in _floatTostr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1476  0F56  300A               	movlw	10
  1477  0F57  1283               	bcf	3,5	;RP0=0, select bank0
  1478  0F58  1303               	bcf	3,6	;RP1=0, select bank0
  1479  0F59  00A8               	movwf	___lwmod@divisor
  1480  0F5A  3000               	movlw	0
  1481  0F5B  00A9               	movwf	___lwmod@divisor+1
  1482  0F5C  082F               	movf	floatTostr@num+1,w
  1483  0F5D  00AB               	movwf	___lwmod@dividend+1
  1484  0F5E  082E               	movf	floatTostr@num,w
  1485  0F5F  00AA               	movwf	___lwmod@dividend
  1486  0F60  158A  234C  158A   	fcall	___lwmod
  1487  0F63  1283               	bcf	3,5	;RP0=0, select bank0
  1488  0F64  1303               	bcf	3,6	;RP1=0, select bank0
  1489  0F65  0828               	movf	?___lwmod,w
  1490  0F66  3E30               	addlw	48
  1491  0F67  00B1               	movwf	??_floatTostr
  1492  0F68  0830               	movf	floatTostr@txt,w
  1493  0F69  3E06               	addlw	6
  1494  0F6A  0084               	movwf	4
  1495  0F6B  0831               	movf	??_floatTostr,w
  1496  0F6C  1383               	bcf	3,7	;select IRP bank0
  1497  0F6D  0080               	movwf	0
  1498                           
  1499                           ;uart.c: 69: txt[5] = ((num/10 )%10) + '0';
  1500  0F6E  300A               	movlw	10
  1501  0F6F  00A8               	movwf	___lwmod@divisor
  1502  0F70  3000               	movlw	0
  1503  0F71  00A9               	movwf	___lwmod@divisor+1
  1504  0F72  300A               	movlw	10
  1505  0F73  00A0               	movwf	___lwdiv@divisor
  1506  0F74  3000               	movlw	0
  1507  0F75  00A1               	movwf	___lwdiv@divisor+1
  1508  0F76  082F               	movf	floatTostr@num+1,w
  1509  0F77  00A3               	movwf	___lwdiv@dividend+1
  1510  0F78  082E               	movf	floatTostr@num,w
  1511  0F79  00A2               	movwf	___lwdiv@dividend
  1512  0F7A  158A  23BD  158A   	fcall	___lwdiv
  1513  0F7D  1283               	bcf	3,5	;RP0=0, select bank0
  1514  0F7E  1303               	bcf	3,6	;RP1=0, select bank0
  1515  0F7F  0821               	movf	?___lwdiv+1,w
  1516  0F80  00AB               	movwf	___lwmod@dividend+1
  1517  0F81  0820               	movf	?___lwdiv,w
  1518  0F82  00AA               	movwf	___lwmod@dividend
  1519  0F83  158A  234C  158A   	fcall	___lwmod
  1520  0F86  1283               	bcf	3,5	;RP0=0, select bank0
  1521  0F87  1303               	bcf	3,6	;RP1=0, select bank0
  1522  0F88  0828               	movf	?___lwmod,w
  1523  0F89  3E30               	addlw	48
  1524  0F8A  00B1               	movwf	??_floatTostr
  1525  0F8B  0830               	movf	floatTostr@txt,w
  1526  0F8C  3E05               	addlw	5
  1527  0F8D  0084               	movwf	4
  1528  0F8E  0831               	movf	??_floatTostr,w
  1529  0F8F  1383               	bcf	3,7	;select IRP bank0
  1530  0F90  0080               	movwf	0
  1531                           
  1532                           ;uart.c: 70: txt[4] = '.';
  1533  0F91  302E               	movlw	46
  1534  0F92  00B1               	movwf	??_floatTostr
  1535  0F93  0830               	movf	floatTostr@txt,w
  1536  0F94  3E04               	addlw	4
  1537  0F95  0084               	movwf	4
  1538  0F96  0831               	movf	??_floatTostr,w
  1539  0F97  0080               	movwf	0
  1540                           
  1541                           ;uart.c: 71: txt[3] = ((num/100 )%10) + '0';
  1542  0F98  300A               	movlw	10
  1543  0F99  00A8               	movwf	___lwmod@divisor
  1544  0F9A  3000               	movlw	0
  1545  0F9B  00A9               	movwf	___lwmod@divisor+1
  1546  0F9C  3064               	movlw	100
  1547  0F9D  00A0               	movwf	___lwdiv@divisor
  1548  0F9E  3000               	movlw	0
  1549  0F9F  00A1               	movwf	___lwdiv@divisor+1
  1550  0FA0  082F               	movf	floatTostr@num+1,w
  1551  0FA1  00A3               	movwf	___lwdiv@dividend+1
  1552  0FA2  082E               	movf	floatTostr@num,w
  1553  0FA3  00A2               	movwf	___lwdiv@dividend
  1554  0FA4  158A  23BD  158A   	fcall	___lwdiv
  1555  0FA7  1283               	bcf	3,5	;RP0=0, select bank0
  1556  0FA8  1303               	bcf	3,6	;RP1=0, select bank0
  1557  0FA9  0821               	movf	?___lwdiv+1,w
  1558  0FAA  00AB               	movwf	___lwmod@dividend+1
  1559  0FAB  0820               	movf	?___lwdiv,w
  1560  0FAC  00AA               	movwf	___lwmod@dividend
  1561  0FAD  158A  234C  158A   	fcall	___lwmod
  1562  0FB0  1283               	bcf	3,5	;RP0=0, select bank0
  1563  0FB1  1303               	bcf	3,6	;RP1=0, select bank0
  1564  0FB2  0828               	movf	?___lwmod,w
  1565  0FB3  3E30               	addlw	48
  1566  0FB4  00B1               	movwf	??_floatTostr
  1567  0FB5  0830               	movf	floatTostr@txt,w
  1568  0FB6  3E03               	addlw	3
  1569  0FB7  0084               	movwf	4
  1570  0FB8  0831               	movf	??_floatTostr,w
  1571  0FB9  1383               	bcf	3,7	;select IRP bank0
  1572  0FBA  0080               	movwf	0
  1573                           
  1574                           ;uart.c: 72: txt[2] = ((num/1000 )%10) + '0';
  1575  0FBB  300A               	movlw	10
  1576  0FBC  00A8               	movwf	___lwmod@divisor
  1577  0FBD  3000               	movlw	0
  1578  0FBE  00A9               	movwf	___lwmod@divisor+1
  1579  0FBF  30E8               	movlw	232
  1580  0FC0  00A0               	movwf	___lwdiv@divisor
  1581  0FC1  3003               	movlw	3
  1582  0FC2  00A1               	movwf	___lwdiv@divisor+1
  1583  0FC3  082F               	movf	floatTostr@num+1,w
  1584  0FC4  00A3               	movwf	___lwdiv@dividend+1
  1585  0FC5  082E               	movf	floatTostr@num,w
  1586  0FC6  00A2               	movwf	___lwdiv@dividend
  1587  0FC7  158A  23BD  158A   	fcall	___lwdiv
  1588  0FCA  1283               	bcf	3,5	;RP0=0, select bank0
  1589  0FCB  1303               	bcf	3,6	;RP1=0, select bank0
  1590  0FCC  0821               	movf	?___lwdiv+1,w
  1591  0FCD  00AB               	movwf	___lwmod@dividend+1
  1592  0FCE  0820               	movf	?___lwdiv,w
  1593  0FCF  00AA               	movwf	___lwmod@dividend
  1594  0FD0  158A  234C  158A   	fcall	___lwmod
  1595  0FD3  1283               	bcf	3,5	;RP0=0, select bank0
  1596  0FD4  1303               	bcf	3,6	;RP1=0, select bank0
  1597  0FD5  0828               	movf	?___lwmod,w
  1598  0FD6  3E30               	addlw	48
  1599  0FD7  00B1               	movwf	??_floatTostr
  1600  0FD8  0830               	movf	floatTostr@txt,w
  1601  0FD9  3E02               	addlw	2
  1602  0FDA  0084               	movwf	4
  1603  0FDB  0831               	movf	??_floatTostr,w
  1604  0FDC  1383               	bcf	3,7	;select IRP bank0
  1605  0FDD  0080               	movwf	0
  1606                           
  1607                           ;uart.c: 73: txt[1] = ((num/10000)%10) + '0';
  1608  0FDE  300A               	movlw	10
  1609  0FDF  00A8               	movwf	___lwmod@divisor
  1610  0FE0  3000               	movlw	0
  1611  0FE1  00A9               	movwf	___lwmod@divisor+1
  1612  0FE2  3010               	movlw	16
  1613  0FE3  00A0               	movwf	___lwdiv@divisor
  1614  0FE4  3027               	movlw	39
  1615  0FE5  00A1               	movwf	___lwdiv@divisor+1
  1616  0FE6  082F               	movf	floatTostr@num+1,w
  1617  0FE7  00A3               	movwf	___lwdiv@dividend+1
  1618  0FE8  082E               	movf	floatTostr@num,w
  1619  0FE9  00A2               	movwf	___lwdiv@dividend
  1620  0FEA  158A  23BD  158A   	fcall	___lwdiv
  1621  0FED  1283               	bcf	3,5	;RP0=0, select bank0
  1622  0FEE  1303               	bcf	3,6	;RP1=0, select bank0
  1623  0FEF  0821               	movf	?___lwdiv+1,w
  1624  0FF0  00AB               	movwf	___lwmod@dividend+1
  1625  0FF1  0820               	movf	?___lwdiv,w
  1626  0FF2  00AA               	movwf	___lwmod@dividend
  1627  0FF3  158A  234C         	fcall	___lwmod
  1628  0FF5  1283               	bcf	3,5	;RP0=0, select bank0
  1629  0FF6  1303               	bcf	3,6	;RP1=0, select bank0
  1630  0FF7  0828               	movf	?___lwmod,w
  1631  0FF8  3E30               	addlw	48
  1632  0FF9  00B1               	movwf	??_floatTostr
  1633  0FFA  0A30               	incf	floatTostr@txt,w
  1634  0FFB  0084               	movwf	4
  1635  0FFC  0831               	movf	??_floatTostr,w
  1636  0FFD  1383               	bcf	3,7	;select IRP bank0
  1637  0FFE  0080               	movwf	0
  1638  0FFF  0008               	return
  1639  1000                     __end_of_floatTostr:	
  1640                           
  1641                           	psect	text4
  1642  0B4C                     __ptext4:	
  1643 ;; *************** function ___lwmod *****************
  1644 ;; Defined at:
  1645 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  1646 ;; Parameters:    Size  Location     Type
  1647 ;;  divisor         2    8[BANK0 ] unsigned int 
  1648 ;;  dividend        2   10[BANK0 ] unsigned int 
  1649 ;; Auto vars:     Size  Location     Type
  1650 ;;  counter         1   13[BANK0 ] unsigned char 
  1651 ;; Return value:  Size  Location     Type
  1652 ;;                  2    8[BANK0 ] unsigned int 
  1653 ;; Registers used:
  1654 ;;		wreg, status,2, status,0
  1655 ;; Tracked objects:
  1656 ;;		On entry : 0/0
  1657 ;;		On exit  : 0/0
  1658 ;;		Unchanged: 0/0
  1659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1660 ;;      Params:         0       4       0       0
  1661 ;;      Locals:         0       1       0       0
  1662 ;;      Temps:          0       1       0       0
  1663 ;;      Totals:         0       6       0       0
  1664 ;;Total ram usage:        6 bytes
  1665 ;; Hardware stack levels used:    1
  1666 ;; Hardware stack levels required when called:    2
  1667 ;; This function calls:
  1668 ;;		Nothing
  1669 ;; This function is called by:
  1670 ;;		_main
  1671 ;;		_floatTostr
  1672 ;; This function uses a non-reentrant model
  1673 ;;
  1674                           
  1675                           
  1676                           ;psect for function ___lwmod
  1677  0B4C                     ___lwmod:	
  1678                           
  1679                           ;incstack = 0
  1680                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1681  0B4C  1283               	bcf	3,5	;RP0=0, select bank0
  1682  0B4D  1303               	bcf	3,6	;RP1=0, select bank0
  1683  0B4E  0828               	movf	___lwmod@divisor,w
  1684  0B4F  0429               	iorwf	___lwmod@divisor+1,w
  1685  0B50  1903               	btfsc	3,2
  1686  0B51  2B7B               	goto	l1578
  1687  0B52  01AD               	clrf	___lwmod@counter
  1688  0B53  0AAD               	incf	___lwmod@counter,f
  1689  0B54                     l1568:	
  1690  0B54  1BA9               	btfsc	___lwmod@divisor+1,7
  1691  0B55  2B62               	goto	l1570
  1692  0B56  3001               	movlw	1
  1693  0B57                     u1635:	
  1694  0B57  1003               	clrc
  1695  0B58  0DA8               	rlf	___lwmod@divisor,f
  1696  0B59  0DA9               	rlf	___lwmod@divisor+1,f
  1697  0B5A  3EFF               	addlw	-1
  1698  0B5B  1D03               	skipz
  1699  0B5C  2B57               	goto	u1635
  1700  0B5D  3001               	movlw	1
  1701  0B5E  00AC               	movwf	??___lwmod
  1702  0B5F  082C               	movf	??___lwmod,w
  1703  0B60  07AD               	addwf	___lwmod@counter,f
  1704  0B61  2B54               	goto	l1568
  1705  0B62                     l1570:	
  1706  0B62  0829               	movf	___lwmod@divisor+1,w
  1707  0B63  022B               	subwf	___lwmod@dividend+1,w
  1708  0B64  1D03               	skipz
  1709  0B65  2B68               	goto	u1655
  1710  0B66  0828               	movf	___lwmod@divisor,w
  1711  0B67  022A               	subwf	___lwmod@dividend,w
  1712  0B68                     u1655:	
  1713  0B68  1C03               	skipc
  1714  0B69  2B70               	goto	l1574
  1715  0B6A  0828               	movf	___lwmod@divisor,w
  1716  0B6B  02AA               	subwf	___lwmod@dividend,f
  1717  0B6C  0829               	movf	___lwmod@divisor+1,w
  1718  0B6D  1C03               	skipc
  1719  0B6E  03AB               	decf	___lwmod@dividend+1,f
  1720  0B6F  02AB               	subwf	___lwmod@dividend+1,f
  1721  0B70                     l1574:	
  1722  0B70  3001               	movlw	1
  1723  0B71                     u1665:	
  1724  0B71  1003               	clrc
  1725  0B72  0CA9               	rrf	___lwmod@divisor+1,f
  1726  0B73  0CA8               	rrf	___lwmod@divisor,f
  1727  0B74  3EFF               	addlw	-1
  1728  0B75  1D03               	skipz
  1729  0B76  2B71               	goto	u1665
  1730  0B77  3001               	movlw	1
  1731  0B78  02AD               	subwf	___lwmod@counter,f
  1732  0B79  1D03               	btfss	3,2
  1733  0B7A  2B62               	goto	l1570
  1734  0B7B                     l1578:	
  1735  0B7B  082B               	movf	___lwmod@dividend+1,w
  1736  0B7C  00A9               	movwf	?___lwmod+1
  1737  0B7D  082A               	movf	___lwmod@dividend,w
  1738  0B7E  00A8               	movwf	?___lwmod
  1739  0B7F  0008               	return
  1740  0B80                     __end_of___lwmod:	
  1741                           
  1742                           	psect	text5
  1743  09E2                     __ptext5:	
  1744 ;; *************** function _Toggle_Relay *****************
  1745 ;; Defined at:
  1746 ;;		line 44 in file "setup.c"
  1747 ;; Parameters:    Size  Location     Type
  1748 ;;		None
  1749 ;; Auto vars:     Size  Location     Type
  1750 ;;		None
  1751 ;; Return value:  Size  Location     Type
  1752 ;;                  1    wreg      void 
  1753 ;; Registers used:
  1754 ;;		wreg, status,2, status,0
  1755 ;; Tracked objects:
  1756 ;;		On entry : 0/0
  1757 ;;		On exit  : 0/0
  1758 ;;		Unchanged: 0/0
  1759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1760 ;;      Params:         0       0       0       0
  1761 ;;      Locals:         0       0       0       0
  1762 ;;      Temps:          0       1       0       0
  1763 ;;      Totals:         0       1       0       0
  1764 ;;Total ram usage:        1 bytes
  1765 ;; Hardware stack levels used:    1
  1766 ;; Hardware stack levels required when called:    2
  1767 ;; This function calls:
  1768 ;;		Nothing
  1769 ;; This function is called by:
  1770 ;;		_Send
  1771 ;; This function uses a non-reentrant model
  1772 ;;
  1773                           
  1774                           
  1775                           ;psect for function _Toggle_Relay
  1776  09E2                     _Toggle_Relay:	
  1777                           
  1778                           ;setup.c: 45: static uint8_t read = 0;
  1779                           ;setup.c: 46: read ^= 1;
  1780                           
  1781                           ;incstack = 0
  1782                           ; Regs used in _Toggle_Relay: [wreg+status,2+status,0]
  1783  09E2  3001               	movlw	1
  1784  09E3  1283               	bcf	3,5	;RP0=0, select bank0
  1785  09E4  1303               	bcf	3,6	;RP1=0, select bank0
  1786  09E5  00A0               	movwf	??_Toggle_Relay
  1787  09E6  0820               	movf	??_Toggle_Relay,w
  1788  09E7  06F8               	xorwf	Toggle_Relay@read,f
  1789                           
  1790                           ;setup.c: 47: if(read) PORTC = 0x08;
  1791  09E8  0878               	movf	Toggle_Relay@read,w
  1792  09E9  1903               	btfsc	3,2
  1793  09EA  29EE               	goto	l2092
  1794  09EB  3008               	movlw	8
  1795  09EC  0087               	movwf	7	;volatile
  1796  09ED  0008               	return
  1797  09EE                     l2092:	
  1798                           
  1799                           ;setup.c: 48: else PORTC = 0x04;
  1800  09EE  3004               	movlw	4
  1801  09EF  0087               	movwf	7	;volatile
  1802  09F0  0008               	return
  1803  09F1                     __end_of_Toggle_Relay:	
  1804                           
  1805                           	psect	text6
  1806  0663                     __ptext6:	
  1807 ;; *************** function _Measure *****************
  1808 ;; Defined at:
  1809 ;;		line 97 in file "main.c"
  1810 ;; Parameters:    Size  Location     Type
  1811 ;;		None
  1812 ;; Auto vars:     Size  Location     Type
  1813 ;;		None
  1814 ;; Return value:  Size  Location     Type
  1815 ;;                  1    wreg      void 
  1816 ;; Registers used:
  1817 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1818 ;; Tracked objects:
  1819 ;;		On entry : 0/0
  1820 ;;		On exit  : 0/0
  1821 ;;		Unchanged: 0/0
  1822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1823 ;;      Params:         0       0       0       0
  1824 ;;      Locals:         0       0       4       0
  1825 ;;      Temps:          0       1       0       0
  1826 ;;      Totals:         0       1       4       0
  1827 ;;Total ram usage:        5 bytes
  1828 ;; Hardware stack levels used:    1
  1829 ;; Hardware stack levels required when called:    5
  1830 ;; This function calls:
  1831 ;;		_ADC_PF
  1832 ;;		_ADC_RMS
  1833 ;;		_AVG
  1834 ;;		_UART_Write
  1835 ;; This function is called by:
  1836 ;;		_main
  1837 ;; This function uses a non-reentrant model
  1838 ;;
  1839                           
  1840                           
  1841                           ;psect for function _Measure
  1842  0663                     _Measure:	
  1843                           
  1844                           ;main.c: 98: UART_Write("WELCOME MAAM");
  1845                           
  1846                           ;incstack = 0
  1847                           ; Regs used in _Measure: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1848  0663  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1849  0664  1283               	bcf	3,5	;RP0=0, select bank0
  1850  0665  1303               	bcf	3,6	;RP1=0, select bank0
  1851  0666  00A1               	movwf	UART_Write@data
  1852  0667  3080               	movlw	128
  1853  0668  00A2               	movwf	UART_Write@data+1
  1854  0669  158A  22BF  118A   	fcall	_UART_Write
  1855                           
  1856                           ;main.c: 99: static uint8_t in = 0;
  1857                           ;main.c: 100: ADC_RMS(VOLT_ARRAY , 0, 767, in);
  1858  066C  1283               	bcf	3,5	;RP0=0, select bank0
  1859  066D  1303               	bcf	3,6	;RP1=0, select bank0
  1860  066E  01DC               	clrf	ADC_RMS@ANC
  1861  066F  30FF               	movlw	255
  1862  0670  00DD               	movwf	ADC_RMS@rate
  1863  0671  3002               	movlw	2
  1864  0672  00DE               	movwf	ADC_RMS@rate+1
  1865  0673  1683               	bsf	3,5	;RP0=1, select bank1
  1866  0674  1303               	bcf	3,6	;RP1=0, select bank1
  1867  0675  0828               	movf	Measure@in^(0+128),w
  1868  0676  1283               	bcf	3,5	;RP0=0, select bank0
  1869  0677  1303               	bcf	3,6	;RP1=0, select bank0
  1870  0678  00EE               	movwf	??_Measure
  1871  0679  086E               	movf	??_Measure,w
  1872  067A  00DF               	movwf	ADC_RMS@index
  1873  067B  30C5               	movlw	(low (_VOLT_ARRAY| 0))& (0+255)
  1874  067C  158A  231B  118A   	fcall	_ADC_RMS
  1875                           
  1876                           ;main.c: 101: ADC_RMS(CURRENT_ARRAY, 1, 78, in);
  1877  067F  1283               	bcf	3,5	;RP0=0, select bank0
  1878  0680  1303               	bcf	3,6	;RP1=0, select bank0
  1879  0681  01DC               	clrf	ADC_RMS@ANC
  1880  0682  0ADC               	incf	ADC_RMS@ANC,f
  1881  0683  304E               	movlw	78
  1882  0684  00DD               	movwf	ADC_RMS@rate
  1883  0685  3000               	movlw	0
  1884  0686  00DE               	movwf	ADC_RMS@rate+1
  1885  0687  1683               	bsf	3,5	;RP0=1, select bank1
  1886  0688  1303               	bcf	3,6	;RP1=0, select bank1
  1887  0689  0828               	movf	Measure@in^(0+128),w
  1888  068A  1283               	bcf	3,5	;RP0=0, select bank0
  1889  068B  1303               	bcf	3,6	;RP1=0, select bank0
  1890  068C  00EE               	movwf	??_Measure
  1891  068D  086E               	movf	??_Measure,w
  1892  068E  00DF               	movwf	ADC_RMS@index
  1893  068F  30BD               	movlw	(low (_CURRENT_ARRAY| 0))& (0+255)
  1894  0690  158A  231B  118A   	fcall	_ADC_RMS
  1895                           
  1896                           ;main.c: 102: if(ZERO_CROSS)
  1897  0693  1683               	bsf	3,5	;RP0=1, select bank1
  1898  0694  1303               	bcf	3,6	;RP1=0, select bank1
  1899  0695  082A               	movf	_ZERO_CROSS^(0+128),w
  1900  0696  1903               	btfsc	3,2
  1901  0697  2EA2               	goto	l2450
  1902                           
  1903                           ;main.c: 103: ADC_PF(POWER_FACTOR_ARRAY, in);
  1904  0698  0828               	movf	Measure@in^(0+128),w
  1905  0699  1283               	bcf	3,5	;RP0=0, select bank0
  1906  069A  1303               	bcf	3,6	;RP1=0, select bank0
  1907  069B  00EE               	movwf	??_Measure
  1908  069C  086E               	movf	??_Measure,w
  1909  069D  00DC               	movwf	ADC_PF@index
  1910  069E  30B5               	movlw	(low (_POWER_FACTOR_ARRAY| 0))& (0+255)
  1911  069F  118A  202A  118A   	fcall	_ADC_PF
  1912  06A2                     l2450:	
  1913                           
  1914                           ;main.c: 104: if(++in > 4){
  1915  06A2  3001               	movlw	1
  1916  06A3  1283               	bcf	3,5	;RP0=0, select bank0
  1917  06A4  1303               	bcf	3,6	;RP1=0, select bank0
  1918  06A5  00EE               	movwf	??_Measure
  1919  06A6  086E               	movf	??_Measure,w
  1920  06A7  1683               	bsf	3,5	;RP0=1, select bank1
  1921  06A8  1303               	bcf	3,6	;RP1=0, select bank1
  1922  06A9  07A8               	addwf	Measure@in^(0+128),f
  1923  06AA  3005               	movlw	5
  1924  06AB  0228               	subwf	Measure@in^(0+128),w
  1925  06AC  1C03               	skipc
  1926  06AD  0008               	return
  1927                           
  1928                           ;main.c: 105: in = 0;
  1929  06AE  01A8               	clrf	Measure@in^(0+128)
  1930                           
  1931                           ;main.c: 106: F_VALUE = AVG(FREQUENCY_ARRAY , 4);
  1932  06AF  3004               	movlw	4
  1933  06B0  1283               	bcf	3,5	;RP0=0, select bank0
  1934  06B1  1303               	bcf	3,6	;RP1=0, select bank0
  1935  06B2  00EE               	movwf	??_Measure
  1936  06B3  086E               	movf	??_Measure,w
  1937  06B4  00AE               	movwf	AVG@index
  1938  06B5  30AD               	movlw	(low (_FREQUENCY_ARRAY| 0))& (0+255)
  1939  06B6  158A  25C4  118A   	fcall	_AVG
  1940  06B9  1283               	bcf	3,5	;RP0=0, select bank0
  1941  06BA  1303               	bcf	3,6	;RP1=0, select bank0
  1942  06BB  082F               	movf	?_AVG+1,w
  1943  06BC  1683               	bsf	3,5	;RP0=1, select bank1
  1944  06BD  1303               	bcf	3,6	;RP1=0, select bank1
  1945  06BE  00EA               	movwf	(_F_VALUE+1)^(0+128)
  1946  06BF  1283               	bcf	3,5	;RP0=0, select bank0
  1947  06C0  1303               	bcf	3,6	;RP1=0, select bank0
  1948  06C1  082E               	movf	?_AVG,w
  1949  06C2  1683               	bsf	3,5	;RP0=1, select bank1
  1950  06C3  1303               	bcf	3,6	;RP1=0, select bank1
  1951  06C4  00E9               	movwf	_F_VALUE^(0+128)
  1952                           
  1953                           ;main.c: 107: V_VALUE = AVG(VOLT_ARRAY , 4);
  1954  06C5  3004               	movlw	4
  1955  06C6  1283               	bcf	3,5	;RP0=0, select bank0
  1956  06C7  1303               	bcf	3,6	;RP1=0, select bank0
  1957  06C8  00EE               	movwf	??_Measure
  1958  06C9  086E               	movf	??_Measure,w
  1959  06CA  00AE               	movwf	AVG@index
  1960  06CB  30C5               	movlw	(low (_VOLT_ARRAY| 0))& (0+255)
  1961  06CC  158A  25C4  118A   	fcall	_AVG
  1962  06CF  1283               	bcf	3,5	;RP0=0, select bank0
  1963  06D0  1303               	bcf	3,6	;RP1=0, select bank0
  1964  06D1  082F               	movf	?_AVG+1,w
  1965  06D2  1683               	bsf	3,5	;RP0=1, select bank1
  1966  06D3  1303               	bcf	3,6	;RP1=0, select bank1
  1967  06D4  00A7               	movwf	(_V_VALUE+1)^(0+128)
  1968  06D5  1283               	bcf	3,5	;RP0=0, select bank0
  1969  06D6  1303               	bcf	3,6	;RP1=0, select bank0
  1970  06D7  082E               	movf	?_AVG,w
  1971  06D8  1683               	bsf	3,5	;RP0=1, select bank1
  1972  06D9  1303               	bcf	3,6	;RP1=0, select bank1
  1973  06DA  00A6               	movwf	_V_VALUE^(0+128)
  1974                           
  1975                           ;main.c: 108: A_VALUE = AVG(CURRENT_ARRAY , 4);
  1976  06DB  3004               	movlw	4
  1977  06DC  1283               	bcf	3,5	;RP0=0, select bank0
  1978  06DD  1303               	bcf	3,6	;RP1=0, select bank0
  1979  06DE  00EE               	movwf	??_Measure
  1980  06DF  086E               	movf	??_Measure,w
  1981  06E0  00AE               	movwf	AVG@index
  1982  06E1  30BD               	movlw	(low (_CURRENT_ARRAY| 0))& (0+255)
  1983  06E2  158A  25C4  118A   	fcall	_AVG
  1984  06E5  1283               	bcf	3,5	;RP0=0, select bank0
  1985  06E6  1303               	bcf	3,6	;RP1=0, select bank0
  1986  06E7  082F               	movf	?_AVG+1,w
  1987  06E8  1683               	bsf	3,5	;RP0=1, select bank1
  1988  06E9  1303               	bcf	3,6	;RP1=0, select bank1
  1989  06EA  00A5               	movwf	(_A_VALUE+1)^(0+128)
  1990  06EB  1283               	bcf	3,5	;RP0=0, select bank0
  1991  06EC  1303               	bcf	3,6	;RP1=0, select bank0
  1992  06ED  082E               	movf	?_AVG,w
  1993  06EE  1683               	bsf	3,5	;RP0=1, select bank1
  1994  06EF  1303               	bcf	3,6	;RP1=0, select bank1
  1995  06F0  00A4               	movwf	_A_VALUE^(0+128)
  1996                           
  1997                           ;main.c: 109: PF_VALUE = AVG(POWER_FACTOR_ARRAY, 4);
  1998  06F1  3004               	movlw	4
  1999  06F2  1283               	bcf	3,5	;RP0=0, select bank0
  2000  06F3  1303               	bcf	3,6	;RP1=0, select bank0
  2001  06F4  00EE               	movwf	??_Measure
  2002  06F5  086E               	movf	??_Measure,w
  2003  06F6  00AE               	movwf	AVG@index
  2004  06F7  30B5               	movlw	(low (_POWER_FACTOR_ARRAY| 0))& (0+255)
  2005  06F8  158A  25C4  118A   	fcall	_AVG
  2006  06FB  1283               	bcf	3,5	;RP0=0, select bank0
  2007  06FC  1303               	bcf	3,6	;RP1=0, select bank0
  2008  06FD  082F               	movf	?_AVG+1,w
  2009  06FE  1683               	bsf	3,5	;RP0=1, select bank1
  2010  06FF  1303               	bcf	3,6	;RP1=0, select bank1
  2011  0700  00A3               	movwf	(_PF_VALUE+1)^(0+128)
  2012  0701  1283               	bcf	3,5	;RP0=0, select bank0
  2013  0702  1303               	bcf	3,6	;RP1=0, select bank0
  2014  0703  082E               	movf	?_AVG,w
  2015  0704  1683               	bsf	3,5	;RP0=1, select bank1
  2016  0705  1303               	bcf	3,6	;RP1=0, select bank1
  2017  0706  00A2               	movwf	_PF_VALUE^(0+128)
  2018                           
  2019                           ;main.c: 110: PF_VALUE += PF_SIGN > (4/2) ? 0:100000;
  2020  0707  3003               	movlw	3
  2021  0708  022B               	subwf	_PF_SIGN^(0+128),w
  2022  0709  1803               	skipnc
  2023  070A  2F13               	goto	l2466
  2024  070B  3000               	movlw	0
  2025  070C  00E0               	movwf	(_Measure$304+3)^(0+128)
  2026  070D  3001               	movlw	1
  2027  070E  00DF               	movwf	(_Measure$304+2)^(0+128)
  2028  070F  3086               	movlw	134
  2029  0710  00DE               	movwf	(_Measure$304+1)^(0+128)
  2030  0711  30A0               	movlw	160
  2031  0712  2F1A               	goto	L1
  2032  0713                     l2466:	
  2033  0713  3000               	movlw	0
  2034  0714  00E0               	movwf	(_Measure$304+3)^(0+128)
  2035  0715  3000               	movlw	0
  2036  0716  00DF               	movwf	(_Measure$304+2)^(0+128)
  2037  0717  3000               	movlw	0
  2038  0718  00DE               	movwf	(_Measure$304+1)^(0+128)
  2039  0719  3000               	movlw	0
  2040  071A                     L1:	
  2041  071A  00DD               	movwf	_Measure$304^(0+128)
  2042  071B  085D               	movf	_Measure$304^(0+128),w
  2043  071C  07A2               	addwf	_PF_VALUE^(0+128),f
  2044  071D  1803               	skipnc
  2045  071E  0AA3               	incf	(_PF_VALUE+1)^(0+128),f
  2046  071F  085E               	movf	(_Measure$304+1)^(0+128),w
  2047  0720  07A3               	addwf	(_PF_VALUE+1)^(0+128),f
  2048  0721  0008               	return
  2049  0722                     __end_of_Measure:	
  2050                           
  2051                           	psect	text7
  2052  0DC4                     __ptext7:	
  2053 ;; *************** function _AVG *****************
  2054 ;; Defined at:
  2055 ;;		line 115 in file "adc.c"
  2056 ;; Parameters:    Size  Location     Type
  2057 ;;  ARRAY           1    wreg     PTR unsigned int 
  2058 ;;		 -> POWER_FACTOR_ARRAY(8), CURRENT_ARRAY(8), VOLT_ARRAY(8), FREQUENCY_ARRAY(8), 
  2059 ;;  index           1   14[BANK0 ] const unsigned char 
  2060 ;; Auto vars:     Size  Location     Type
  2061 ;;  ARRAY           1   29[BANK0 ] PTR unsigned int 
  2062 ;;		 -> POWER_FACTOR_ARRAY(8), CURRENT_ARRAY(8), VOLT_ARRAY(8), FREQUENCY_ARRAY(8), 
  2063 ;;  ret             4   24[BANK0 ] unsigned long 
  2064 ;;  i               1   30[BANK0 ] unsigned char 
  2065 ;;  avg             1   28[BANK0 ] unsigned char 
  2066 ;; Return value:  Size  Location     Type
  2067 ;;                  2   14[BANK0 ] unsigned int 
  2068 ;; Registers used:
  2069 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2070 ;; Tracked objects:
  2071 ;;		On entry : 0/0
  2072 ;;		On exit  : 0/0
  2073 ;;		Unchanged: 0/0
  2074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2075 ;;      Params:         0       2       0       0
  2076 ;;      Locals:         0       7       0       0
  2077 ;;      Temps:          0       8       0       0
  2078 ;;      Totals:         0      17       0       0
  2079 ;;Total ram usage:       17 bytes
  2080 ;; Hardware stack levels used:    1
  2081 ;; Hardware stack levels required when called:    3
  2082 ;; This function calls:
  2083 ;;		___lldiv
  2084 ;; This function is called by:
  2085 ;;		_Measure
  2086 ;; This function uses a non-reentrant model
  2087 ;;
  2088                           
  2089                           
  2090                           ;psect for function _AVG
  2091  0DC4                     _AVG:	
  2092                           
  2093                           ;incstack = 0
  2094                           ; Regs used in _AVG: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2095                           ;AVG@ARRAY stored from wreg
  2096  0DC4  1283               	bcf	3,5	;RP0=0, select bank0
  2097  0DC5  1303               	bcf	3,6	;RP1=0, select bank0
  2098  0DC6  00BD               	movwf	AVG@ARRAY
  2099                           
  2100                           ;adc.c: 116: uint8_t i;
  2101                           ;adc.c: 117: uint8_t avg = 0;
  2102  0DC7  01BC               	clrf	AVG@avg
  2103                           
  2104                           ;adc.c: 118: uint32_t ret = 0;
  2105  0DC8  3000               	movlw	0
  2106  0DC9  00BB               	movwf	AVG@ret+3
  2107  0DCA  3000               	movlw	0
  2108  0DCB  00BA               	movwf	AVG@ret+2
  2109  0DCC  3000               	movlw	0
  2110  0DCD  00B9               	movwf	AVG@ret+1
  2111  0DCE  3000               	movlw	0
  2112  0DCF  00B8               	movwf	AVG@ret
  2113                           
  2114                           ;adc.c: 119: for(i=1;i<index;i++){
  2115  0DD0  01BE               	clrf	AVG@i
  2116  0DD1  0ABE               	incf	AVG@i,f
  2117  0DD2  082E               	movf	AVG@index,w
  2118  0DD3  023E               	subwf	AVG@i,w
  2119  0DD4  1803               	btfsc	3,0
  2120  0DD5  2E19               	goto	l2026
  2121  0DD6                     l2016:	
  2122                           
  2123                           ;adc.c: 120: if(ARRAY[i]>0){
  2124  0DD6  083E               	movf	AVG@i,w
  2125  0DD7  00B0               	movwf	??_AVG
  2126  0DD8  0730               	addwf	??_AVG,w
  2127  0DD9  073D               	addwf	AVG@ARRAY,w
  2128  0DDA  00B1               	movwf	??_AVG+1
  2129  0DDB  0831               	movf	??_AVG+1,w
  2130  0DDC  0084               	movwf	4
  2131  0DDD  1383               	bcf	3,7	;select IRP bank0
  2132  0DDE  0800               	movf	0,w
  2133  0DDF  00B2               	movwf	??_AVG+2
  2134  0DE0  0A84               	incf	4,f
  2135  0DE1  0800               	movf	0,w
  2136  0DE2  00B3               	movwf	??_AVG+3
  2137  0DE3  0832               	movf	??_AVG+2,w
  2138  0DE4  0433               	iorwf	??_AVG+3,w
  2139  0DE5  1903               	btfsc	3,2
  2140  0DE6  2E11               	goto	l2022
  2141                           
  2142                           ;adc.c: 121: ret += ARRAY[i];
  2143  0DE7  083E               	movf	AVG@i,w
  2144  0DE8  00B0               	movwf	??_AVG
  2145  0DE9  0730               	addwf	??_AVG,w
  2146  0DEA  073D               	addwf	AVG@ARRAY,w
  2147  0DEB  00B1               	movwf	??_AVG+1
  2148  0DEC  0831               	movf	??_AVG+1,w
  2149  0DED  0084               	movwf	4
  2150  0DEE  0800               	movf	0,w
  2151  0DEF  00B2               	movwf	??_AVG+2
  2152  0DF0  0A84               	incf	4,f
  2153  0DF1  0800               	movf	0,w
  2154  0DF2  00B3               	movwf	??_AVG+3
  2155  0DF3  0832               	movf	??_AVG+2,w
  2156  0DF4  00B4               	movwf	??_AVG+4
  2157  0DF5  0833               	movf	??_AVG+3,w
  2158  0DF6  00B5               	movwf	??_AVG+5
  2159  0DF7  01B6               	clrf	??_AVG+6
  2160  0DF8  01B7               	clrf	??_AVG+7
  2161  0DF9  0834               	movf	??_AVG+4,w
  2162  0DFA  07B8               	addwf	AVG@ret,f
  2163  0DFB  0835               	movf	??_AVG+5,w
  2164  0DFC  1103               	clrz
  2165  0DFD  1803               	skipnc
  2166  0DFE  3E01               	addlw	1
  2167  0DFF  1D03               	btfss	3,2
  2168  0E00  07B9               	addwf	AVG@ret+1,f
  2169  0E01  0836               	movf	??_AVG+6,w
  2170  0E02  1103               	clrz
  2171  0E03  1803               	skipnc
  2172  0E04  3E01               	addlw	1
  2173  0E05  1D03               	btfss	3,2
  2174  0E06  07BA               	addwf	AVG@ret+2,f
  2175  0E07  0837               	movf	??_AVG+7,w
  2176  0E08  1103               	clrz
  2177  0E09  1803               	skipnc
  2178  0E0A  3E01               	addlw	1
  2179  0E0B  1D03               	btfss	3,2
  2180  0E0C  07BB               	addwf	AVG@ret+3,f
  2181                           
  2182                           ;adc.c: 122: avg++;
  2183  0E0D  3001               	movlw	1
  2184  0E0E  00B0               	movwf	??_AVG
  2185  0E0F  0830               	movf	??_AVG,w
  2186  0E10  07BC               	addwf	AVG@avg,f
  2187  0E11                     l2022:	
  2188  0E11  3001               	movlw	1
  2189  0E12  00B0               	movwf	??_AVG
  2190  0E13  0830               	movf	??_AVG,w
  2191  0E14  07BE               	addwf	AVG@i,f
  2192  0E15  082E               	movf	AVG@index,w
  2193  0E16  023E               	subwf	AVG@i,w
  2194  0E17  1C03               	skipc
  2195  0E18  2DD6               	goto	l2016
  2196  0E19                     l2026:	
  2197                           
  2198                           ;adc.c: 123: }
  2199                           ;adc.c: 124: }
  2200                           ;adc.c: 125: return ((uint16_t)(ret / avg));
  2201  0E19  083C               	movf	AVG@avg,w
  2202  0E1A  00B0               	movwf	??_AVG
  2203  0E1B  01B1               	clrf	??_AVG+1
  2204  0E1C  01B2               	clrf	??_AVG+2
  2205  0E1D  01B3               	clrf	??_AVG+3
  2206  0E1E  0833               	movf	??_AVG+3,w
  2207  0E1F  00A3               	movwf	___lldiv@divisor+3
  2208  0E20  0832               	movf	??_AVG+2,w
  2209  0E21  00A2               	movwf	___lldiv@divisor+2
  2210  0E22  0831               	movf	??_AVG+1,w
  2211  0E23  00A1               	movwf	___lldiv@divisor+1
  2212  0E24  0830               	movf	??_AVG,w
  2213  0E25  00A0               	movwf	___lldiv@divisor
  2214  0E26  083B               	movf	AVG@ret+3,w
  2215  0E27  00A7               	movwf	___lldiv@dividend+3
  2216  0E28  083A               	movf	AVG@ret+2,w
  2217  0E29  00A6               	movwf	___lldiv@dividend+2
  2218  0E2A  0839               	movf	AVG@ret+1,w
  2219  0E2B  00A5               	movwf	___lldiv@dividend+1
  2220  0E2C  0838               	movf	AVG@ret,w
  2221  0E2D  00A4               	movwf	___lldiv@dividend
  2222  0E2E  158A  24F6         	fcall	___lldiv
  2223  0E30  1283               	bcf	3,5	;RP0=0, select bank0
  2224  0E31  1303               	bcf	3,6	;RP1=0, select bank0
  2225  0E32  0821               	movf	?___lldiv+1,w
  2226  0E33  00AF               	movwf	?_AVG+1
  2227  0E34  0820               	movf	?___lldiv,w
  2228  0E35  00AE               	movwf	?_AVG
  2229  0E36  0008               	return
  2230  0E37                     __end_of_AVG:	
  2231                           
  2232                           	psect	text8
  2233  0CF6                     __ptext8:	
  2234 ;; *************** function ___lldiv *****************
  2235 ;; Defined at:
  2236 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  2237 ;; Parameters:    Size  Location     Type
  2238 ;;  divisor         4    0[BANK0 ] unsigned long 
  2239 ;;  dividend        4    4[BANK0 ] unsigned long 
  2240 ;; Auto vars:     Size  Location     Type
  2241 ;;  quotient        4    9[BANK0 ] unsigned long 
  2242 ;;  counter         1   13[BANK0 ] unsigned char 
  2243 ;; Return value:  Size  Location     Type
  2244 ;;                  4    0[BANK0 ] unsigned long 
  2245 ;; Registers used:
  2246 ;;		wreg, status,2, status,0
  2247 ;; Tracked objects:
  2248 ;;		On entry : 0/0
  2249 ;;		On exit  : 0/0
  2250 ;;		Unchanged: 0/0
  2251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2252 ;;      Params:         0       8       0       0
  2253 ;;      Locals:         0       5       0       0
  2254 ;;      Temps:          0       1       0       0
  2255 ;;      Totals:         0      14       0       0
  2256 ;;Total ram usage:       14 bytes
  2257 ;; Hardware stack levels used:    1
  2258 ;; Hardware stack levels required when called:    2
  2259 ;; This function calls:
  2260 ;;		Nothing
  2261 ;; This function is called by:
  2262 ;;		_AVG
  2263 ;; This function uses a non-reentrant model
  2264 ;;
  2265                           
  2266                           
  2267                           ;psect for function ___lldiv
  2268  0CF6                     ___lldiv:	
  2269                           
  2270                           ;incstack = 0
  2271                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  2272  0CF6  3000               	movlw	0
  2273  0CF7  1283               	bcf	3,5	;RP0=0, select bank0
  2274  0CF8  1303               	bcf	3,6	;RP1=0, select bank0
  2275  0CF9  00AC               	movwf	___lldiv@quotient+3
  2276  0CFA  3000               	movlw	0
  2277  0CFB  00AB               	movwf	___lldiv@quotient+2
  2278  0CFC  3000               	movlw	0
  2279  0CFD  00AA               	movwf	___lldiv@quotient+1
  2280  0CFE  3000               	movlw	0
  2281  0CFF  00A9               	movwf	___lldiv@quotient
  2282  0D00  0823               	movf	___lldiv@divisor+3,w
  2283  0D01  0422               	iorwf	___lldiv@divisor+2,w
  2284  0D02  0421               	iorwf	___lldiv@divisor+1,w
  2285  0D03  0420               	iorwf	___lldiv@divisor,w
  2286  0D04  1903               	skipnz
  2287  0D05  2D4D               	goto	l1896
  2288  0D06  01AD               	clrf	___lldiv@counter
  2289  0D07  0AAD               	incf	___lldiv@counter,f
  2290  0D08                     l1882:	
  2291  0D08  1BA3               	btfsc	___lldiv@divisor+3,7
  2292  0D09  2D18               	goto	l1884
  2293  0D0A  3001               	movlw	1
  2294  0D0B  00A8               	movwf	??___lldiv
  2295  0D0C                     u2405:	
  2296  0D0C  1003               	clrc
  2297  0D0D  0DA0               	rlf	___lldiv@divisor,f
  2298  0D0E  0DA1               	rlf	___lldiv@divisor+1,f
  2299  0D0F  0DA2               	rlf	___lldiv@divisor+2,f
  2300  0D10  0DA3               	rlf	___lldiv@divisor+3,f
  2301  0D11  0BA8               	decfsz	??___lldiv,f
  2302  0D12  2D0C               	goto	u2405
  2303  0D13  3001               	movlw	1
  2304  0D14  00A8               	movwf	??___lldiv
  2305  0D15  0828               	movf	??___lldiv,w
  2306  0D16  07AD               	addwf	___lldiv@counter,f
  2307  0D17  2D08               	goto	l1882
  2308  0D18                     l1884:	
  2309  0D18  3001               	movlw	1
  2310  0D19  00A8               	movwf	??___lldiv
  2311  0D1A                     u2425:	
  2312  0D1A  1003               	clrc
  2313  0D1B  0DA9               	rlf	___lldiv@quotient,f
  2314  0D1C  0DAA               	rlf	___lldiv@quotient+1,f
  2315  0D1D  0DAB               	rlf	___lldiv@quotient+2,f
  2316  0D1E  0DAC               	rlf	___lldiv@quotient+3,f
  2317  0D1F  0BA8               	decfsz	??___lldiv,f
  2318  0D20  2D1A               	goto	u2425
  2319  0D21  0823               	movf	___lldiv@divisor+3,w
  2320  0D22  0227               	subwf	___lldiv@dividend+3,w
  2321  0D23  1D03               	skipz
  2322  0D24  2D2F               	goto	u2435
  2323  0D25  0822               	movf	___lldiv@divisor+2,w
  2324  0D26  0226               	subwf	___lldiv@dividend+2,w
  2325  0D27  1D03               	skipz
  2326  0D28  2D2F               	goto	u2435
  2327  0D29  0821               	movf	___lldiv@divisor+1,w
  2328  0D2A  0225               	subwf	___lldiv@dividend+1,w
  2329  0D2B  1D03               	skipz
  2330  0D2C  2D2F               	goto	u2435
  2331  0D2D  0820               	movf	___lldiv@divisor,w
  2332  0D2E  0224               	subwf	___lldiv@dividend,w
  2333  0D2F                     u2435:	
  2334  0D2F  1C03               	skipc
  2335  0D30  2D40               	goto	l1892
  2336  0D31  0820               	movf	___lldiv@divisor,w
  2337  0D32  02A4               	subwf	___lldiv@dividend,f
  2338  0D33  0821               	movf	___lldiv@divisor+1,w
  2339  0D34  1C03               	skipc
  2340  0D35  0F21               	incfsz	___lldiv@divisor+1,w
  2341  0D36  02A5               	subwf	___lldiv@dividend+1,f
  2342  0D37  0822               	movf	___lldiv@divisor+2,w
  2343  0D38  1C03               	skipc
  2344  0D39  0F22               	incfsz	___lldiv@divisor+2,w
  2345  0D3A  02A6               	subwf	___lldiv@dividend+2,f
  2346  0D3B  0823               	movf	___lldiv@divisor+3,w
  2347  0D3C  1C03               	skipc
  2348  0D3D  0F23               	incfsz	___lldiv@divisor+3,w
  2349  0D3E  02A7               	subwf	___lldiv@dividend+3,f
  2350  0D3F  1429               	bsf	___lldiv@quotient,0
  2351  0D40                     l1892:	
  2352  0D40  3001               	movlw	1
  2353  0D41                     u2445:	
  2354  0D41  1003               	clrc
  2355  0D42  0CA3               	rrf	___lldiv@divisor+3,f
  2356  0D43  0CA2               	rrf	___lldiv@divisor+2,f
  2357  0D44  0CA1               	rrf	___lldiv@divisor+1,f
  2358  0D45  0CA0               	rrf	___lldiv@divisor,f
  2359  0D46  3EFF               	addlw	-1
  2360  0D47  1D03               	skipz
  2361  0D48  2D41               	goto	u2445
  2362  0D49  3001               	movlw	1
  2363  0D4A  02AD               	subwf	___lldiv@counter,f
  2364  0D4B  1D03               	btfss	3,2
  2365  0D4C  2D18               	goto	l1884
  2366  0D4D                     l1896:	
  2367  0D4D  082C               	movf	___lldiv@quotient+3,w
  2368  0D4E  00A3               	movwf	?___lldiv+3
  2369  0D4F  082B               	movf	___lldiv@quotient+2,w
  2370  0D50  00A2               	movwf	?___lldiv+2
  2371  0D51  082A               	movf	___lldiv@quotient+1,w
  2372  0D52  00A1               	movwf	?___lldiv+1
  2373  0D53  0829               	movf	___lldiv@quotient,w
  2374  0D54  00A0               	movwf	?___lldiv
  2375  0D55  0008               	return
  2376  0D56                     __end_of___lldiv:	
  2377                           
  2378                           	psect	text9
  2379  0B1B                     __ptext9:	
  2380 ;; *************** function _ADC_RMS *****************
  2381 ;; Defined at:
  2382 ;;		line 28 in file "adc.c"
  2383 ;; Parameters:    Size  Location     Type
  2384 ;;  ARRAY           1    wreg     PTR unsigned int 
  2385 ;;		 -> CURRENT_ARRAY(8), VOLT_ARRAY(8), 
  2386 ;;  ANC             1   60[BANK0 ] unsigned char 
  2387 ;;  rate            2   61[BANK0 ] unsigned int 
  2388 ;;  index           1   63[BANK0 ] const unsigned char 
  2389 ;; Auto vars:     Size  Location     Type
  2390 ;;  ARRAY           1   71[BANK0 ] PTR unsigned int 
  2391 ;;		 -> CURRENT_ARRAY(8), VOLT_ARRAY(8), 
  2392 ;;  read            2   76[BANK0 ] unsigned int 
  2393 ;;  min             2   74[BANK0 ] unsigned int 
  2394 ;;  max             2   72[BANK0 ] unsigned int 
  2395 ;;  i               1   70[BANK0 ] unsigned char 
  2396 ;; Return value:  Size  Location     Type
  2397 ;;                  1    wreg      void 
  2398 ;; Registers used:
  2399 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2400 ;; Tracked objects:
  2401 ;;		On entry : 0/0
  2402 ;;		On exit  : 0/0
  2403 ;;		Unchanged: 0/0
  2404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2405 ;;      Params:         0       4       0       0
  2406 ;;      Locals:         0       8       0       0
  2407 ;;      Temps:          0       6       0       0
  2408 ;;      Totals:         0      18       0       0
  2409 ;;Total ram usage:       18 bytes
  2410 ;; Hardware stack levels used:    1
  2411 ;; Hardware stack levels required when called:    4
  2412 ;; This function calls:
  2413 ;;		_ADC_Read
  2414 ;;		___ftdiv
  2415 ;;		___ftmul
  2416 ;;		___fttol
  2417 ;;		___lwtoft
  2418 ;; This function is called by:
  2419 ;;		_Measure
  2420 ;; This function uses a non-reentrant model
  2421 ;;
  2422                           
  2423                           
  2424                           ;psect for function _ADC_RMS
  2425  0B1B                     _ADC_RMS:	
  2426                           
  2427                           ;incstack = 0
  2428                           ; Regs used in _ADC_RMS: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2429                           ;ADC_RMS@ARRAY stored from wreg
  2430  0B1B  1283               	bcf	3,5	;RP0=0, select bank0
  2431  0B1C  1303               	bcf	3,6	;RP1=0, select bank0
  2432  0B1D  00E7               	movwf	ADC_RMS@ARRAY
  2433                           
  2434                           ;adc.c: 29: uint8_t i;
  2435                           ;adc.c: 30: uint16_t read;
  2436                           ;adc.c: 31: uint16_t max = 0;
  2437  0B1E  01E8               	clrf	ADC_RMS@max
  2438  0B1F  01E9               	clrf	ADC_RMS@max+1
  2439                           
  2440                           ;adc.c: 32: uint16_t min = 1023;
  2441  0B20  30FF               	movlw	255
  2442  0B21  00EA               	movwf	ADC_RMS@min
  2443  0B22  3003               	movlw	3
  2444  0B23  00EB               	movwf	ADC_RMS@min+1
  2445                           
  2446                           ;adc.c: 33: for(i=0;i<256;i++){
  2447  0B24  01E6               	clrf	ADC_RMS@i
  2448  0B25                     l1916:	
  2449                           
  2450                           ;adc.c: 34: read = ADC_Read(ANC);
  2451  0B25  085C               	movf	ADC_RMS@ANC,w
  2452  0B26  158A  22EB  158A   	fcall	_ADC_Read
  2453  0B29  1283               	bcf	3,5	;RP0=0, select bank0
  2454  0B2A  1303               	bcf	3,6	;RP1=0, select bank0
  2455  0B2B  0821               	movf	?_ADC_Read+1,w
  2456  0B2C  00ED               	movwf	ADC_RMS@read+1
  2457  0B2D  0820               	movf	?_ADC_Read,w
  2458  0B2E  00EC               	movwf	ADC_RMS@read
  2459                           
  2460                           ;adc.c: 35: if(read > max) max = read;
  2461  0B2F  086D               	movf	ADC_RMS@read+1,w
  2462  0B30  0269               	subwf	ADC_RMS@max+1,w
  2463  0B31  1D03               	skipz
  2464  0B32  2B35               	goto	u2465
  2465  0B33  086C               	movf	ADC_RMS@read,w
  2466  0B34  0268               	subwf	ADC_RMS@max,w
  2467  0B35                     u2465:	
  2468  0B35  1803               	skipnc
  2469  0B36  2B3B               	goto	l61
  2470  0B37  086D               	movf	ADC_RMS@read+1,w
  2471  0B38  00E9               	movwf	ADC_RMS@max+1
  2472  0B39  086C               	movf	ADC_RMS@read,w
  2473  0B3A  00E8               	movwf	ADC_RMS@max
  2474  0B3B                     l61:	
  2475                           
  2476                           ;adc.c: 36: if(read < min) min = read;
  2477  0B3B  086B               	movf	ADC_RMS@min+1,w
  2478  0B3C  026D               	subwf	ADC_RMS@read+1,w
  2479  0B3D  1D03               	skipz
  2480  0B3E  2B41               	goto	u2475
  2481  0B3F  086A               	movf	ADC_RMS@min,w
  2482  0B40  026C               	subwf	ADC_RMS@read,w
  2483  0B41                     u2475:	
  2484  0B41  1803               	skipnc
  2485  0B42  2B47               	goto	l1924
  2486  0B43  086D               	movf	ADC_RMS@read+1,w
  2487  0B44  00EB               	movwf	ADC_RMS@min+1
  2488  0B45  086C               	movf	ADC_RMS@read,w
  2489  0B46  00EA               	movwf	ADC_RMS@min
  2490  0B47                     l1924:	
  2491  0B47  3001               	movlw	1
  2492  0B48  00E0               	movwf	??_ADC_RMS
  2493  0B49  0860               	movf	??_ADC_RMS,w
  2494  0B4A  07E6               	addwf	ADC_RMS@i,f
  2495  0B4B  2B25               	goto	l1916
  2496  0B4C                     __end_of_ADC_RMS:	
  2497                           ;adc.c: 37: }
  2498                           ;adc.c: 38: ARRAY[index] = (uint16_t)(((float)((max-min)/2)*rate)/10);
  2499                           
  2500                           
  2501                           	psect	text10
  2502  0AEB                     __ptext10:	
  2503 ;; *************** function _ADC_Read *****************
  2504 ;; Defined at:
  2505 ;;		line 17 in file "adc.c"
  2506 ;; Parameters:    Size  Location     Type
  2507 ;;  ANC             1    wreg     unsigned char 
  2508 ;; Auto vars:     Size  Location     Type
  2509 ;;  ANC             1    4[BANK0 ] unsigned char 
  2510 ;; Return value:  Size  Location     Type
  2511 ;;                  2    0[BANK0 ] unsigned int 
  2512 ;; Registers used:
  2513 ;;		wreg, status,2, status,0
  2514 ;; Tracked objects:
  2515 ;;		On entry : 0/0
  2516 ;;		On exit  : 0/0
  2517 ;;		Unchanged: 0/0
  2518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2519 ;;      Params:         0       2       0       0
  2520 ;;      Locals:         0       1       0       0
  2521 ;;      Temps:          0       2       0       0
  2522 ;;      Totals:         0       5       0       0
  2523 ;;Total ram usage:        5 bytes
  2524 ;; Hardware stack levels used:    1
  2525 ;; Hardware stack levels required when called:    2
  2526 ;; This function calls:
  2527 ;;		Nothing
  2528 ;; This function is called by:
  2529 ;;		_ADC_RMS
  2530 ;; This function uses a non-reentrant model
  2531 ;;
  2532                           
  2533                           
  2534                           ;psect for function _ADC_Read
  2535  0AEB                     _ADC_Read:	
  2536                           
  2537                           ;incstack = 0
  2538                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  2539                           ;ADC_Read@ANC stored from wreg
  2540  0AEB  1283               	bcf	3,5	;RP0=0, select bank0
  2541  0AEC  1303               	bcf	3,6	;RP1=0, select bank0
  2542  0AED  00A4               	movwf	ADC_Read@ANC
  2543                           
  2544                           ;adc.c: 18: if(ANC<0 || ANC>7) return 0;
  2545  0AEE  3008               	movlw	8
  2546  0AEF  0224               	subwf	ADC_Read@ANC,w
  2547  0AF0  1C03               	skipc
  2548  0AF1  2AF5               	goto	l1588
  2549  0AF2  01A0               	clrf	?_ADC_Read
  2550  0AF3  01A1               	clrf	?_ADC_Read+1
  2551  0AF4  0008               	return
  2552  0AF5                     l1588:	
  2553                           
  2554                           ;adc.c: 19: ADCON0 &= ~(7<<2);
  2555  0AF5  30E3               	movlw	227
  2556  0AF6  00A2               	movwf	??_ADC_Read
  2557  0AF7  0822               	movf	??_ADC_Read,w
  2558  0AF8  059F               	andwf	31,f	;volatile
  2559                           
  2560                           ;adc.c: 20: ADCON0 |= ANC<<2;
  2561  0AF9  0824               	movf	ADC_Read@ANC,w
  2562  0AFA  00A2               	movwf	??_ADC_Read
  2563  0AFB  3001               	movlw	1
  2564  0AFC                     u1695:	
  2565  0AFC  1003               	clrc
  2566  0AFD  0DA2               	rlf	??_ADC_Read,f
  2567  0AFE  3EFF               	addlw	-1
  2568  0AFF  1D03               	skipz
  2569  0B00  2AFC               	goto	u1695
  2570  0B01  1003               	clrc
  2571  0B02  0D22               	rlf	??_ADC_Read,w
  2572  0B03  00A3               	movwf	??_ADC_Read+1
  2573  0B04  0823               	movf	??_ADC_Read+1,w
  2574  0B05  049F               	iorwf	31,f	;volatile
  2575                           
  2576                           ;adc.c: 21: _delay((unsigned long)((20)*(8000000/4000000.0)));
  2577  0B06  300C               	movlw	12
  2578  0B07  1283               	bcf	3,5	;RP0=0, select bank0
  2579  0B08  1303               	bcf	3,6	;RP1=0, select bank0
  2580  0B09  00A2               	movwf	??_ADC_Read
  2581  0B0A                     u3117:	
  2582  0B0A  0BA2               	decfsz	??_ADC_Read,f
  2583  0B0B  2B0A               	goto	u3117
  2584  0B0C  2B0D               	nop2
  2585                           
  2586                           ;adc.c: 22: GO_DONE = 1;
  2587  0B0D  1283               	bcf	3,5	;RP0=0, select bank0
  2588  0B0E  1303               	bcf	3,6	;RP1=0, select bank0
  2589  0B0F  149F               	bsf	31,1	;volatile
  2590  0B10                     l54:	
  2591                           ;adc.c: 23: while(ADCON0bits.GO_DONE);
  2592                           
  2593  0B10  189F               	btfsc	31,1	;volatile
  2594  0B11  2B10               	goto	l54
  2595                           
  2596                           ;adc.c: 24: return ((ADRESH << 8) + ADRESL);
  2597  0B12  081E               	movf	30,w	;volatile
  2598  0B13  00A1               	movwf	?_ADC_Read+1
  2599  0B14  1683               	bsf	3,5	;RP0=1, select bank1
  2600  0B15  1303               	bcf	3,6	;RP1=0, select bank1
  2601  0B16  081E               	movf	30,w	;volatile
  2602  0B17  1283               	bcf	3,5	;RP0=0, select bank0
  2603  0B18  1303               	bcf	3,6	;RP1=0, select bank0
  2604  0B19  00A0               	movwf	?_ADC_Read
  2605  0B1A  0008               	return
  2606  0B1B                     __end_of_ADC_Read:	
  2607                           
  2608                           	psect	text11
  2609  002A                     __ptext11:	
  2610 ;; *************** function _ADC_PF *****************
  2611 ;; Defined at:
  2612 ;;		line 42 in file "adc.c"
  2613 ;; Parameters:    Size  Location     Type
  2614 ;;  ARRAY           1    wreg     PTR unsigned int 
  2615 ;;		 -> POWER_FACTOR_ARRAY(8), 
  2616 ;;  index           1   60[BANK0 ] const unsigned char 
  2617 ;; Auto vars:     Size  Location     Type
  2618 ;;  ARRAY           1    0[BANK1 ] PTR unsigned int 
  2619 ;;		 -> POWER_FACTOR_ARRAY(8), 
  2620 ;;  rad_angle       3   13[BANK1 ] float 
  2621 ;;  temp            3    7[BANK1 ] float 
  2622 ;;  step            3    4[BANK1 ] float 
  2623 ;;  angle           2   10[BANK1 ] unsigned int 
  2624 ;;  i               1   12[BANK1 ] unsigned char 
  2625 ;; Return value:  Size  Location     Type
  2626 ;;                  1    wreg      void 
  2627 ;; Registers used:
  2628 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2629 ;; Tracked objects:
  2630 ;;		On entry : 0/0
  2631 ;;		On exit  : 0/0
  2632 ;;		Unchanged: 0/0
  2633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2634 ;;      Params:         0       1       0       0
  2635 ;;      Locals:         0       0      16       0
  2636 ;;      Temps:          0       4       0       0
  2637 ;;      Totals:         0       5      16       0
  2638 ;;Total ram usage:       21 bytes
  2639 ;; Hardware stack levels used:    1
  2640 ;; Hardware stack levels required when called:    4
  2641 ;; This function calls:
  2642 ;;		___awtoft
  2643 ;;		___ftadd
  2644 ;;		___ftdiv
  2645 ;;		___ftge
  2646 ;;		___ftmul
  2647 ;;		___ftneg
  2648 ;;		___fttol
  2649 ;;		___lwdiv
  2650 ;;		___lwtoft
  2651 ;;		___wmul
  2652 ;; This function is called by:
  2653 ;;		_Measure
  2654 ;; This function uses a non-reentrant model
  2655 ;;
  2656                           
  2657                           
  2658                           ;psect for function _ADC_PF
  2659  002A                     _ADC_PF:	
  2660                           
  2661                           ;incstack = 0
  2662                           ; Regs used in _ADC_PF: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2663                           ;ADC_PF@ARRAY stored from wreg
  2664  002A  1683               	bsf	3,5	;RP0=1, select bank1
  2665  002B  1303               	bcf	3,6	;RP1=0, select bank1
  2666  002C  00CD               	movwf	ADC_PF@ARRAY^(0+128)
  2667                           
  2668                           ;adc.c: 43: float step = 1;
  2669  002D  3000               	movlw	0
  2670  002E  00D1               	movwf	ADC_PF@step^(0+128)
  2671  002F  3080               	movlw	128
  2672  0030  00D2               	movwf	(ADC_PF@step+1)^(0+128)
  2673  0031  303F               	movlw	63
  2674  0032  00D3               	movwf	(ADC_PF@step+2)^(0+128)
  2675                           
  2676                           ;adc.c: 44: float temp = 1;
  2677  0033  3000               	movlw	0
  2678  0034  00D4               	movwf	ADC_PF@temp^(0+128)
  2679  0035  3080               	movlw	128
  2680  0036  00D5               	movwf	(ADC_PF@temp+1)^(0+128)
  2681  0037  303F               	movlw	63
  2682  0038  00D6               	movwf	(ADC_PF@temp+2)^(0+128)
  2683                           
  2684                           ;adc.c: 45: float rad_angle;
  2685                           ;adc.c: 46: uint8_t i;
  2686                           ;adc.c: 47: uint16_t angle;
  2687                           ;adc.c: 49: TMR1H = 0; TMR1L = 0;
  2688  0039  1283               	bcf	3,5	;RP0=0, select bank0
  2689  003A  1303               	bcf	3,6	;RP1=0, select bank0
  2690  003B  018F               	clrf	15	;volatile
  2691  003C  018E               	clrf	14	;volatile
  2692                           
  2693                           ;adc.c: 50: PF_FLAG = 0;
  2694  003D  1683               	bsf	3,5	;RP0=1, select bank1
  2695  003E  1303               	bcf	3,6	;RP1=0, select bank1
  2696  003F  01AC               	clrf	_PF_FLAG^(0+128)
  2697  0040                     l2286:	
  2698                           ;adc.c: 51: while(!PF_FLAG);
  2699                           
  2700  0040  082C               	movf	_PF_FLAG^(0+128),w
  2701  0041  1903               	btfsc	3,2
  2702  0042  2840               	goto	l2286
  2703                           
  2704                           ;adc.c: 53: T1CONbits.TMR1ON = 1;
  2705  0043  1283               	bcf	3,5	;RP0=0, select bank0
  2706  0044  1303               	bcf	3,6	;RP1=0, select bank0
  2707  0045  1410               	bsf	16,0	;volatile
  2708                           
  2709                           ;adc.c: 55: PF_FLAG = 0;
  2710  0046  1683               	bsf	3,5	;RP0=1, select bank1
  2711  0047  1303               	bcf	3,6	;RP1=0, select bank1
  2712  0048  01AC               	clrf	_PF_FLAG^(0+128)
  2713  0049                     l69:	
  2714                           ;adc.c: 56: while(PORTC&0x01)
  2715                           
  2716  0049  1283               	bcf	3,5	;RP0=0, select bank0
  2717  004A  1303               	bcf	3,6	;RP1=0, select bank0
  2718  004B  1C07               	btfss	7,0	;volatile
  2719  004C  2852               	goto	l72
  2720                           
  2721                           ;adc.c: 57: if(PF_FLAG) break;
  2722  004D  1683               	bsf	3,5	;RP0=1, select bank1
  2723  004E  1303               	bcf	3,6	;RP1=0, select bank1
  2724  004F  082C               	movf	_PF_FLAG^(0+128),w
  2725  0050  1903               	btfsc	3,2
  2726  0051  2849               	goto	l69
  2727  0052                     l72:	
  2728                           
  2729                           ;adc.c: 58: T1CONbits.TMR1ON = 0;
  2730  0052  1283               	bcf	3,5	;RP0=0, select bank0
  2731  0053  1010               	bcf	16,0	;volatile
  2732                           
  2733                           ;adc.c: 61: rad_angle = ((float)((uint16_t)(TMR1H<<8)+TMR1L) * F_VALUE) * 0.15708;
  2734  0054  1683               	bsf	3,5	;RP0=1, select bank1
  2735  0055  1303               	bcf	3,6	;RP1=0, select bank1
  2736  0056  086A               	movf	(_F_VALUE+1)^(0+128),w
  2737  0057  1283               	bcf	3,5	;RP0=0, select bank0
  2738  0058  1303               	bcf	3,6	;RP1=0, select bank0
  2739  0059  00A9               	movwf	___lwtoft@c+1
  2740  005A  1683               	bsf	3,5	;RP0=1, select bank1
  2741  005B  1303               	bcf	3,6	;RP1=0, select bank1
  2742  005C  0869               	movf	_F_VALUE^(0+128),w
  2743  005D  1283               	bcf	3,5	;RP0=0, select bank0
  2744  005E  1303               	bcf	3,6	;RP1=0, select bank0
  2745  005F  00A8               	movwf	___lwtoft@c
  2746  0060  158A  222A  118A   	fcall	___lwtoft
  2747  0063  1283               	bcf	3,5	;RP0=0, select bank0
  2748  0064  1303               	bcf	3,6	;RP1=0, select bank0
  2749  0065  0828               	movf	?___lwtoft,w
  2750  0066  00AE               	movwf	___ftmul@f1
  2751  0067  0829               	movf	?___lwtoft+1,w
  2752  0068  00AF               	movwf	___ftmul@f1+1
  2753  0069  082A               	movf	?___lwtoft+2,w
  2754  006A  00B0               	movwf	___ftmul@f1+2
  2755  006B  080F               	movf	15,w	;volatile
  2756  006C  00DD               	movwf	??_ADC_PF
  2757  006D  01DE               	clrf	??_ADC_PF+1
  2758  006E  085D               	movf	??_ADC_PF,w
  2759  006F  00DE               	movwf	??_ADC_PF+1
  2760  0070  01DD               	clrf	??_ADC_PF
  2761  0071  080E               	movf	14,w	;volatile
  2762  0072  075D               	addwf	??_ADC_PF,w
  2763  0073  00A8               	movwf	___lwtoft@c
  2764  0074  3000               	movlw	0
  2765  0075  1803               	skipnc
  2766  0076  3001               	movlw	1
  2767  0077  075E               	addwf	??_ADC_PF+1,w
  2768  0078  00A9               	movwf	___lwtoft@c+1
  2769  0079  158A  222A  118A   	fcall	___lwtoft
  2770  007C  1283               	bcf	3,5	;RP0=0, select bank0
  2771  007D  1303               	bcf	3,6	;RP1=0, select bank0
  2772  007E  0828               	movf	?___lwtoft,w
  2773  007F  00B1               	movwf	___ftmul@f2
  2774  0080  0829               	movf	?___lwtoft+1,w
  2775  0081  00B2               	movwf	___ftmul@f2+1
  2776  0082  082A               	movf	?___lwtoft+2,w
  2777  0083  00B3               	movwf	___ftmul@f2+2
  2778  0084  118A  2591  118A   	fcall	___ftmul
  2779  0087  1283               	bcf	3,5	;RP0=0, select bank0
  2780  0088  1303               	bcf	3,6	;RP1=0, select bank0
  2781  0089  082E               	movf	?___ftmul,w
  2782  008A  1683               	bsf	3,5	;RP0=1, select bank1
  2783  008B  1303               	bcf	3,6	;RP1=0, select bank1
  2784  008C  00CE               	movwf	_ADC_PF$960^(0+128)
  2785  008D  1283               	bcf	3,5	;RP0=0, select bank0
  2786  008E  1303               	bcf	3,6	;RP1=0, select bank0
  2787  008F  082F               	movf	?___ftmul+1,w
  2788  0090  1683               	bsf	3,5	;RP0=1, select bank1
  2789  0091  1303               	bcf	3,6	;RP1=0, select bank1
  2790  0092  00CF               	movwf	(_ADC_PF$960+1)^(0+128)
  2791  0093  1283               	bcf	3,5	;RP0=0, select bank0
  2792  0094  1303               	bcf	3,6	;RP1=0, select bank0
  2793  0095  0830               	movf	?___ftmul+2,w
  2794  0096  1683               	bsf	3,5	;RP0=1, select bank1
  2795  0097  1303               	bcf	3,6	;RP1=0, select bank1
  2796  0098  00D0               	movwf	(_ADC_PF$960+2)^(0+128)
  2797                           
  2798                           ;adc.c: 61: rad_angle = ((float)((uint16_t)(TMR1H<<8)+TMR1L) * F_VALUE) * 0.15708;
  2799  0099  30DA               	movlw	218
  2800  009A  1283               	bcf	3,5	;RP0=0, select bank0
  2801  009B  1303               	bcf	3,6	;RP1=0, select bank0
  2802  009C  00AE               	movwf	___ftmul@f1
  2803  009D  3020               	movlw	32
  2804  009E  00AF               	movwf	___ftmul@f1+1
  2805  009F  303E               	movlw	62
  2806  00A0  00B0               	movwf	___ftmul@f1+2
  2807  00A1  1683               	bsf	3,5	;RP0=1, select bank1
  2808  00A2  1303               	bcf	3,6	;RP1=0, select bank1
  2809  00A3  084E               	movf	_ADC_PF$960^(0+128),w
  2810  00A4  1283               	bcf	3,5	;RP0=0, select bank0
  2811  00A5  1303               	bcf	3,6	;RP1=0, select bank0
  2812  00A6  00B1               	movwf	___ftmul@f2
  2813  00A7  1683               	bsf	3,5	;RP0=1, select bank1
  2814  00A8  1303               	bcf	3,6	;RP1=0, select bank1
  2815  00A9  084F               	movf	(_ADC_PF$960+1)^(0+128),w
  2816  00AA  1283               	bcf	3,5	;RP0=0, select bank0
  2817  00AB  1303               	bcf	3,6	;RP1=0, select bank0
  2818  00AC  00B2               	movwf	___ftmul@f2+1
  2819  00AD  1683               	bsf	3,5	;RP0=1, select bank1
  2820  00AE  1303               	bcf	3,6	;RP1=0, select bank1
  2821  00AF  0850               	movf	(_ADC_PF$960+2)^(0+128),w
  2822  00B0  1283               	bcf	3,5	;RP0=0, select bank0
  2823  00B1  1303               	bcf	3,6	;RP1=0, select bank0
  2824  00B2  00B3               	movwf	___ftmul@f2+2
  2825  00B3  118A  2591  118A   	fcall	___ftmul
  2826  00B6  1283               	bcf	3,5	;RP0=0, select bank0
  2827  00B7  1303               	bcf	3,6	;RP1=0, select bank0
  2828  00B8  082E               	movf	?___ftmul,w
  2829  00B9  1683               	bsf	3,5	;RP0=1, select bank1
  2830  00BA  1303               	bcf	3,6	;RP1=0, select bank1
  2831  00BB  00DA               	movwf	ADC_PF@rad_angle^(0+128)
  2832  00BC  1283               	bcf	3,5	;RP0=0, select bank0
  2833  00BD  1303               	bcf	3,6	;RP1=0, select bank0
  2834  00BE  082F               	movf	?___ftmul+1,w
  2835  00BF  1683               	bsf	3,5	;RP0=1, select bank1
  2836  00C0  1303               	bcf	3,6	;RP1=0, select bank1
  2837  00C1  00DB               	movwf	(ADC_PF@rad_angle+1)^(0+128)
  2838  00C2  1283               	bcf	3,5	;RP0=0, select bank0
  2839  00C3  1303               	bcf	3,6	;RP1=0, select bank0
  2840  00C4  0830               	movf	?___ftmul+2,w
  2841  00C5  1683               	bsf	3,5	;RP0=1, select bank1
  2842  00C6  1303               	bcf	3,6	;RP1=0, select bank1
  2843  00C7  00DC               	movwf	(ADC_PF@rad_angle+2)^(0+128)
  2844                           
  2845                           ;adc.c: 62: angle = (uint16_t)rad_angle;
  2846  00C8  085A               	movf	ADC_PF@rad_angle^(0+128),w
  2847  00C9  1283               	bcf	3,5	;RP0=0, select bank0
  2848  00CA  1303               	bcf	3,6	;RP1=0, select bank0
  2849  00CB  00CE               	movwf	___fttol@f1
  2850  00CC  1683               	bsf	3,5	;RP0=1, select bank1
  2851  00CD  1303               	bcf	3,6	;RP1=0, select bank1
  2852  00CE  085B               	movf	(ADC_PF@rad_angle+1)^(0+128),w
  2853  00CF  1283               	bcf	3,5	;RP0=0, select bank0
  2854  00D0  1303               	bcf	3,6	;RP1=0, select bank0
  2855  00D1  00CF               	movwf	___fttol@f1+1
  2856  00D2  1683               	bsf	3,5	;RP0=1, select bank1
  2857  00D3  1303               	bcf	3,6	;RP1=0, select bank1
  2858  00D4  085C               	movf	(ADC_PF@rad_angle+2)^(0+128),w
  2859  00D5  1283               	bcf	3,5	;RP0=0, select bank0
  2860  00D6  1303               	bcf	3,6	;RP1=0, select bank0
  2861  00D7  00D0               	movwf	___fttol@f1+2
  2862  00D8  158A  2637  118A   	fcall	___fttol
  2863  00DB  1283               	bcf	3,5	;RP0=0, select bank0
  2864  00DC  1303               	bcf	3,6	;RP1=0, select bank0
  2865  00DD  084F               	movf	?___fttol+1,w
  2866  00DE  1683               	bsf	3,5	;RP0=1, select bank1
  2867  00DF  1303               	bcf	3,6	;RP1=0, select bank1
  2868  00E0  00D8               	movwf	(ADC_PF@angle+1)^(0+128)
  2869  00E1  1283               	bcf	3,5	;RP0=0, select bank0
  2870  00E2  1303               	bcf	3,6	;RP1=0, select bank0
  2871  00E3  084E               	movf	?___fttol,w
  2872  00E4  1683               	bsf	3,5	;RP0=1, select bank1
  2873  00E5  1303               	bcf	3,6	;RP1=0, select bank1
  2874  00E6  00D7               	movwf	ADC_PF@angle^(0+128)
  2875                           
  2876                           ;adc.c: 64: switch((uint8_t)(angle/(31416/2))){
  2877  00E7  2935               	goto	l2312
  2878  00E8                     l74:	
  2879                           ;adc.c: 65: case 0:
  2880                           
  2881  00E8  2930               	goto	l79
  2882  00E9                     l2300:	
  2883                           ;adc.c: 68: case 1:
  2884                           
  2885                           ;adc.c: 67: break;
  2886                           
  2887                           ;adc.c: 66: PF_FLAG = 1;
  2888                           
  2889                           
  2890                           ;adc.c: 69: PF_FLAG = 0;
  2891  00E9  1683               	bsf	3,5	;RP0=1, select bank1
  2892  00EA  1303               	bcf	3,6	;RP1=0, select bank1
  2893  00EB  01AC               	clrf	_PF_FLAG^(0+128)
  2894                           
  2895                           ;adc.c: 70: angle = 31416 - angle;
  2896  00EC  0957               	comf	ADC_PF@angle^(0+128),w
  2897  00ED  1283               	bcf	3,5	;RP0=0, select bank0
  2898  00EE  1303               	bcf	3,6	;RP1=0, select bank0
  2899  00EF  00DD               	movwf	??_ADC_PF
  2900  00F0  1683               	bsf	3,5	;RP0=1, select bank1
  2901  00F1  1303               	bcf	3,6	;RP1=0, select bank1
  2902  00F2  0958               	comf	(ADC_PF@angle+1)^(0+128),w
  2903  00F3  1283               	bcf	3,5	;RP0=0, select bank0
  2904  00F4  1303               	bcf	3,6	;RP1=0, select bank0
  2905  00F5  00DE               	movwf	??_ADC_PF+1
  2906  00F6  0ADD               	incf	??_ADC_PF,f
  2907  00F7  1903               	skipnz
  2908  00F8  0ADE               	incf	??_ADC_PF+1,f
  2909  00F9  085D               	movf	??_ADC_PF,w
  2910  00FA  3EB8               	addlw	184
  2911  00FB  1683               	bsf	3,5	;RP0=1, select bank1
  2912  00FC  1303               	bcf	3,6	;RP1=0, select bank1
  2913  00FD  00D7               	movwf	ADC_PF@angle^(0+128)
  2914  00FE  1283               	bcf	3,5	;RP0=0, select bank0
  2915  00FF  1303               	bcf	3,6	;RP1=0, select bank0
  2916  0100  085E               	movf	??_ADC_PF+1,w
  2917  0101  1803               	skipnc
  2918  0102  3E01               	addlw	1
  2919  0103  3E7A               	addlw	122
  2920  0104  292C               	goto	L5
  2921  0105                     l2304:	
  2922                           ;adc.c: 72: case 2:
  2923                           
  2924                           ;adc.c: 71: break;
  2925                           
  2926                           
  2927                           ;adc.c: 73: PF_FLAG = 0;
  2928  0105  1683               	bsf	3,5	;RP0=1, select bank1
  2929  0106  1303               	bcf	3,6	;RP1=0, select bank1
  2930  0107  01AC               	clrf	_PF_FLAG^(0+128)
  2931                           
  2932                           ;adc.c: 74: angle = angle - 31416;
  2933  0108  0857               	movf	ADC_PF@angle^(0+128),w
  2934  0109  3E48               	addlw	72
  2935  010A  00D7               	movwf	ADC_PF@angle^(0+128)
  2936  010B  0858               	movf	(ADC_PF@angle+1)^(0+128),w
  2937  010C  1803               	skipnc
  2938  010D  3E01               	addlw	1
  2939  010E  3E85               	addlw	133
  2940  010F  292E               	goto	L3
  2941  0110                     l78:	
  2942                           ;adc.c: 76: case 3:
  2943                           
  2944                           ;adc.c: 75: break;
  2945                           
  2946                           
  2947                           ;adc.c: 77: PF_FLAG = 1;
  2948  0110  1683               	bsf	3,5	;RP0=1, select bank1
  2949  0111  1303               	bcf	3,6	;RP1=0, select bank1
  2950  0112  01AC               	clrf	_PF_FLAG^(0+128)
  2951  0113  0AAC               	incf	_PF_FLAG^(0+128),f
  2952                           
  2953                           ;adc.c: 78: angle = (31416*2) - angle;
  2954  0114  0957               	comf	ADC_PF@angle^(0+128),w
  2955  0115  1283               	bcf	3,5	;RP0=0, select bank0
  2956  0116  1303               	bcf	3,6	;RP1=0, select bank0
  2957  0117  00DD               	movwf	??_ADC_PF
  2958  0118  1683               	bsf	3,5	;RP0=1, select bank1
  2959  0119  1303               	bcf	3,6	;RP1=0, select bank1
  2960  011A  0958               	comf	(ADC_PF@angle+1)^(0+128),w
  2961  011B  1283               	bcf	3,5	;RP0=0, select bank0
  2962  011C  1303               	bcf	3,6	;RP1=0, select bank0
  2963  011D  00DE               	movwf	??_ADC_PF+1
  2964  011E  0ADD               	incf	??_ADC_PF,f
  2965  011F  1903               	skipnz
  2966  0120  0ADE               	incf	??_ADC_PF+1,f
  2967  0121  085D               	movf	??_ADC_PF,w
  2968  0122  3E70               	addlw	112
  2969  0123  1683               	bsf	3,5	;RP0=1, select bank1
  2970  0124  1303               	bcf	3,6	;RP1=0, select bank1
  2971  0125  00D7               	movwf	ADC_PF@angle^(0+128)
  2972  0126  1283               	bcf	3,5	;RP0=0, select bank0
  2973  0127  1303               	bcf	3,6	;RP1=0, select bank0
  2974  0128  085E               	movf	??_ADC_PF+1,w
  2975  0129  1803               	skipnc
  2976  012A  3E01               	addlw	1
  2977  012B  3EF5               	addlw	245
  2978  012C                     L5:	
  2979  012C  1683               	bsf	3,5	;RP0=1, select bank1
  2980  012D  1303               	bcf	3,6	;RP1=0, select bank1
  2981  012E                     L3:	
  2982  012E  00D8               	movwf	(ADC_PF@angle+1)^(0+128)
  2983                           
  2984                           ;adc.c: 79: break;
  2985  012F  295A               	goto	l2314
  2986  0130                     l79:	
  2987                           ;adc.c: 80: default:
  2988                           
  2989                           
  2990                           ;adc.c: 81: PF_FLAG = 1;
  2991  0130  1683               	bsf	3,5	;RP0=1, select bank1
  2992  0131  1303               	bcf	3,6	;RP1=0, select bank1
  2993  0132  01AC               	clrf	_PF_FLAG^(0+128)
  2994  0133  0AAC               	incf	_PF_FLAG^(0+128),f
  2995                           
  2996                           ;adc.c: 83: }
  2997                           
  2998                           ;adc.c: 82: break;
  2999  0134  295A               	goto	l2314
  3000  0135                     l2312:	
  3001  0135  305C               	movlw	92
  3002  0136  1283               	bcf	3,5	;RP0=0, select bank0
  3003  0137  1303               	bcf	3,6	;RP1=0, select bank0
  3004  0138  00A0               	movwf	___lwdiv@divisor
  3005  0139  303D               	movlw	61
  3006  013A  00A1               	movwf	___lwdiv@divisor+1
  3007  013B  1683               	bsf	3,5	;RP0=1, select bank1
  3008  013C  1303               	bcf	3,6	;RP1=0, select bank1
  3009  013D  0858               	movf	(ADC_PF@angle+1)^(0+128),w
  3010  013E  1283               	bcf	3,5	;RP0=0, select bank0
  3011  013F  1303               	bcf	3,6	;RP1=0, select bank0
  3012  0140  00A3               	movwf	___lwdiv@dividend+1
  3013  0141  1683               	bsf	3,5	;RP0=1, select bank1
  3014  0142  1303               	bcf	3,6	;RP1=0, select bank1
  3015  0143  0857               	movf	ADC_PF@angle^(0+128),w
  3016  0144  1283               	bcf	3,5	;RP0=0, select bank0
  3017  0145  1303               	bcf	3,6	;RP1=0, select bank0
  3018  0146  00A2               	movwf	___lwdiv@dividend
  3019  0147  158A  23BD  118A   	fcall	___lwdiv
  3020  014A  1283               	bcf	3,5	;RP0=0, select bank0
  3021  014B  1303               	bcf	3,6	;RP1=0, select bank0
  3022  014C  0820               	movf	?___lwdiv,w
  3023                           
  3024                           ; Switch size 1, requested type "space"
  3025                           ; Number of cases is 4, Range of values is 0 to 3
  3026                           ; switch strategies available:
  3027                           ; Name         Instructions Cycles
  3028                           ; simple_byte           13     7 (average)
  3029                           ; direct_byte           15     7 (fixed)
  3030                           ; jumptable            260     6 (fixed)
  3031                           ;	Chosen strategy is simple_byte
  3032  014D  3A00               	xorlw	0	; case 0
  3033  014E  1903               	skipnz
  3034  014F  28E8               	goto	l74
  3035  0150  3A01               	xorlw	1	; case 1
  3036  0151  1903               	skipnz
  3037  0152  28E9               	goto	l2300
  3038  0153  3A03               	xorlw	3	; case 2
  3039  0154  1903               	skipnz
  3040  0155  2905               	goto	l2304
  3041  0156  3A01               	xorlw	1	; case 3
  3042  0157  1903               	skipnz
  3043  0158  2910               	goto	l78
  3044  0159  2930               	goto	l79
  3045  015A                     l2314:	
  3046                           
  3047                           ;adc.c: 86: if(angle<(31416/4)){
  3048  015A  301E               	movlw	30
  3049  015B  1683               	bsf	3,5	;RP0=1, select bank1
  3050  015C  1303               	bcf	3,6	;RP1=0, select bank1
  3051  015D  0258               	subwf	(ADC_PF@angle+1)^(0+128),w
  3052  015E  30AE               	movlw	174
  3053  015F  1903               	skipnz
  3054  0160  0257               	subwf	ADC_PF@angle^(0+128),w
  3055  0161  1803               	skipnc
  3056  0162  2AAE               	goto	l2330
  3057                           
  3058                           ;adc.c: 87: rad_angle /= 10000.0;
  3059  0163  3040               	movlw	64
  3060  0164  1283               	bcf	3,5	;RP0=0, select bank0
  3061  0165  1303               	bcf	3,6	;RP1=0, select bank0
  3062  0166  00BE               	movwf	___ftdiv@f2
  3063  0167  301C               	movlw	28
  3064  0168  00BF               	movwf	___ftdiv@f2+1
  3065  0169  3046               	movlw	70
  3066  016A  00C0               	movwf	___ftdiv@f2+2
  3067  016B  1683               	bsf	3,5	;RP0=1, select bank1
  3068  016C  1303               	bcf	3,6	;RP1=0, select bank1
  3069  016D  085A               	movf	ADC_PF@rad_angle^(0+128),w
  3070  016E  1283               	bcf	3,5	;RP0=0, select bank0
  3071  016F  1303               	bcf	3,6	;RP1=0, select bank0
  3072  0170  00C1               	movwf	___ftdiv@f1
  3073  0171  1683               	bsf	3,5	;RP0=1, select bank1
  3074  0172  1303               	bcf	3,6	;RP1=0, select bank1
  3075  0173  085B               	movf	(ADC_PF@rad_angle+1)^(0+128),w
  3076  0174  1283               	bcf	3,5	;RP0=0, select bank0
  3077  0175  1303               	bcf	3,6	;RP1=0, select bank0
  3078  0176  00C2               	movwf	___ftdiv@f1+1
  3079  0177  1683               	bsf	3,5	;RP0=1, select bank1
  3080  0178  1303               	bcf	3,6	;RP1=0, select bank1
  3081  0179  085C               	movf	(ADC_PF@rad_angle+2)^(0+128),w
  3082  017A  1283               	bcf	3,5	;RP0=0, select bank0
  3083  017B  1303               	bcf	3,6	;RP1=0, select bank0
  3084  017C  00C3               	movwf	___ftdiv@f1+2
  3085  017D  118A  2722  118A   	fcall	___ftdiv
  3086  0180  1283               	bcf	3,5	;RP0=0, select bank0
  3087  0181  1303               	bcf	3,6	;RP1=0, select bank0
  3088  0182  083E               	movf	?___ftdiv,w
  3089  0183  1683               	bsf	3,5	;RP0=1, select bank1
  3090  0184  1303               	bcf	3,6	;RP1=0, select bank1
  3091  0185  00DA               	movwf	ADC_PF@rad_angle^(0+128)
  3092  0186  1283               	bcf	3,5	;RP0=0, select bank0
  3093  0187  1303               	bcf	3,6	;RP1=0, select bank0
  3094  0188  083F               	movf	?___ftdiv+1,w
  3095  0189  1683               	bsf	3,5	;RP0=1, select bank1
  3096  018A  1303               	bcf	3,6	;RP1=0, select bank1
  3097  018B  00DB               	movwf	(ADC_PF@rad_angle+1)^(0+128)
  3098  018C  1283               	bcf	3,5	;RP0=0, select bank0
  3099  018D  1303               	bcf	3,6	;RP1=0, select bank0
  3100  018E  0840               	movf	?___ftdiv+2,w
  3101  018F  1683               	bsf	3,5	;RP0=1, select bank1
  3102  0190  1303               	bcf	3,6	;RP1=0, select bank1
  3103  0191  00DC               	movwf	(ADC_PF@rad_angle+2)^(0+128)
  3104                           
  3105                           ;adc.c: 88: rad_angle *= rad_angle;
  3106  0192  085A               	movf	ADC_PF@rad_angle^(0+128),w
  3107  0193  1283               	bcf	3,5	;RP0=0, select bank0
  3108  0194  1303               	bcf	3,6	;RP1=0, select bank0
  3109  0195  00AE               	movwf	___ftmul@f1
  3110  0196  1683               	bsf	3,5	;RP0=1, select bank1
  3111  0197  1303               	bcf	3,6	;RP1=0, select bank1
  3112  0198  085B               	movf	(ADC_PF@rad_angle+1)^(0+128),w
  3113  0199  1283               	bcf	3,5	;RP0=0, select bank0
  3114  019A  1303               	bcf	3,6	;RP1=0, select bank0
  3115  019B  00AF               	movwf	___ftmul@f1+1
  3116  019C  1683               	bsf	3,5	;RP0=1, select bank1
  3117  019D  1303               	bcf	3,6	;RP1=0, select bank1
  3118  019E  085C               	movf	(ADC_PF@rad_angle+2)^(0+128),w
  3119  019F  1283               	bcf	3,5	;RP0=0, select bank0
  3120  01A0  1303               	bcf	3,6	;RP1=0, select bank0
  3121  01A1  00B0               	movwf	___ftmul@f1+2
  3122  01A2  1683               	bsf	3,5	;RP0=1, select bank1
  3123  01A3  1303               	bcf	3,6	;RP1=0, select bank1
  3124  01A4  085A               	movf	ADC_PF@rad_angle^(0+128),w
  3125  01A5  1283               	bcf	3,5	;RP0=0, select bank0
  3126  01A6  1303               	bcf	3,6	;RP1=0, select bank0
  3127  01A7  00B1               	movwf	___ftmul@f2
  3128  01A8  1683               	bsf	3,5	;RP0=1, select bank1
  3129  01A9  1303               	bcf	3,6	;RP1=0, select bank1
  3130  01AA  085B               	movf	(ADC_PF@rad_angle+1)^(0+128),w
  3131  01AB  1283               	bcf	3,5	;RP0=0, select bank0
  3132  01AC  1303               	bcf	3,6	;RP1=0, select bank0
  3133  01AD  00B2               	movwf	___ftmul@f2+1
  3134  01AE  1683               	bsf	3,5	;RP0=1, select bank1
  3135  01AF  1303               	bcf	3,6	;RP1=0, select bank1
  3136  01B0  085C               	movf	(ADC_PF@rad_angle+2)^(0+128),w
  3137  01B1  1283               	bcf	3,5	;RP0=0, select bank0
  3138  01B2  1303               	bcf	3,6	;RP1=0, select bank0
  3139  01B3  00B3               	movwf	___ftmul@f2+2
  3140  01B4  118A  2591  118A   	fcall	___ftmul
  3141  01B7  1283               	bcf	3,5	;RP0=0, select bank0
  3142  01B8  1303               	bcf	3,6	;RP1=0, select bank0
  3143  01B9  082E               	movf	?___ftmul,w
  3144  01BA  1683               	bsf	3,5	;RP0=1, select bank1
  3145  01BB  1303               	bcf	3,6	;RP1=0, select bank1
  3146  01BC  00DA               	movwf	ADC_PF@rad_angle^(0+128)
  3147  01BD  1283               	bcf	3,5	;RP0=0, select bank0
  3148  01BE  1303               	bcf	3,6	;RP1=0, select bank0
  3149  01BF  082F               	movf	?___ftmul+1,w
  3150  01C0  1683               	bsf	3,5	;RP0=1, select bank1
  3151  01C1  1303               	bcf	3,6	;RP1=0, select bank1
  3152  01C2  00DB               	movwf	(ADC_PF@rad_angle+1)^(0+128)
  3153  01C3  1283               	bcf	3,5	;RP0=0, select bank0
  3154  01C4  1303               	bcf	3,6	;RP1=0, select bank0
  3155  01C5  0830               	movf	?___ftmul+2,w
  3156  01C6  1683               	bsf	3,5	;RP0=1, select bank1
  3157  01C7  1303               	bcf	3,6	;RP1=0, select bank1
  3158  01C8  00DC               	movwf	(ADC_PF@rad_angle+2)^(0+128)
  3159                           
  3160                           ;adc.c: 89: for(i=1;i<=5;i++){
  3161  01C9  01D9               	clrf	ADC_PF@i^(0+128)
  3162  01CA  0AD9               	incf	ADC_PF@i^(0+128),f
  3163  01CB                     L4:	
  3164  01CB  3006               	movlw	6
  3165  01CC  0259               	subwf	ADC_PF@i^(0+128),w
  3166  01CD  1803               	btfsc	3,0
  3167  01CE  2C24               	goto	l2348
  3168                           
  3169                           ;adc.c: 90: step *= ((-1*rad_angle)/(2*i*(2*i-1)));
  3170  01CF  085A               	movf	ADC_PF@rad_angle^(0+128),w
  3171  01D0  1283               	bcf	3,5	;RP0=0, select bank0
  3172  01D1  1303               	bcf	3,6	;RP1=0, select bank0
  3173  01D2  00B1               	movwf	___ftmul@f2
  3174  01D3  1683               	bsf	3,5	;RP0=1, select bank1
  3175  01D4  1303               	bcf	3,6	;RP1=0, select bank1
  3176  01D5  085B               	movf	(ADC_PF@rad_angle+1)^(0+128),w
  3177  01D6  1283               	bcf	3,5	;RP0=0, select bank0
  3178  01D7  1303               	bcf	3,6	;RP1=0, select bank0
  3179  01D8  00B2               	movwf	___ftmul@f2+1
  3180  01D9  1683               	bsf	3,5	;RP0=1, select bank1
  3181  01DA  1303               	bcf	3,6	;RP1=0, select bank1
  3182  01DB  085C               	movf	(ADC_PF@rad_angle+2)^(0+128),w
  3183  01DC  1283               	bcf	3,5	;RP0=0, select bank0
  3184  01DD  1303               	bcf	3,6	;RP1=0, select bank0
  3185  01DE  00B3               	movwf	___ftmul@f2+2
  3186  01DF  3000               	movlw	0
  3187  01E0  00AE               	movwf	___ftmul@f1
  3188  01E1  3080               	movlw	128
  3189  01E2  00AF               	movwf	___ftmul@f1+1
  3190  01E3  30BF               	movlw	191
  3191  01E4  00B0               	movwf	___ftmul@f1+2
  3192  01E5  118A  2591  118A   	fcall	___ftmul
  3193  01E8  1283               	bcf	3,5	;RP0=0, select bank0
  3194  01E9  1303               	bcf	3,6	;RP1=0, select bank0
  3195  01EA  082E               	movf	?___ftmul,w
  3196  01EB  00C1               	movwf	___ftdiv@f1
  3197  01EC  082F               	movf	?___ftmul+1,w
  3198  01ED  00C2               	movwf	___ftdiv@f1+1
  3199  01EE  0830               	movf	?___ftmul+2,w
  3200  01EF  00C3               	movwf	___ftdiv@f1+2
  3201  01F0  1683               	bsf	3,5	;RP0=1, select bank1
  3202  01F1  1303               	bcf	3,6	;RP1=0, select bank1
  3203  01F2  0859               	movf	ADC_PF@i^(0+128),w
  3204  01F3  1283               	bcf	3,5	;RP0=0, select bank0
  3205  01F4  1303               	bcf	3,6	;RP1=0, select bank0
  3206  01F5  00DD               	movwf	??_ADC_PF
  3207  01F6  01DE               	clrf	??_ADC_PF+1
  3208  01F7  1003               	clrc
  3209  01F8  0D5D               	rlf	??_ADC_PF,w
  3210  01F9  00A2               	movwf	___wmul@multiplicand
  3211  01FA  0D5E               	rlf	??_ADC_PF+1,w
  3212  01FB  00A3               	movwf	___wmul@multiplicand+1
  3213  01FC  1683               	bsf	3,5	;RP0=1, select bank1
  3214  01FD  1303               	bcf	3,6	;RP1=0, select bank1
  3215  01FE  0859               	movf	ADC_PF@i^(0+128),w
  3216  01FF  1283               	bcf	3,5	;RP0=0, select bank0
  3217  0200  1303               	bcf	3,6	;RP1=0, select bank0
  3218  0201  00DF               	movwf	??_ADC_PF+2
  3219  0202  01E0               	clrf	??_ADC_PF+3
  3220  0203  1003               	clrc
  3221  0204  0DDF               	rlf	??_ADC_PF+2,f
  3222  0205  0DE0               	rlf	??_ADC_PF+3,f
  3223  0206  085F               	movf	??_ADC_PF+2,w
  3224  0207  3EFF               	addlw	255
  3225  0208  00A0               	movwf	___wmul@multiplier
  3226  0209  0860               	movf	??_ADC_PF+3,w
  3227  020A  1803               	skipnc
  3228  020B  3E01               	addlw	1
  3229  020C  3EFF               	addlw	255
  3230  020D  00A1               	movwf	___wmul@multiplier+1
  3231  020E  158A  229C  118A   	fcall	___wmul
  3232  0211  1283               	bcf	3,5	;RP0=0, select bank0
  3233  0212  1303               	bcf	3,6	;RP1=0, select bank0
  3234  0213  0821               	movf	?___wmul+1,w
  3235  0214  00A9               	movwf	___awtoft@c+1
  3236  0215  0820               	movf	?___wmul,w
  3237  0216  00A8               	movwf	___awtoft@c
  3238  0217  118A  27D9  118A   	fcall	___awtoft
  3239  021A  1283               	bcf	3,5	;RP0=0, select bank0
  3240  021B  1303               	bcf	3,6	;RP1=0, select bank0
  3241  021C  0828               	movf	?___awtoft,w
  3242  021D  00BE               	movwf	___ftdiv@f2
  3243  021E  0829               	movf	?___awtoft+1,w
  3244  021F  00BF               	movwf	___ftdiv@f2+1
  3245  0220  082A               	movf	?___awtoft+2,w
  3246  0221  00C0               	movwf	___ftdiv@f2+2
  3247  0222  118A  2722  118A   	fcall	___ftdiv
  3248  0225  1283               	bcf	3,5	;RP0=0, select bank0
  3249  0226  1303               	bcf	3,6	;RP1=0, select bank0
  3250  0227  083E               	movf	?___ftdiv,w
  3251  0228  1683               	bsf	3,5	;RP0=1, select bank1
  3252  0229  1303               	bcf	3,6	;RP1=0, select bank1
  3253  022A  00CE               	movwf	_ADC_PF$960^(0+128)
  3254  022B  1283               	bcf	3,5	;RP0=0, select bank0
  3255  022C  1303               	bcf	3,6	;RP1=0, select bank0
  3256  022D  083F               	movf	?___ftdiv+1,w
  3257  022E  1683               	bsf	3,5	;RP0=1, select bank1
  3258  022F  1303               	bcf	3,6	;RP1=0, select bank1
  3259  0230  00CF               	movwf	(_ADC_PF$960+1)^(0+128)
  3260  0231  1283               	bcf	3,5	;RP0=0, select bank0
  3261  0232  1303               	bcf	3,6	;RP1=0, select bank0
  3262  0233  0840               	movf	?___ftdiv+2,w
  3263  0234  1683               	bsf	3,5	;RP0=1, select bank1
  3264  0235  1303               	bcf	3,6	;RP1=0, select bank1
  3265  0236  00D0               	movwf	(_ADC_PF$960+2)^(0+128)
  3266                           
  3267                           ;adc.c: 90: step *= ((-1*rad_angle)/(2*i*(2*i-1)));
  3268  0237  084E               	movf	_ADC_PF$960^(0+128),w
  3269  0238  1283               	bcf	3,5	;RP0=0, select bank0
  3270  0239  1303               	bcf	3,6	;RP1=0, select bank0
  3271  023A  00AE               	movwf	___ftmul@f1
  3272  023B  1683               	bsf	3,5	;RP0=1, select bank1
  3273  023C  1303               	bcf	3,6	;RP1=0, select bank1
  3274  023D  084F               	movf	(_ADC_PF$960+1)^(0+128),w
  3275  023E  1283               	bcf	3,5	;RP0=0, select bank0
  3276  023F  1303               	bcf	3,6	;RP1=0, select bank0
  3277  0240  00AF               	movwf	___ftmul@f1+1
  3278  0241  1683               	bsf	3,5	;RP0=1, select bank1
  3279  0242  1303               	bcf	3,6	;RP1=0, select bank1
  3280  0243  0850               	movf	(_ADC_PF$960+2)^(0+128),w
  3281  0244  1283               	bcf	3,5	;RP0=0, select bank0
  3282  0245  1303               	bcf	3,6	;RP1=0, select bank0
  3283  0246  00B0               	movwf	___ftmul@f1+2
  3284  0247  1683               	bsf	3,5	;RP0=1, select bank1
  3285  0248  1303               	bcf	3,6	;RP1=0, select bank1
  3286  0249  0851               	movf	ADC_PF@step^(0+128),w
  3287  024A  1283               	bcf	3,5	;RP0=0, select bank0
  3288  024B  1303               	bcf	3,6	;RP1=0, select bank0
  3289  024C  00B1               	movwf	___ftmul@f2
  3290  024D  1683               	bsf	3,5	;RP0=1, select bank1
  3291  024E  1303               	bcf	3,6	;RP1=0, select bank1
  3292  024F  0852               	movf	(ADC_PF@step+1)^(0+128),w
  3293  0250  1283               	bcf	3,5	;RP0=0, select bank0
  3294  0251  1303               	bcf	3,6	;RP1=0, select bank0
  3295  0252  00B2               	movwf	___ftmul@f2+1
  3296  0253  1683               	bsf	3,5	;RP0=1, select bank1
  3297  0254  1303               	bcf	3,6	;RP1=0, select bank1
  3298  0255  0853               	movf	(ADC_PF@step+2)^(0+128),w
  3299  0256  1283               	bcf	3,5	;RP0=0, select bank0
  3300  0257  1303               	bcf	3,6	;RP1=0, select bank0
  3301  0258  00B3               	movwf	___ftmul@f2+2
  3302  0259  118A  2591  118A   	fcall	___ftmul
  3303  025C  1283               	bcf	3,5	;RP0=0, select bank0
  3304  025D  1303               	bcf	3,6	;RP1=0, select bank0
  3305  025E  082E               	movf	?___ftmul,w
  3306  025F  1683               	bsf	3,5	;RP0=1, select bank1
  3307  0260  1303               	bcf	3,6	;RP1=0, select bank1
  3308  0261  00D1               	movwf	ADC_PF@step^(0+128)
  3309  0262  1283               	bcf	3,5	;RP0=0, select bank0
  3310  0263  1303               	bcf	3,6	;RP1=0, select bank0
  3311  0264  082F               	movf	?___ftmul+1,w
  3312  0265  1683               	bsf	3,5	;RP0=1, select bank1
  3313  0266  1303               	bcf	3,6	;RP1=0, select bank1
  3314  0267  00D2               	movwf	(ADC_PF@step+1)^(0+128)
  3315  0268  1283               	bcf	3,5	;RP0=0, select bank0
  3316  0269  1303               	bcf	3,6	;RP1=0, select bank0
  3317  026A  0830               	movf	?___ftmul+2,w
  3318  026B  1683               	bsf	3,5	;RP0=1, select bank1
  3319  026C  1303               	bcf	3,6	;RP1=0, select bank1
  3320  026D  00D3               	movwf	(ADC_PF@step+2)^(0+128)
  3321                           
  3322                           ;adc.c: 91: temp += step;
  3323  026E  0851               	movf	ADC_PF@step^(0+128),w
  3324  026F  1283               	bcf	3,5	;RP0=0, select bank0
  3325  0270  1303               	bcf	3,6	;RP1=0, select bank0
  3326  0271  00A8               	movwf	___ftadd@f1
  3327  0272  1683               	bsf	3,5	;RP0=1, select bank1
  3328  0273  1303               	bcf	3,6	;RP1=0, select bank1
  3329  0274  0852               	movf	(ADC_PF@step+1)^(0+128),w
  3330  0275  1283               	bcf	3,5	;RP0=0, select bank0
  3331  0276  1303               	bcf	3,6	;RP1=0, select bank0
  3332  0277  00A9               	movwf	___ftadd@f1+1
  3333  0278  1683               	bsf	3,5	;RP0=1, select bank1
  3334  0279  1303               	bcf	3,6	;RP1=0, select bank1
  3335  027A  0853               	movf	(ADC_PF@step+2)^(0+128),w
  3336  027B  1283               	bcf	3,5	;RP0=0, select bank0
  3337  027C  1303               	bcf	3,6	;RP1=0, select bank0
  3338  027D  00AA               	movwf	___ftadd@f1+2
  3339  027E  1683               	bsf	3,5	;RP0=1, select bank1
  3340  027F  1303               	bcf	3,6	;RP1=0, select bank1
  3341  0280  0854               	movf	ADC_PF@temp^(0+128),w
  3342  0281  1283               	bcf	3,5	;RP0=0, select bank0
  3343  0282  1303               	bcf	3,6	;RP1=0, select bank0
  3344  0283  00AB               	movwf	___ftadd@f2
  3345  0284  1683               	bsf	3,5	;RP0=1, select bank1
  3346  0285  1303               	bcf	3,6	;RP1=0, select bank1
  3347  0286  0855               	movf	(ADC_PF@temp+1)^(0+128),w
  3348  0287  1283               	bcf	3,5	;RP0=0, select bank0
  3349  0288  1303               	bcf	3,6	;RP1=0, select bank0
  3350  0289  00AC               	movwf	___ftadd@f2+1
  3351  028A  1683               	bsf	3,5	;RP0=1, select bank1
  3352  028B  1303               	bcf	3,6	;RP1=0, select bank1
  3353  028C  0856               	movf	(ADC_PF@temp+2)^(0+128),w
  3354  028D  1283               	bcf	3,5	;RP0=0, select bank0
  3355  028E  1303               	bcf	3,6	;RP1=0, select bank0
  3356  028F  00AD               	movwf	___ftadd@f2+2
  3357  0290  118A  2489  118A   	fcall	___ftadd
  3358  0293  1283               	bcf	3,5	;RP0=0, select bank0
  3359  0294  1303               	bcf	3,6	;RP1=0, select bank0
  3360  0295  0828               	movf	?___ftadd,w
  3361  0296  1683               	bsf	3,5	;RP0=1, select bank1
  3362  0297  1303               	bcf	3,6	;RP1=0, select bank1
  3363  0298  00D4               	movwf	ADC_PF@temp^(0+128)
  3364  0299  1283               	bcf	3,5	;RP0=0, select bank0
  3365  029A  1303               	bcf	3,6	;RP1=0, select bank0
  3366  029B  0829               	movf	?___ftadd+1,w
  3367  029C  1683               	bsf	3,5	;RP0=1, select bank1
  3368  029D  1303               	bcf	3,6	;RP1=0, select bank1
  3369  029E  00D5               	movwf	(ADC_PF@temp+1)^(0+128)
  3370  029F  1283               	bcf	3,5	;RP0=0, select bank0
  3371  02A0  1303               	bcf	3,6	;RP1=0, select bank0
  3372  02A1  082A               	movf	?___ftadd+2,w
  3373  02A2  1683               	bsf	3,5	;RP0=1, select bank1
  3374  02A3  1303               	bcf	3,6	;RP1=0, select bank1
  3375  02A4  00D6               	movwf	(ADC_PF@temp+2)^(0+128)
  3376  02A5  3001               	movlw	1
  3377  02A6  1283               	bcf	3,5	;RP0=0, select bank0
  3378  02A7  1303               	bcf	3,6	;RP1=0, select bank0
  3379  02A8  00DD               	movwf	??_ADC_PF
  3380  02A9  085D               	movf	??_ADC_PF,w
  3381  02AA  1683               	bsf	3,5	;RP0=1, select bank1
  3382  02AB  1303               	bcf	3,6	;RP1=0, select bank1
  3383  02AC  07D9               	addwf	ADC_PF@i^(0+128),f
  3384  02AD  29CB               	goto	L4
  3385  02AE                     l2330:	
  3386                           ;adc.c: 93: }
  3387                           ;adc.c: 94: }else{
  3388                           
  3389                           
  3390                           ;adc.c: 95: rad_angle = ((float)((31416/2)- rad_angle)/10000.0);
  3391  02AE  3040               	movlw	64
  3392  02AF  1283               	bcf	3,5	;RP0=0, select bank0
  3393  02B0  1303               	bcf	3,6	;RP1=0, select bank0
  3394  02B1  00BE               	movwf	___ftdiv@f2
  3395  02B2  301C               	movlw	28
  3396  02B3  00BF               	movwf	___ftdiv@f2+1
  3397  02B4  3046               	movlw	70
  3398  02B5  00C0               	movwf	___ftdiv@f2+2
  3399  02B6  3070               	movlw	112
  3400  02B7  00A8               	movwf	___ftadd@f1
  3401  02B8  3075               	movlw	117
  3402  02B9  00A9               	movwf	___ftadd@f1+1
  3403  02BA  3046               	movlw	70
  3404  02BB  00AA               	movwf	___ftadd@f1+2
  3405  02BC  1683               	bsf	3,5	;RP0=1, select bank1
  3406  02BD  1303               	bcf	3,6	;RP1=0, select bank1
  3407  02BE  085A               	movf	ADC_PF@rad_angle^(0+128),w
  3408  02BF  1283               	bcf	3,5	;RP0=0, select bank0
  3409  02C0  1303               	bcf	3,6	;RP1=0, select bank0
  3410  02C1  00A0               	movwf	___ftneg@f1
  3411  02C2  1683               	bsf	3,5	;RP0=1, select bank1
  3412  02C3  1303               	bcf	3,6	;RP1=0, select bank1
  3413  02C4  085B               	movf	(ADC_PF@rad_angle+1)^(0+128),w
  3414  02C5  1283               	bcf	3,5	;RP0=0, select bank0
  3415  02C6  1303               	bcf	3,6	;RP1=0, select bank0
  3416  02C7  00A1               	movwf	___ftneg@f1+1
  3417  02C8  1683               	bsf	3,5	;RP0=1, select bank1
  3418  02C9  1303               	bcf	3,6	;RP1=0, select bank1
  3419  02CA  085C               	movf	(ADC_PF@rad_angle+2)^(0+128),w
  3420  02CB  1283               	bcf	3,5	;RP0=0, select bank0
  3421  02CC  1303               	bcf	3,6	;RP1=0, select bank0
  3422  02CD  00A2               	movwf	___ftneg@f1+2
  3423  02CE  158A  21CE  118A   	fcall	___ftneg
  3424  02D1  1283               	bcf	3,5	;RP0=0, select bank0
  3425  02D2  1303               	bcf	3,6	;RP1=0, select bank0
  3426  02D3  0820               	movf	?___ftneg,w
  3427  02D4  00AB               	movwf	___ftadd@f2
  3428  02D5  0821               	movf	?___ftneg+1,w
  3429  02D6  00AC               	movwf	___ftadd@f2+1
  3430  02D7  0822               	movf	?___ftneg+2,w
  3431  02D8  00AD               	movwf	___ftadd@f2+2
  3432  02D9  118A  2489  118A   	fcall	___ftadd
  3433  02DC  1283               	bcf	3,5	;RP0=0, select bank0
  3434  02DD  1303               	bcf	3,6	;RP1=0, select bank0
  3435  02DE  0828               	movf	?___ftadd,w
  3436  02DF  00C1               	movwf	___ftdiv@f1
  3437  02E0  0829               	movf	?___ftadd+1,w
  3438  02E1  00C2               	movwf	___ftdiv@f1+1
  3439  02E2  082A               	movf	?___ftadd+2,w
  3440  02E3  00C3               	movwf	___ftdiv@f1+2
  3441  02E4  118A  2722  118A   	fcall	___ftdiv
  3442  02E7  1283               	bcf	3,5	;RP0=0, select bank0
  3443  02E8  1303               	bcf	3,6	;RP1=0, select bank0
  3444  02E9  083E               	movf	?___ftdiv,w
  3445  02EA  1683               	bsf	3,5	;RP0=1, select bank1
  3446  02EB  1303               	bcf	3,6	;RP1=0, select bank1
  3447  02EC  00DA               	movwf	ADC_PF@rad_angle^(0+128)
  3448  02ED  1283               	bcf	3,5	;RP0=0, select bank0
  3449  02EE  1303               	bcf	3,6	;RP1=0, select bank0
  3450  02EF  083F               	movf	?___ftdiv+1,w
  3451  02F0  1683               	bsf	3,5	;RP0=1, select bank1
  3452  02F1  1303               	bcf	3,6	;RP1=0, select bank1
  3453  02F2  00DB               	movwf	(ADC_PF@rad_angle+1)^(0+128)
  3454  02F3  1283               	bcf	3,5	;RP0=0, select bank0
  3455  02F4  1303               	bcf	3,6	;RP1=0, select bank0
  3456  02F5  0840               	movf	?___ftdiv+2,w
  3457  02F6  1683               	bsf	3,5	;RP0=1, select bank1
  3458  02F7  1303               	bcf	3,6	;RP1=0, select bank1
  3459  02F8  00DC               	movwf	(ADC_PF@rad_angle+2)^(0+128)
  3460                           
  3461                           ;adc.c: 96: temp = rad_angle;
  3462  02F9  085A               	movf	ADC_PF@rad_angle^(0+128),w
  3463  02FA  00D4               	movwf	ADC_PF@temp^(0+128)
  3464  02FB  085B               	movf	(ADC_PF@rad_angle+1)^(0+128),w
  3465  02FC  00D5               	movwf	(ADC_PF@temp+1)^(0+128)
  3466  02FD  085C               	movf	(ADC_PF@rad_angle+2)^(0+128),w
  3467  02FE  00D6               	movwf	(ADC_PF@temp+2)^(0+128)
  3468                           
  3469                           ;adc.c: 97: step = rad_angle;
  3470  02FF  085A               	movf	ADC_PF@rad_angle^(0+128),w
  3471  0300  00D1               	movwf	ADC_PF@step^(0+128)
  3472  0301  085B               	movf	(ADC_PF@rad_angle+1)^(0+128),w
  3473  0302  00D2               	movwf	(ADC_PF@step+1)^(0+128)
  3474  0303  085C               	movf	(ADC_PF@rad_angle+2)^(0+128),w
  3475  0304  00D3               	movwf	(ADC_PF@step+2)^(0+128)
  3476                           
  3477                           ;adc.c: 98: rad_angle *= rad_angle;
  3478  0305  085A               	movf	ADC_PF@rad_angle^(0+128),w
  3479  0306  1283               	bcf	3,5	;RP0=0, select bank0
  3480  0307  1303               	bcf	3,6	;RP1=0, select bank0
  3481  0308  00AE               	movwf	___ftmul@f1
  3482  0309  1683               	bsf	3,5	;RP0=1, select bank1
  3483  030A  1303               	bcf	3,6	;RP1=0, select bank1
  3484  030B  085B               	movf	(ADC_PF@rad_angle+1)^(0+128),w
  3485  030C  1283               	bcf	3,5	;RP0=0, select bank0
  3486  030D  1303               	bcf	3,6	;RP1=0, select bank0
  3487  030E  00AF               	movwf	___ftmul@f1+1
  3488  030F  1683               	bsf	3,5	;RP0=1, select bank1
  3489  0310  1303               	bcf	3,6	;RP1=0, select bank1
  3490  0311  085C               	movf	(ADC_PF@rad_angle+2)^(0+128),w
  3491  0312  1283               	bcf	3,5	;RP0=0, select bank0
  3492  0313  1303               	bcf	3,6	;RP1=0, select bank0
  3493  0314  00B0               	movwf	___ftmul@f1+2
  3494  0315  1683               	bsf	3,5	;RP0=1, select bank1
  3495  0316  1303               	bcf	3,6	;RP1=0, select bank1
  3496  0317  085A               	movf	ADC_PF@rad_angle^(0+128),w
  3497  0318  1283               	bcf	3,5	;RP0=0, select bank0
  3498  0319  1303               	bcf	3,6	;RP1=0, select bank0
  3499  031A  00B1               	movwf	___ftmul@f2
  3500  031B  1683               	bsf	3,5	;RP0=1, select bank1
  3501  031C  1303               	bcf	3,6	;RP1=0, select bank1
  3502  031D  085B               	movf	(ADC_PF@rad_angle+1)^(0+128),w
  3503  031E  1283               	bcf	3,5	;RP0=0, select bank0
  3504  031F  1303               	bcf	3,6	;RP1=0, select bank0
  3505  0320  00B2               	movwf	___ftmul@f2+1
  3506  0321  1683               	bsf	3,5	;RP0=1, select bank1
  3507  0322  1303               	bcf	3,6	;RP1=0, select bank1
  3508  0323  085C               	movf	(ADC_PF@rad_angle+2)^(0+128),w
  3509  0324  1283               	bcf	3,5	;RP0=0, select bank0
  3510  0325  1303               	bcf	3,6	;RP1=0, select bank0
  3511  0326  00B3               	movwf	___ftmul@f2+2
  3512  0327  118A  2591  118A   	fcall	___ftmul
  3513  032A  1283               	bcf	3,5	;RP0=0, select bank0
  3514  032B  1303               	bcf	3,6	;RP1=0, select bank0
  3515  032C  082E               	movf	?___ftmul,w
  3516  032D  1683               	bsf	3,5	;RP0=1, select bank1
  3517  032E  1303               	bcf	3,6	;RP1=0, select bank1
  3518  032F  00DA               	movwf	ADC_PF@rad_angle^(0+128)
  3519  0330  1283               	bcf	3,5	;RP0=0, select bank0
  3520  0331  1303               	bcf	3,6	;RP1=0, select bank0
  3521  0332  082F               	movf	?___ftmul+1,w
  3522  0333  1683               	bsf	3,5	;RP0=1, select bank1
  3523  0334  1303               	bcf	3,6	;RP1=0, select bank1
  3524  0335  00DB               	movwf	(ADC_PF@rad_angle+1)^(0+128)
  3525  0336  1283               	bcf	3,5	;RP0=0, select bank0
  3526  0337  1303               	bcf	3,6	;RP1=0, select bank0
  3527  0338  0830               	movf	?___ftmul+2,w
  3528  0339  1683               	bsf	3,5	;RP0=1, select bank1
  3529  033A  1303               	bcf	3,6	;RP1=0, select bank1
  3530  033B  00DC               	movwf	(ADC_PF@rad_angle+2)^(0+128)
  3531                           
  3532                           ;adc.c: 99: for(i=1;i<=5;i++){
  3533  033C  01D9               	clrf	ADC_PF@i^(0+128)
  3534  033D  0AD9               	incf	ADC_PF@i^(0+128),f
  3535  033E  3006               	movlw	6
  3536  033F  0259               	subwf	ADC_PF@i^(0+128),w
  3537  0340  1803               	btfsc	3,0
  3538  0341  2C24               	goto	l2348
  3539  0342                     l2342:	
  3540                           
  3541                           ;adc.c: 100: step *= ((-1*rad_angle)/(2*i*(2*i+1)));
  3542  0342  085A               	movf	ADC_PF@rad_angle^(0+128),w
  3543  0343  1283               	bcf	3,5	;RP0=0, select bank0
  3544  0344  1303               	bcf	3,6	;RP1=0, select bank0
  3545  0345  00B1               	movwf	___ftmul@f2
  3546  0346  1683               	bsf	3,5	;RP0=1, select bank1
  3547  0347  1303               	bcf	3,6	;RP1=0, select bank1
  3548  0348  085B               	movf	(ADC_PF@rad_angle+1)^(0+128),w
  3549  0349  1283               	bcf	3,5	;RP0=0, select bank0
  3550  034A  1303               	bcf	3,6	;RP1=0, select bank0
  3551  034B  00B2               	movwf	___ftmul@f2+1
  3552  034C  1683               	bsf	3,5	;RP0=1, select bank1
  3553  034D  1303               	bcf	3,6	;RP1=0, select bank1
  3554  034E  085C               	movf	(ADC_PF@rad_angle+2)^(0+128),w
  3555  034F  1283               	bcf	3,5	;RP0=0, select bank0
  3556  0350  1303               	bcf	3,6	;RP1=0, select bank0
  3557  0351  00B3               	movwf	___ftmul@f2+2
  3558  0352  3000               	movlw	0
  3559  0353  00AE               	movwf	___ftmul@f1
  3560  0354  3080               	movlw	128
  3561  0355  00AF               	movwf	___ftmul@f1+1
  3562  0356  30BF               	movlw	191
  3563  0357  00B0               	movwf	___ftmul@f1+2
  3564  0358  118A  2591  118A   	fcall	___ftmul
  3565  035B  1283               	bcf	3,5	;RP0=0, select bank0
  3566  035C  1303               	bcf	3,6	;RP1=0, select bank0
  3567  035D  082E               	movf	?___ftmul,w
  3568  035E  00C1               	movwf	___ftdiv@f1
  3569  035F  082F               	movf	?___ftmul+1,w
  3570  0360  00C2               	movwf	___ftdiv@f1+1
  3571  0361  0830               	movf	?___ftmul+2,w
  3572  0362  00C3               	movwf	___ftdiv@f1+2
  3573  0363  1683               	bsf	3,5	;RP0=1, select bank1
  3574  0364  1303               	bcf	3,6	;RP1=0, select bank1
  3575  0365  0859               	movf	ADC_PF@i^(0+128),w
  3576  0366  1283               	bcf	3,5	;RP0=0, select bank0
  3577  0367  1303               	bcf	3,6	;RP1=0, select bank0
  3578  0368  00DD               	movwf	??_ADC_PF
  3579  0369  01DE               	clrf	??_ADC_PF+1
  3580  036A  1003               	clrc
  3581  036B  0D5D               	rlf	??_ADC_PF,w
  3582  036C  00A2               	movwf	___wmul@multiplicand
  3583  036D  0D5E               	rlf	??_ADC_PF+1,w
  3584  036E  00A3               	movwf	___wmul@multiplicand+1
  3585  036F  1683               	bsf	3,5	;RP0=1, select bank1
  3586  0370  1303               	bcf	3,6	;RP1=0, select bank1
  3587  0371  0859               	movf	ADC_PF@i^(0+128),w
  3588  0372  1283               	bcf	3,5	;RP0=0, select bank0
  3589  0373  1303               	bcf	3,6	;RP1=0, select bank0
  3590  0374  00DF               	movwf	??_ADC_PF+2
  3591  0375  01E0               	clrf	??_ADC_PF+3
  3592  0376  1003               	clrc
  3593  0377  0DDF               	rlf	??_ADC_PF+2,f
  3594  0378  0DE0               	rlf	??_ADC_PF+3,f
  3595  0379  085F               	movf	??_ADC_PF+2,w
  3596  037A  3E01               	addlw	1
  3597  037B  00A0               	movwf	___wmul@multiplier
  3598  037C  0860               	movf	??_ADC_PF+3,w
  3599  037D  1803               	skipnc
  3600  037E  3E01               	addlw	1
  3601  037F  3E00               	addlw	0
  3602  0380  00A1               	movwf	___wmul@multiplier+1
  3603  0381  158A  229C  118A   	fcall	___wmul
  3604  0384  1283               	bcf	3,5	;RP0=0, select bank0
  3605  0385  1303               	bcf	3,6	;RP1=0, select bank0
  3606  0386  0821               	movf	?___wmul+1,w
  3607  0387  00A9               	movwf	___awtoft@c+1
  3608  0388  0820               	movf	?___wmul,w
  3609  0389  00A8               	movwf	___awtoft@c
  3610  038A  118A  27D9  118A   	fcall	___awtoft
  3611  038D  1283               	bcf	3,5	;RP0=0, select bank0
  3612  038E  1303               	bcf	3,6	;RP1=0, select bank0
  3613  038F  0828               	movf	?___awtoft,w
  3614  0390  00BE               	movwf	___ftdiv@f2
  3615  0391  0829               	movf	?___awtoft+1,w
  3616  0392  00BF               	movwf	___ftdiv@f2+1
  3617  0393  082A               	movf	?___awtoft+2,w
  3618  0394  00C0               	movwf	___ftdiv@f2+2
  3619  0395  118A  2722  118A   	fcall	___ftdiv
  3620  0398  1283               	bcf	3,5	;RP0=0, select bank0
  3621  0399  1303               	bcf	3,6	;RP1=0, select bank0
  3622  039A  083E               	movf	?___ftdiv,w
  3623  039B  1683               	bsf	3,5	;RP0=1, select bank1
  3624  039C  1303               	bcf	3,6	;RP1=0, select bank1
  3625  039D  00CE               	movwf	_ADC_PF$960^(0+128)
  3626  039E  1283               	bcf	3,5	;RP0=0, select bank0
  3627  039F  1303               	bcf	3,6	;RP1=0, select bank0
  3628  03A0  083F               	movf	?___ftdiv+1,w
  3629  03A1  1683               	bsf	3,5	;RP0=1, select bank1
  3630  03A2  1303               	bcf	3,6	;RP1=0, select bank1
  3631  03A3  00CF               	movwf	(_ADC_PF$960+1)^(0+128)
  3632  03A4  1283               	bcf	3,5	;RP0=0, select bank0
  3633  03A5  1303               	bcf	3,6	;RP1=0, select bank0
  3634  03A6  0840               	movf	?___ftdiv+2,w
  3635  03A7  1683               	bsf	3,5	;RP0=1, select bank1
  3636  03A8  1303               	bcf	3,6	;RP1=0, select bank1
  3637  03A9  00D0               	movwf	(_ADC_PF$960+2)^(0+128)
  3638                           
  3639                           ;adc.c: 100: step *= ((-1*rad_angle)/(2*i*(2*i+1)));
  3640  03AA  084E               	movf	_ADC_PF$960^(0+128),w
  3641  03AB  1283               	bcf	3,5	;RP0=0, select bank0
  3642  03AC  1303               	bcf	3,6	;RP1=0, select bank0
  3643  03AD  00AE               	movwf	___ftmul@f1
  3644  03AE  1683               	bsf	3,5	;RP0=1, select bank1
  3645  03AF  1303               	bcf	3,6	;RP1=0, select bank1
  3646  03B0  084F               	movf	(_ADC_PF$960+1)^(0+128),w
  3647  03B1  1283               	bcf	3,5	;RP0=0, select bank0
  3648  03B2  1303               	bcf	3,6	;RP1=0, select bank0
  3649  03B3  00AF               	movwf	___ftmul@f1+1
  3650  03B4  1683               	bsf	3,5	;RP0=1, select bank1
  3651  03B5  1303               	bcf	3,6	;RP1=0, select bank1
  3652  03B6  0850               	movf	(_ADC_PF$960+2)^(0+128),w
  3653  03B7  1283               	bcf	3,5	;RP0=0, select bank0
  3654  03B8  1303               	bcf	3,6	;RP1=0, select bank0
  3655  03B9  00B0               	movwf	___ftmul@f1+2
  3656  03BA  1683               	bsf	3,5	;RP0=1, select bank1
  3657  03BB  1303               	bcf	3,6	;RP1=0, select bank1
  3658  03BC  0851               	movf	ADC_PF@step^(0+128),w
  3659  03BD  1283               	bcf	3,5	;RP0=0, select bank0
  3660  03BE  1303               	bcf	3,6	;RP1=0, select bank0
  3661  03BF  00B1               	movwf	___ftmul@f2
  3662  03C0  1683               	bsf	3,5	;RP0=1, select bank1
  3663  03C1  1303               	bcf	3,6	;RP1=0, select bank1
  3664  03C2  0852               	movf	(ADC_PF@step+1)^(0+128),w
  3665  03C3  1283               	bcf	3,5	;RP0=0, select bank0
  3666  03C4  1303               	bcf	3,6	;RP1=0, select bank0
  3667  03C5  00B2               	movwf	___ftmul@f2+1
  3668  03C6  1683               	bsf	3,5	;RP0=1, select bank1
  3669  03C7  1303               	bcf	3,6	;RP1=0, select bank1
  3670  03C8  0853               	movf	(ADC_PF@step+2)^(0+128),w
  3671  03C9  1283               	bcf	3,5	;RP0=0, select bank0
  3672  03CA  1303               	bcf	3,6	;RP1=0, select bank0
  3673  03CB  00B3               	movwf	___ftmul@f2+2
  3674  03CC  118A  2591  118A   	fcall	___ftmul
  3675  03CF  1283               	bcf	3,5	;RP0=0, select bank0
  3676  03D0  1303               	bcf	3,6	;RP1=0, select bank0
  3677  03D1  082E               	movf	?___ftmul,w
  3678  03D2  1683               	bsf	3,5	;RP0=1, select bank1
  3679  03D3  1303               	bcf	3,6	;RP1=0, select bank1
  3680  03D4  00D1               	movwf	ADC_PF@step^(0+128)
  3681  03D5  1283               	bcf	3,5	;RP0=0, select bank0
  3682  03D6  1303               	bcf	3,6	;RP1=0, select bank0
  3683  03D7  082F               	movf	?___ftmul+1,w
  3684  03D8  1683               	bsf	3,5	;RP0=1, select bank1
  3685  03D9  1303               	bcf	3,6	;RP1=0, select bank1
  3686  03DA  00D2               	movwf	(ADC_PF@step+1)^(0+128)
  3687  03DB  1283               	bcf	3,5	;RP0=0, select bank0
  3688  03DC  1303               	bcf	3,6	;RP1=0, select bank0
  3689  03DD  0830               	movf	?___ftmul+2,w
  3690  03DE  1683               	bsf	3,5	;RP0=1, select bank1
  3691  03DF  1303               	bcf	3,6	;RP1=0, select bank1
  3692  03E0  00D3               	movwf	(ADC_PF@step+2)^(0+128)
  3693                           
  3694                           ;adc.c: 101: temp += step;
  3695  03E1  0851               	movf	ADC_PF@step^(0+128),w
  3696  03E2  1283               	bcf	3,5	;RP0=0, select bank0
  3697  03E3  1303               	bcf	3,6	;RP1=0, select bank0
  3698  03E4  00A8               	movwf	___ftadd@f1
  3699  03E5  1683               	bsf	3,5	;RP0=1, select bank1
  3700  03E6  1303               	bcf	3,6	;RP1=0, select bank1
  3701  03E7  0852               	movf	(ADC_PF@step+1)^(0+128),w
  3702  03E8  1283               	bcf	3,5	;RP0=0, select bank0
  3703  03E9  1303               	bcf	3,6	;RP1=0, select bank0
  3704  03EA  00A9               	movwf	___ftadd@f1+1
  3705  03EB  1683               	bsf	3,5	;RP0=1, select bank1
  3706  03EC  1303               	bcf	3,6	;RP1=0, select bank1
  3707  03ED  0853               	movf	(ADC_PF@step+2)^(0+128),w
  3708  03EE  1283               	bcf	3,5	;RP0=0, select bank0
  3709  03EF  1303               	bcf	3,6	;RP1=0, select bank0
  3710  03F0  00AA               	movwf	___ftadd@f1+2
  3711  03F1  1683               	bsf	3,5	;RP0=1, select bank1
  3712  03F2  1303               	bcf	3,6	;RP1=0, select bank1
  3713  03F3  0854               	movf	ADC_PF@temp^(0+128),w
  3714  03F4  1283               	bcf	3,5	;RP0=0, select bank0
  3715  03F5  1303               	bcf	3,6	;RP1=0, select bank0
  3716  03F6  00AB               	movwf	___ftadd@f2
  3717  03F7  1683               	bsf	3,5	;RP0=1, select bank1
  3718  03F8  1303               	bcf	3,6	;RP1=0, select bank1
  3719  03F9  0855               	movf	(ADC_PF@temp+1)^(0+128),w
  3720  03FA  1283               	bcf	3,5	;RP0=0, select bank0
  3721  03FB  1303               	bcf	3,6	;RP1=0, select bank0
  3722  03FC  00AC               	movwf	___ftadd@f2+1
  3723  03FD  1683               	bsf	3,5	;RP0=1, select bank1
  3724  03FE  1303               	bcf	3,6	;RP1=0, select bank1
  3725  03FF  0856               	movf	(ADC_PF@temp+2)^(0+128),w
  3726  0400  1283               	bcf	3,5	;RP0=0, select bank0
  3727  0401  1303               	bcf	3,6	;RP1=0, select bank0
  3728  0402  00AD               	movwf	___ftadd@f2+2
  3729  0403  118A  2489  118A   	fcall	___ftadd
  3730  0406  1283               	bcf	3,5	;RP0=0, select bank0
  3731  0407  1303               	bcf	3,6	;RP1=0, select bank0
  3732  0408  0828               	movf	?___ftadd,w
  3733  0409  1683               	bsf	3,5	;RP0=1, select bank1
  3734  040A  1303               	bcf	3,6	;RP1=0, select bank1
  3735  040B  00D4               	movwf	ADC_PF@temp^(0+128)
  3736  040C  1283               	bcf	3,5	;RP0=0, select bank0
  3737  040D  1303               	bcf	3,6	;RP1=0, select bank0
  3738  040E  0829               	movf	?___ftadd+1,w
  3739  040F  1683               	bsf	3,5	;RP0=1, select bank1
  3740  0410  1303               	bcf	3,6	;RP1=0, select bank1
  3741  0411  00D5               	movwf	(ADC_PF@temp+1)^(0+128)
  3742  0412  1283               	bcf	3,5	;RP0=0, select bank0
  3743  0413  1303               	bcf	3,6	;RP1=0, select bank0
  3744  0414  082A               	movf	?___ftadd+2,w
  3745  0415  1683               	bsf	3,5	;RP0=1, select bank1
  3746  0416  1303               	bcf	3,6	;RP1=0, select bank1
  3747  0417  00D6               	movwf	(ADC_PF@temp+2)^(0+128)
  3748  0418  3001               	movlw	1
  3749  0419  1283               	bcf	3,5	;RP0=0, select bank0
  3750  041A  1303               	bcf	3,6	;RP1=0, select bank0
  3751  041B  00DD               	movwf	??_ADC_PF
  3752  041C  085D               	movf	??_ADC_PF,w
  3753  041D  1683               	bsf	3,5	;RP0=1, select bank1
  3754  041E  1303               	bcf	3,6	;RP1=0, select bank1
  3755  041F  07D9               	addwf	ADC_PF@i^(0+128),f
  3756  0420  3006               	movlw	6
  3757  0421  0259               	subwf	ADC_PF@i^(0+128),w
  3758  0422  1C03               	skipc
  3759  0423  2B42               	goto	l2342
  3760  0424                     l2348:	
  3761                           
  3762                           ;adc.c: 103: }
  3763                           ;adc.c: 104: }
  3764                           ;adc.c: 106: ARRAY[index] = (uint16_t)(temp*10000);
  3765  0424  0854               	movf	ADC_PF@temp^(0+128),w
  3766  0425  1283               	bcf	3,5	;RP0=0, select bank0
  3767  0426  1303               	bcf	3,6	;RP1=0, select bank0
  3768  0427  00B1               	movwf	___ftmul@f2
  3769  0428  1683               	bsf	3,5	;RP0=1, select bank1
  3770  0429  1303               	bcf	3,6	;RP1=0, select bank1
  3771  042A  0855               	movf	(ADC_PF@temp+1)^(0+128),w
  3772  042B  1283               	bcf	3,5	;RP0=0, select bank0
  3773  042C  1303               	bcf	3,6	;RP1=0, select bank0
  3774  042D  00B2               	movwf	___ftmul@f2+1
  3775  042E  1683               	bsf	3,5	;RP0=1, select bank1
  3776  042F  1303               	bcf	3,6	;RP1=0, select bank1
  3777  0430  0856               	movf	(ADC_PF@temp+2)^(0+128),w
  3778  0431  1283               	bcf	3,5	;RP0=0, select bank0
  3779  0432  1303               	bcf	3,6	;RP1=0, select bank0
  3780  0433  00B3               	movwf	___ftmul@f2+2
  3781  0434  3040               	movlw	64
  3782  0435  00AE               	movwf	___ftmul@f1
  3783  0436  301C               	movlw	28
  3784  0437  00AF               	movwf	___ftmul@f1+1
  3785  0438  3046               	movlw	70
  3786  0439  00B0               	movwf	___ftmul@f1+2
  3787  043A  118A  2591  118A   	fcall	___ftmul
  3788  043D  1283               	bcf	3,5	;RP0=0, select bank0
  3789  043E  1303               	bcf	3,6	;RP1=0, select bank0
  3790  043F  082E               	movf	?___ftmul,w
  3791  0440  00CE               	movwf	___fttol@f1
  3792  0441  082F               	movf	?___ftmul+1,w
  3793  0442  00CF               	movwf	___fttol@f1+1
  3794  0443  0830               	movf	?___ftmul+2,w
  3795  0444  00D0               	movwf	___fttol@f1+2
  3796  0445  158A  2637  118A   	fcall	___fttol
  3797  0448  1283               	bcf	3,5	;RP0=0, select bank0
  3798  0449  1303               	bcf	3,6	;RP1=0, select bank0
  3799  044A  085C               	movf	ADC_PF@index,w
  3800  044B  00DD               	movwf	??_ADC_PF
  3801  044C  075D               	addwf	??_ADC_PF,w
  3802  044D  1683               	bsf	3,5	;RP0=1, select bank1
  3803  044E  1303               	bcf	3,6	;RP1=0, select bank1
  3804  044F  074D               	addwf	ADC_PF@ARRAY^(0+128),w
  3805  0450  1283               	bcf	3,5	;RP0=0, select bank0
  3806  0451  1303               	bcf	3,6	;RP1=0, select bank0
  3807  0452  00DE               	movwf	??_ADC_PF+1
  3808  0453  085E               	movf	??_ADC_PF+1,w
  3809  0454  0084               	movwf	4
  3810  0455  084E               	movf	?___fttol,w
  3811  0456  1383               	bcf	3,7	;select IRP bank0
  3812  0457  0080               	movwf	0
  3813  0458  0A84               	incf	4,f
  3814  0459  084F               	movf	?___fttol+1,w
  3815  045A  0080               	movwf	0
  3816                           
  3817                           ;adc.c: 107: if(!index)
  3818  045B  085C               	movf	ADC_PF@index,w
  3819  045C  1D03               	btfss	3,2
  3820  045D  2C61               	goto	l2354
  3821                           
  3822                           ;adc.c: 108: PF_SIGN = 0;
  3823  045E  1683               	bsf	3,5	;RP0=1, select bank1
  3824  045F  1303               	bcf	3,6	;RP1=0, select bank1
  3825  0460  01AB               	clrf	_PF_SIGN^(0+128)
  3826  0461                     l2354:	
  3827                           
  3828                           ;adc.c: 109: PF_SIGN += (temp >= 0 ? 0 : 1);
  3829  0461  1683               	bsf	3,5	;RP0=1, select bank1
  3830  0462  1303               	bcf	3,6	;RP1=0, select bank1
  3831  0463  0854               	movf	ADC_PF@temp^(0+128),w
  3832  0464  1283               	bcf	3,5	;RP0=0, select bank0
  3833  0465  1303               	bcf	3,6	;RP1=0, select bank0
  3834  0466  00A0               	movwf	___ftge@ff1
  3835  0467  1683               	bsf	3,5	;RP0=1, select bank1
  3836  0468  1303               	bcf	3,6	;RP1=0, select bank1
  3837  0469  0855               	movf	(ADC_PF@temp+1)^(0+128),w
  3838  046A  1283               	bcf	3,5	;RP0=0, select bank0
  3839  046B  1303               	bcf	3,6	;RP1=0, select bank0
  3840  046C  00A1               	movwf	___ftge@ff1+1
  3841  046D  1683               	bsf	3,5	;RP0=1, select bank1
  3842  046E  1303               	bcf	3,6	;RP1=0, select bank1
  3843  046F  0856               	movf	(ADC_PF@temp+2)^(0+128),w
  3844  0470  1283               	bcf	3,5	;RP0=0, select bank0
  3845  0471  1303               	bcf	3,6	;RP1=0, select bank0
  3846  0472  00A2               	movwf	___ftge@ff1+2
  3847  0473  3000               	movlw	0
  3848  0474  00A3               	movwf	___ftge@ff2
  3849  0475  3000               	movlw	0
  3850  0476  00A4               	movwf	___ftge@ff2+1
  3851  0477  3000               	movlw	0
  3852  0478  00A5               	movwf	___ftge@ff2+2
  3853  0479  158A  2497  118A   	fcall	___ftge
  3854  047C  1803               	btfsc	3,0
  3855  047D  2C80               	goto	u2990
  3856  047E  3001               	movlw	1
  3857  047F  2C81               	goto	u3000
  3858  0480                     u2990:	
  3859  0480  3000               	movlw	0
  3860  0481                     u3000:	
  3861  0481  1283               	bcf	3,5	;RP0=0, select bank0
  3862  0482  1303               	bcf	3,6	;RP1=0, select bank0
  3863  0483  00DD               	movwf	??_ADC_PF
  3864  0484  085D               	movf	??_ADC_PF,w
  3865  0485  1683               	bsf	3,5	;RP0=1, select bank1
  3866  0486  1303               	bcf	3,6	;RP1=0, select bank1
  3867  0487  07AB               	addwf	_PF_SIGN^(0+128),f
  3868  0488  0008               	return
  3869  0489                     __end_of_ADC_PF:	
  3870                           
  3871                           	psect	text12
  3872  0A9C                     __ptext12:	
  3873 ;; *************** function ___wmul *****************
  3874 ;; Defined at:
  3875 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  3876 ;; Parameters:    Size  Location     Type
  3877 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3878 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3879 ;; Auto vars:     Size  Location     Type
  3880 ;;  product         2    4[BANK0 ] unsigned int 
  3881 ;; Return value:  Size  Location     Type
  3882 ;;                  2    0[BANK0 ] unsigned int 
  3883 ;; Registers used:
  3884 ;;		wreg, status,2, status,0
  3885 ;; Tracked objects:
  3886 ;;		On entry : 0/0
  3887 ;;		On exit  : 0/0
  3888 ;;		Unchanged: 0/0
  3889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3890 ;;      Params:         0       4       0       0
  3891 ;;      Locals:         0       2       0       0
  3892 ;;      Temps:          0       0       0       0
  3893 ;;      Totals:         0       6       0       0
  3894 ;;Total ram usage:        6 bytes
  3895 ;; Hardware stack levels used:    1
  3896 ;; Hardware stack levels required when called:    2
  3897 ;; This function calls:
  3898 ;;		Nothing
  3899 ;; This function is called by:
  3900 ;;		_ADC_PF
  3901 ;; This function uses a non-reentrant model
  3902 ;;
  3903                           
  3904                           
  3905                           ;psect for function ___wmul
  3906  0A9C                     ___wmul:	
  3907                           
  3908                           ;incstack = 0
  3909                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3910  0A9C  1283               	bcf	3,5	;RP0=0, select bank0
  3911  0A9D  1303               	bcf	3,6	;RP1=0, select bank0
  3912  0A9E  01A4               	clrf	___wmul@product
  3913  0A9F  01A5               	clrf	___wmul@product+1
  3914  0AA0                     l2252:	
  3915  0AA0  1C20               	btfss	___wmul@multiplier,0
  3916  0AA1  2AA8               	goto	l368
  3917  0AA2  0822               	movf	___wmul@multiplicand,w
  3918  0AA3  07A4               	addwf	___wmul@product,f
  3919  0AA4  1803               	skipnc
  3920  0AA5  0AA5               	incf	___wmul@product+1,f
  3921  0AA6  0823               	movf	___wmul@multiplicand+1,w
  3922  0AA7  07A5               	addwf	___wmul@product+1,f
  3923  0AA8                     l368:	
  3924  0AA8  3001               	movlw	1
  3925  0AA9                     u2865:	
  3926  0AA9  1003               	clrc
  3927  0AAA  0DA2               	rlf	___wmul@multiplicand,f
  3928  0AAB  0DA3               	rlf	___wmul@multiplicand+1,f
  3929  0AAC  3EFF               	addlw	-1
  3930  0AAD  1D03               	skipz
  3931  0AAE  2AA9               	goto	u2865
  3932  0AAF  3001               	movlw	1
  3933  0AB0                     u2875:	
  3934  0AB0  1003               	clrc
  3935  0AB1  0CA1               	rrf	___wmul@multiplier+1,f
  3936  0AB2  0CA0               	rrf	___wmul@multiplier,f
  3937  0AB3  3EFF               	addlw	-1
  3938  0AB4  1D03               	skipz
  3939  0AB5  2AB0               	goto	u2875
  3940  0AB6  0820               	movf	___wmul@multiplier,w
  3941  0AB7  0421               	iorwf	___wmul@multiplier+1,w
  3942  0AB8  1D03               	btfss	3,2
  3943  0AB9  2AA0               	goto	l2252
  3944  0ABA  0825               	movf	___wmul@product+1,w
  3945  0ABB  00A1               	movwf	?___wmul+1
  3946  0ABC  0824               	movf	___wmul@product,w
  3947  0ABD  00A0               	movwf	?___wmul
  3948  0ABE  0008               	return
  3949  0ABF                     __end_of___wmul:	
  3950                           
  3951                           	psect	text13
  3952  0A2A                     __ptext13:	
  3953 ;; *************** function ___lwtoft *****************
  3954 ;; Defined at:
  3955 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwtoft.c"
  3956 ;; Parameters:    Size  Location     Type
  3957 ;;  c               2    8[BANK0 ] unsigned int 
  3958 ;; Auto vars:     Size  Location     Type
  3959 ;;		None
  3960 ;; Return value:  Size  Location     Type
  3961 ;;                  3    8[BANK0 ] float 
  3962 ;; Registers used:
  3963 ;;		wreg, status,2, status,0, pclath, cstack
  3964 ;; Tracked objects:
  3965 ;;		On entry : 0/0
  3966 ;;		On exit  : 0/0
  3967 ;;		Unchanged: 0/0
  3968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3969 ;;      Params:         0       3       0       0
  3970 ;;      Locals:         0       0       0       0
  3971 ;;      Temps:          0       1       0       0
  3972 ;;      Totals:         0       4       0       0
  3973 ;;Total ram usage:        4 bytes
  3974 ;; Hardware stack levels used:    1
  3975 ;; Hardware stack levels required when called:    3
  3976 ;; This function calls:
  3977 ;;		___ftpack
  3978 ;; This function is called by:
  3979 ;;		_ADC_RMS
  3980 ;;		_ADC_PF
  3981 ;; This function uses a non-reentrant model
  3982 ;;
  3983                           
  3984                           
  3985                           ;psect for function ___lwtoft
  3986  0A2A                     ___lwtoft:	
  3987                           
  3988                           ;incstack = 0
  3989                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  3990  0A2A  1283               	bcf	3,5	;RP0=0, select bank0
  3991  0A2B  1303               	bcf	3,6	;RP1=0, select bank0
  3992  0A2C  0828               	movf	___lwtoft@c,w
  3993  0A2D  00A0               	movwf	___ftpack@arg
  3994  0A2E  0829               	movf	___lwtoft@c+1,w
  3995  0A2F  00A1               	movwf	___ftpack@arg+1
  3996  0A30  01A2               	clrf	___ftpack@arg+2
  3997  0A31  308E               	movlw	142
  3998  0A32  00AB               	movwf	??___lwtoft
  3999  0A33  082B               	movf	??___lwtoft,w
  4000  0A34  00A3               	movwf	___ftpack@exp
  4001  0A35  01A4               	clrf	___ftpack@sign
  4002  0A36  158A  2556         	fcall	___ftpack
  4003  0A38  1283               	bcf	3,5	;RP0=0, select bank0
  4004  0A39  1303               	bcf	3,6	;RP1=0, select bank0
  4005  0A3A  0820               	movf	?___ftpack,w
  4006  0A3B  00A8               	movwf	?___lwtoft
  4007  0A3C  0821               	movf	?___ftpack+1,w
  4008  0A3D  00A9               	movwf	?___lwtoft+1
  4009  0A3E  0822               	movf	?___ftpack+2,w
  4010  0A3F  00AA               	movwf	?___lwtoft+2
  4011  0A40  0008               	return
  4012  0A41                     __end_of___lwtoft:	
  4013                           
  4014                           	psect	text14
  4015  0BBD                     __ptext14:	
  4016 ;; *************** function ___lwdiv *****************
  4017 ;; Defined at:
  4018 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  4019 ;; Parameters:    Size  Location     Type
  4020 ;;  divisor         2    0[BANK0 ] unsigned int 
  4021 ;;  dividend        2    2[BANK0 ] unsigned int 
  4022 ;; Auto vars:     Size  Location     Type
  4023 ;;  quotient        2    5[BANK0 ] unsigned int 
  4024 ;;  counter         1    7[BANK0 ] unsigned char 
  4025 ;; Return value:  Size  Location     Type
  4026 ;;                  2    0[BANK0 ] unsigned int 
  4027 ;; Registers used:
  4028 ;;		wreg, status,2, status,0
  4029 ;; Tracked objects:
  4030 ;;		On entry : 0/0
  4031 ;;		On exit  : 0/0
  4032 ;;		Unchanged: 0/0
  4033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4034 ;;      Params:         0       4       0       0
  4035 ;;      Locals:         0       3       0       0
  4036 ;;      Temps:          0       1       0       0
  4037 ;;      Totals:         0       8       0       0
  4038 ;;Total ram usage:        8 bytes
  4039 ;; Hardware stack levels used:    1
  4040 ;; Hardware stack levels required when called:    2
  4041 ;; This function calls:
  4042 ;;		Nothing
  4043 ;; This function is called by:
  4044 ;;		_ADC_PF
  4045 ;;		_floatTostr
  4046 ;; This function uses a non-reentrant model
  4047 ;;
  4048                           
  4049                           
  4050                           ;psect for function ___lwdiv
  4051  0BBD                     ___lwdiv:	
  4052                           
  4053                           ;incstack = 0
  4054                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4055  0BBD  1283               	bcf	3,5	;RP0=0, select bank0
  4056  0BBE  1303               	bcf	3,6	;RP1=0, select bank0
  4057  0BBF  01A5               	clrf	___lwdiv@quotient
  4058  0BC0  01A6               	clrf	___lwdiv@quotient+1
  4059  0BC1  0820               	movf	___lwdiv@divisor,w
  4060  0BC2  0421               	iorwf	___lwdiv@divisor+1,w
  4061  0BC3  1903               	btfsc	3,2
  4062  0BC4  2BF6               	goto	l1556
  4063  0BC5  01A7               	clrf	___lwdiv@counter
  4064  0BC6  0AA7               	incf	___lwdiv@counter,f
  4065  0BC7                     l1544:	
  4066  0BC7  1BA1               	btfsc	___lwdiv@divisor+1,7
  4067  0BC8  2BD5               	goto	l1546
  4068  0BC9  3001               	movlw	1
  4069  0BCA                     u1565:	
  4070  0BCA  1003               	clrc
  4071  0BCB  0DA0               	rlf	___lwdiv@divisor,f
  4072  0BCC  0DA1               	rlf	___lwdiv@divisor+1,f
  4073  0BCD  3EFF               	addlw	-1
  4074  0BCE  1D03               	skipz
  4075  0BCF  2BCA               	goto	u1565
  4076  0BD0  3001               	movlw	1
  4077  0BD1  00A4               	movwf	??___lwdiv
  4078  0BD2  0824               	movf	??___lwdiv,w
  4079  0BD3  07A7               	addwf	___lwdiv@counter,f
  4080  0BD4  2BC7               	goto	l1544
  4081  0BD5                     l1546:	
  4082  0BD5  3001               	movlw	1
  4083  0BD6                     u1585:	
  4084  0BD6  1003               	clrc
  4085  0BD7  0DA5               	rlf	___lwdiv@quotient,f
  4086  0BD8  0DA6               	rlf	___lwdiv@quotient+1,f
  4087  0BD9  3EFF               	addlw	-1
  4088  0BDA  1D03               	skipz
  4089  0BDB  2BD6               	goto	u1585
  4090  0BDC  0821               	movf	___lwdiv@divisor+1,w
  4091  0BDD  0223               	subwf	___lwdiv@dividend+1,w
  4092  0BDE  1D03               	skipz
  4093  0BDF  2BE2               	goto	u1595
  4094  0BE0  0820               	movf	___lwdiv@divisor,w
  4095  0BE1  0222               	subwf	___lwdiv@dividend,w
  4096  0BE2                     u1595:	
  4097  0BE2  1C03               	skipc
  4098  0BE3  2BEB               	goto	l1552
  4099  0BE4  0820               	movf	___lwdiv@divisor,w
  4100  0BE5  02A2               	subwf	___lwdiv@dividend,f
  4101  0BE6  0821               	movf	___lwdiv@divisor+1,w
  4102  0BE7  1C03               	skipc
  4103  0BE8  03A3               	decf	___lwdiv@dividend+1,f
  4104  0BE9  02A3               	subwf	___lwdiv@dividend+1,f
  4105  0BEA  1425               	bsf	___lwdiv@quotient,0
  4106  0BEB                     l1552:	
  4107  0BEB  3001               	movlw	1
  4108  0BEC                     u1605:	
  4109  0BEC  1003               	clrc
  4110  0BED  0CA1               	rrf	___lwdiv@divisor+1,f
  4111  0BEE  0CA0               	rrf	___lwdiv@divisor,f
  4112  0BEF  3EFF               	addlw	-1
  4113  0BF0  1D03               	skipz
  4114  0BF1  2BEC               	goto	u1605
  4115  0BF2  3001               	movlw	1
  4116  0BF3  02A7               	subwf	___lwdiv@counter,f
  4117  0BF4  1D03               	btfss	3,2
  4118  0BF5  2BD5               	goto	l1546
  4119  0BF6                     l1556:	
  4120  0BF6  0826               	movf	___lwdiv@quotient+1,w
  4121  0BF7  00A1               	movwf	?___lwdiv+1
  4122  0BF8  0825               	movf	___lwdiv@quotient,w
  4123  0BF9  00A0               	movwf	?___lwdiv
  4124  0BFA  0008               	return
  4125  0BFB                     __end_of___lwdiv:	
  4126                           
  4127                           	psect	text15
  4128  0E37                     __ptext15:	
  4129 ;; *************** function ___fttol *****************
  4130 ;; Defined at:
  4131 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
  4132 ;; Parameters:    Size  Location     Type
  4133 ;;  f1              3   46[BANK0 ] float 
  4134 ;; Auto vars:     Size  Location     Type
  4135 ;;  lval            4   55[BANK0 ] unsigned long 
  4136 ;;  exp1            1   59[BANK0 ] unsigned char 
  4137 ;;  sign1           1   54[BANK0 ] unsigned char 
  4138 ;; Return value:  Size  Location     Type
  4139 ;;                  4   46[BANK0 ] long 
  4140 ;; Registers used:
  4141 ;;		wreg, status,2, status,0
  4142 ;; Tracked objects:
  4143 ;;		On entry : 0/0
  4144 ;;		On exit  : 0/0
  4145 ;;		Unchanged: 0/0
  4146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4147 ;;      Params:         0       4       0       0
  4148 ;;      Locals:         0       6       0       0
  4149 ;;      Temps:          0       4       0       0
  4150 ;;      Totals:         0      14       0       0
  4151 ;;Total ram usage:       14 bytes
  4152 ;; Hardware stack levels used:    1
  4153 ;; Hardware stack levels required when called:    2
  4154 ;; This function calls:
  4155 ;;		Nothing
  4156 ;; This function is called by:
  4157 ;;		_ADC_RMS
  4158 ;;		_ADC_PF
  4159 ;; This function uses a non-reentrant model
  4160 ;;
  4161                           
  4162                           
  4163                           ;psect for function ___fttol
  4164  0E37                     ___fttol:	
  4165                           
  4166                           ;incstack = 0
  4167                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  4168  0E37  1283               	bcf	3,5	;RP0=0, select bank0
  4169  0E38  1303               	bcf	3,6	;RP1=0, select bank0
  4170  0E39  084E               	movf	___fttol@f1,w
  4171  0E3A  00D2               	movwf	??___fttol
  4172  0E3B  084F               	movf	___fttol@f1+1,w
  4173  0E3C  00D3               	movwf	??___fttol+1
  4174  0E3D  0850               	movf	___fttol@f1+2,w
  4175  0E3E  00D4               	movwf	??___fttol+2
  4176  0E3F  1003               	clrc
  4177  0E40  0D53               	rlf	??___fttol+1,w
  4178  0E41  0D54               	rlf	??___fttol+2,w
  4179  0E42  00D5               	movwf	??___fttol+3
  4180  0E43  0855               	movf	??___fttol+3,w
  4181  0E44  00DB               	movwf	___fttol@exp1
  4182  0E45  085B               	movf	___fttol@exp1,w
  4183  0E46  1D03               	btfss	3,2
  4184  0E47  2E51               	goto	l1840
  4185  0E48  3000               	movlw	0
  4186  0E49  00D1               	movwf	?___fttol+3
  4187  0E4A  3000               	movlw	0
  4188  0E4B  00D0               	movwf	?___fttol+2
  4189  0E4C  3000               	movlw	0
  4190  0E4D  00CF               	movwf	?___fttol+1
  4191  0E4E  3000               	movlw	0
  4192  0E4F  00CE               	movwf	?___fttol
  4193  0E50  0008               	return
  4194  0E51                     l1840:	
  4195  0E51  084E               	movf	___fttol@f1,w
  4196  0E52  00D2               	movwf	??___fttol
  4197  0E53  084F               	movf	___fttol@f1+1,w
  4198  0E54  00D3               	movwf	??___fttol+1
  4199  0E55  0850               	movf	___fttol@f1+2,w
  4200  0E56  00D4               	movwf	??___fttol+2
  4201  0E57  3017               	movlw	23
  4202  0E58                     u2305:	
  4203  0E58  1003               	clrc
  4204  0E59  0CD4               	rrf	??___fttol+2,f
  4205  0E5A  0CD3               	rrf	??___fttol+1,f
  4206  0E5B  0CD2               	rrf	??___fttol,f
  4207  0E5C  3EFF               	addlw	-1
  4208  0E5D  1D03               	skipz
  4209  0E5E  2E58               	goto	u2305
  4210  0E5F  0852               	movf	??___fttol,w
  4211  0E60  00D5               	movwf	??___fttol+3
  4212  0E61  0855               	movf	??___fttol+3,w
  4213  0E62  00D6               	movwf	___fttol@sign1
  4214  0E63  17CF               	bsf	___fttol@f1+1,7
  4215  0E64  30FF               	movlw	255
  4216  0E65  05CE               	andwf	___fttol@f1,f
  4217  0E66  30FF               	movlw	255
  4218  0E67  05CF               	andwf	___fttol@f1+1,f
  4219  0E68  3000               	movlw	0
  4220  0E69  05D0               	andwf	___fttol@f1+2,f
  4221  0E6A  084E               	movf	___fttol@f1,w
  4222  0E6B  00D7               	movwf	___fttol@lval
  4223  0E6C  084F               	movf	___fttol@f1+1,w
  4224  0E6D  00D8               	movwf	___fttol@lval+1
  4225  0E6E  0850               	movf	___fttol@f1+2,w
  4226  0E6F  00D9               	movwf	___fttol@lval+2
  4227  0E70  01DA               	clrf	___fttol@lval+3
  4228  0E71  308E               	movlw	142
  4229  0E72  02DB               	subwf	___fttol@exp1,f
  4230  0E73  1FDB               	btfss	___fttol@exp1,7
  4231  0E74  2E93               	goto	l1860
  4232  0E75  085B               	movf	___fttol@exp1,w
  4233  0E76  3A80               	xorlw	128
  4234  0E77  3E8F               	addlw	143
  4235  0E78  1803               	skipnc
  4236  0E79  2E83               	goto	l1858
  4237  0E7A  3000               	movlw	0
  4238  0E7B  00D1               	movwf	?___fttol+3
  4239  0E7C  3000               	movlw	0
  4240  0E7D  00D0               	movwf	?___fttol+2
  4241  0E7E  3000               	movlw	0
  4242  0E7F  00CF               	movwf	?___fttol+1
  4243  0E80  3000               	movlw	0
  4244  0E81  00CE               	movwf	?___fttol
  4245  0E82  0008               	return
  4246  0E83                     l1858:	
  4247  0E83  3001               	movlw	1
  4248  0E84                     u2335:	
  4249  0E84  1003               	clrc
  4250  0E85  0CDA               	rrf	___fttol@lval+3,f
  4251  0E86  0CD9               	rrf	___fttol@lval+2,f
  4252  0E87  0CD8               	rrf	___fttol@lval+1,f
  4253  0E88  0CD7               	rrf	___fttol@lval,f
  4254  0E89  3EFF               	addlw	-1
  4255  0E8A  1D03               	skipz
  4256  0E8B  2E84               	goto	u2335
  4257  0E8C  3001               	movlw	1
  4258  0E8D  00D2               	movwf	??___fttol
  4259  0E8E  0852               	movf	??___fttol,w
  4260  0E8F  07DB               	addwf	___fttol@exp1,f
  4261  0E90  1903               	btfsc	3,2
  4262  0E91  2EAE               	goto	l1868
  4263  0E92  2E83               	goto	l1858
  4264  0E93                     l1860:	
  4265  0E93  3018               	movlw	24
  4266  0E94  025B               	subwf	___fttol@exp1,w
  4267  0E95  1C03               	skipc
  4268  0E96  2EAB               	goto	l620
  4269  0E97  3000               	movlw	0
  4270  0E98  00D1               	movwf	?___fttol+3
  4271  0E99  3000               	movlw	0
  4272  0E9A  00D0               	movwf	?___fttol+2
  4273  0E9B  3000               	movlw	0
  4274  0E9C  00CF               	movwf	?___fttol+1
  4275  0E9D  3000               	movlw	0
  4276  0E9E  00CE               	movwf	?___fttol
  4277  0E9F  0008               	return
  4278  0EA0                     l1866:	
  4279  0EA0  3001               	movlw	1
  4280  0EA1  00D2               	movwf	??___fttol
  4281  0EA2                     u2365:	
  4282  0EA2  1003               	clrc
  4283  0EA3  0DD7               	rlf	___fttol@lval,f
  4284  0EA4  0DD8               	rlf	___fttol@lval+1,f
  4285  0EA5  0DD9               	rlf	___fttol@lval+2,f
  4286  0EA6  0DDA               	rlf	___fttol@lval+3,f
  4287  0EA7  0BD2               	decfsz	??___fttol,f
  4288  0EA8  2EA2               	goto	u2365
  4289  0EA9  3001               	movlw	1
  4290  0EAA  02DB               	subwf	___fttol@exp1,f
  4291  0EAB                     l620:	
  4292  0EAB  085B               	movf	___fttol@exp1,w
  4293  0EAC  1D03               	btfss	3,2
  4294  0EAD  2EA0               	goto	l1866
  4295  0EAE                     l1868:	
  4296  0EAE  0856               	movf	___fttol@sign1,w
  4297  0EAF  1903               	btfsc	3,2
  4298  0EB0  2EBC               	goto	l1872
  4299  0EB1  09D7               	comf	___fttol@lval,f
  4300  0EB2  09D8               	comf	___fttol@lval+1,f
  4301  0EB3  09D9               	comf	___fttol@lval+2,f
  4302  0EB4  09DA               	comf	___fttol@lval+3,f
  4303  0EB5  0AD7               	incf	___fttol@lval,f
  4304  0EB6  1903               	skipnz
  4305  0EB7  0AD8               	incf	___fttol@lval+1,f
  4306  0EB8  1903               	skipnz
  4307  0EB9  0AD9               	incf	___fttol@lval+2,f
  4308  0EBA  1903               	skipnz
  4309  0EBB  0ADA               	incf	___fttol@lval+3,f
  4310  0EBC                     l1872:	
  4311  0EBC  085A               	movf	___fttol@lval+3,w
  4312  0EBD  00D1               	movwf	?___fttol+3
  4313  0EBE  0859               	movf	___fttol@lval+2,w
  4314  0EBF  00D0               	movwf	?___fttol+2
  4315  0EC0  0858               	movf	___fttol@lval+1,w
  4316  0EC1  00CF               	movwf	?___fttol+1
  4317  0EC2  0857               	movf	___fttol@lval,w
  4318  0EC3  00CE               	movwf	?___fttol
  4319  0EC4  0008               	return
  4320  0EC5                     __end_of___fttol:	
  4321                           
  4322                           	psect	text16
  4323  09CE                     __ptext16:	
  4324 ;; *************** function ___ftneg *****************
  4325 ;; Defined at:
  4326 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftneg.c"
  4327 ;; Parameters:    Size  Location     Type
  4328 ;;  f1              3    0[BANK0 ] float 
  4329 ;; Auto vars:     Size  Location     Type
  4330 ;;		None
  4331 ;; Return value:  Size  Location     Type
  4332 ;;                  3    0[BANK0 ] float 
  4333 ;; Registers used:
  4334 ;;		wreg
  4335 ;; Tracked objects:
  4336 ;;		On entry : 0/0
  4337 ;;		On exit  : 0/0
  4338 ;;		Unchanged: 0/0
  4339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4340 ;;      Params:         0       3       0       0
  4341 ;;      Locals:         0       0       0       0
  4342 ;;      Temps:          0       0       0       0
  4343 ;;      Totals:         0       3       0       0
  4344 ;;Total ram usage:        3 bytes
  4345 ;; Hardware stack levels used:    1
  4346 ;; Hardware stack levels required when called:    2
  4347 ;; This function calls:
  4348 ;;		Nothing
  4349 ;; This function is called by:
  4350 ;;		_ADC_PF
  4351 ;; This function uses a non-reentrant model
  4352 ;;
  4353                           
  4354                           
  4355                           ;psect for function ___ftneg
  4356  09CE                     ___ftneg:	
  4357                           
  4358                           ;incstack = 0
  4359                           ; Regs used in ___ftneg: [wreg]
  4360  09CE  1283               	bcf	3,5	;RP0=0, select bank0
  4361  09CF  1303               	bcf	3,6	;RP1=0, select bank0
  4362  09D0  0822               	movf	___ftneg@f1+2,w
  4363  09D1  0421               	iorwf	___ftneg@f1+1,w
  4364  09D2  0420               	iorwf	___ftneg@f1,w
  4365  09D3  1903               	skipnz
  4366  09D4  0008               	return
  4367  09D5  3080               	movlw	128
  4368  09D6  06A2               	xorwf	___ftneg@f1+2,f
  4369  09D7  0008               	return
  4370  09D8                     __end_of___ftneg:	
  4371                           
  4372                           	psect	text17
  4373  0591                     __ptext17:	
  4374 ;; *************** function ___ftmul *****************
  4375 ;; Defined at:
  4376 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  4377 ;; Parameters:    Size  Location     Type
  4378 ;;  f1              3   14[BANK0 ] float 
  4379 ;;  f2              3   17[BANK0 ] float 
  4380 ;; Auto vars:     Size  Location     Type
  4381 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  4382 ;;  sign            1   29[BANK0 ] unsigned char 
  4383 ;;  cntr            1   28[BANK0 ] unsigned char 
  4384 ;;  exp             1   24[BANK0 ] unsigned char 
  4385 ;; Return value:  Size  Location     Type
  4386 ;;                  3   14[BANK0 ] float 
  4387 ;; Registers used:
  4388 ;;		wreg, status,2, status,0, pclath, cstack
  4389 ;; Tracked objects:
  4390 ;;		On entry : 0/0
  4391 ;;		On exit  : 0/0
  4392 ;;		Unchanged: 0/0
  4393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4394 ;;      Params:         0       6       0       0
  4395 ;;      Locals:         0       6       0       0
  4396 ;;      Temps:          0       4       0       0
  4397 ;;      Totals:         0      16       0       0
  4398 ;;Total ram usage:       16 bytes
  4399 ;; Hardware stack levels used:    1
  4400 ;; Hardware stack levels required when called:    3
  4401 ;; This function calls:
  4402 ;;		___ftpack
  4403 ;; This function is called by:
  4404 ;;		_ADC_RMS
  4405 ;;		_ADC_PF
  4406 ;; This function uses a non-reentrant model
  4407 ;;
  4408                           
  4409                           
  4410                           ;psect for function ___ftmul
  4411  0591                     ___ftmul:	
  4412                           
  4413                           ;incstack = 0
  4414                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  4415  0591  1283               	bcf	3,5	;RP0=0, select bank0
  4416  0592  1303               	bcf	3,6	;RP1=0, select bank0
  4417  0593  082E               	movf	___ftmul@f1,w
  4418  0594  00B4               	movwf	??___ftmul
  4419  0595  082F               	movf	___ftmul@f1+1,w
  4420  0596  00B5               	movwf	??___ftmul+1
  4421  0597  0830               	movf	___ftmul@f1+2,w
  4422  0598  00B6               	movwf	??___ftmul+2
  4423  0599  1003               	clrc
  4424  059A  0D35               	rlf	??___ftmul+1,w
  4425  059B  0D36               	rlf	??___ftmul+2,w
  4426  059C  00B7               	movwf	??___ftmul+3
  4427  059D  0837               	movf	??___ftmul+3,w
  4428  059E  00B8               	movwf	___ftmul@exp
  4429  059F  0838               	movf	___ftmul@exp,w
  4430  05A0  1D03               	btfss	3,2
  4431  05A1  2DA9               	goto	l1782
  4432  05A2  3000               	movlw	0
  4433  05A3  00AE               	movwf	?___ftmul
  4434  05A4  3000               	movlw	0
  4435  05A5  00AF               	movwf	?___ftmul+1
  4436  05A6  3000               	movlw	0
  4437  05A7  00B0               	movwf	?___ftmul+2
  4438  05A8  0008               	return
  4439  05A9                     l1782:	
  4440  05A9  0831               	movf	___ftmul@f2,w
  4441  05AA  00B4               	movwf	??___ftmul
  4442  05AB  0832               	movf	___ftmul@f2+1,w
  4443  05AC  00B5               	movwf	??___ftmul+1
  4444  05AD  0833               	movf	___ftmul@f2+2,w
  4445  05AE  00B6               	movwf	??___ftmul+2
  4446  05AF  1003               	clrc
  4447  05B0  0D35               	rlf	??___ftmul+1,w
  4448  05B1  0D36               	rlf	??___ftmul+2,w
  4449  05B2  00B7               	movwf	??___ftmul+3
  4450  05B3  0837               	movf	??___ftmul+3,w
  4451  05B4  00BD               	movwf	___ftmul@sign
  4452  05B5  083D               	movf	___ftmul@sign,w
  4453  05B6  1D03               	btfss	3,2
  4454  05B7  2DBF               	goto	l1788
  4455  05B8  3000               	movlw	0
  4456  05B9  00AE               	movwf	?___ftmul
  4457  05BA  3000               	movlw	0
  4458  05BB  00AF               	movwf	?___ftmul+1
  4459  05BC  3000               	movlw	0
  4460  05BD  00B0               	movwf	?___ftmul+2
  4461  05BE  0008               	return
  4462  05BF                     l1788:	
  4463  05BF  083D               	movf	___ftmul@sign,w
  4464  05C0  3E7B               	addlw	123
  4465  05C1  00B4               	movwf	??___ftmul
  4466  05C2  0834               	movf	??___ftmul,w
  4467  05C3  07B8               	addwf	___ftmul@exp,f
  4468  05C4  082E               	movf	___ftmul@f1,w
  4469  05C5  00B4               	movwf	??___ftmul
  4470  05C6  082F               	movf	___ftmul@f1+1,w
  4471  05C7  00B5               	movwf	??___ftmul+1
  4472  05C8  0830               	movf	___ftmul@f1+2,w
  4473  05C9  00B6               	movwf	??___ftmul+2
  4474  05CA  3010               	movlw	16
  4475  05CB                     u2165:	
  4476  05CB  1003               	clrc
  4477  05CC  0CB6               	rrf	??___ftmul+2,f
  4478  05CD  0CB5               	rrf	??___ftmul+1,f
  4479  05CE  0CB4               	rrf	??___ftmul,f
  4480  05CF  3EFF               	addlw	-1
  4481  05D0  1D03               	skipz
  4482  05D1  2DCB               	goto	u2165
  4483  05D2  0834               	movf	??___ftmul,w
  4484  05D3  00B7               	movwf	??___ftmul+3
  4485  05D4  0837               	movf	??___ftmul+3,w
  4486  05D5  00BD               	movwf	___ftmul@sign
  4487  05D6  0831               	movf	___ftmul@f2,w
  4488  05D7  00B4               	movwf	??___ftmul
  4489  05D8  0832               	movf	___ftmul@f2+1,w
  4490  05D9  00B5               	movwf	??___ftmul+1
  4491  05DA  0833               	movf	___ftmul@f2+2,w
  4492  05DB  00B6               	movwf	??___ftmul+2
  4493  05DC  3010               	movlw	16
  4494  05DD                     u2175:	
  4495  05DD  1003               	clrc
  4496  05DE  0CB6               	rrf	??___ftmul+2,f
  4497  05DF  0CB5               	rrf	??___ftmul+1,f
  4498  05E0  0CB4               	rrf	??___ftmul,f
  4499  05E1  3EFF               	addlw	-1
  4500  05E2  1D03               	skipz
  4501  05E3  2DDD               	goto	u2175
  4502  05E4  0834               	movf	??___ftmul,w
  4503  05E5  00B7               	movwf	??___ftmul+3
  4504  05E6  0837               	movf	??___ftmul+3,w
  4505  05E7  06BD               	xorwf	___ftmul@sign,f
  4506  05E8  3080               	movlw	128
  4507  05E9  00B4               	movwf	??___ftmul
  4508  05EA  0834               	movf	??___ftmul,w
  4509  05EB  05BD               	andwf	___ftmul@sign,f
  4510  05EC  17AF               	bsf	___ftmul@f1+1,7
  4511  05ED  17B2               	bsf	___ftmul@f2+1,7
  4512  05EE  30FF               	movlw	255
  4513  05EF  05B1               	andwf	___ftmul@f2,f
  4514  05F0  30FF               	movlw	255
  4515  05F1  05B2               	andwf	___ftmul@f2+1,f
  4516  05F2  3000               	movlw	0
  4517  05F3  05B3               	andwf	___ftmul@f2+2,f
  4518  05F4  3000               	movlw	0
  4519  05F5  00B9               	movwf	___ftmul@f3_as_product
  4520  05F6  3000               	movlw	0
  4521  05F7  00BA               	movwf	___ftmul@f3_as_product+1
  4522  05F8  3000               	movlw	0
  4523  05F9  00BB               	movwf	___ftmul@f3_as_product+2
  4524  05FA  3007               	movlw	7
  4525  05FB  00B4               	movwf	??___ftmul
  4526  05FC  0834               	movf	??___ftmul,w
  4527  05FD  00BC               	movwf	___ftmul@cntr
  4528  05FE                     l1800:	
  4529  05FE  1C2E               	btfss	___ftmul@f1,0
  4530  05FF  2E0E               	goto	l1804
  4531  0600  0831               	movf	___ftmul@f2,w
  4532  0601  07B9               	addwf	___ftmul@f3_as_product,f
  4533  0602  0832               	movf	___ftmul@f2+1,w
  4534  0603  1103               	clrz
  4535  0604  1803               	skipnc
  4536  0605  0A32               	incf	___ftmul@f2+1,w
  4537  0606  1D03               	btfss	3,2
  4538  0607  07BA               	addwf	___ftmul@f3_as_product+1,f
  4539  0608  0833               	movf	___ftmul@f2+2,w
  4540  0609  1103               	clrz
  4541  060A  1803               	skipnc
  4542  060B  0A33               	incf	___ftmul@f2+2,w
  4543  060C  1D03               	btfss	3,2
  4544  060D  07BB               	addwf	___ftmul@f3_as_product+2,f
  4545  060E                     l1804:	
  4546  060E  3001               	movlw	1
  4547  060F                     u2205:	
  4548  060F  1003               	clrc
  4549  0610  0CB0               	rrf	___ftmul@f1+2,f
  4550  0611  0CAF               	rrf	___ftmul@f1+1,f
  4551  0612  0CAE               	rrf	___ftmul@f1,f
  4552  0613  3EFF               	addlw	-1
  4553  0614  1D03               	skipz
  4554  0615  2E0F               	goto	u2205
  4555  0616  3001               	movlw	1
  4556  0617                     u2215:	
  4557  0617  1003               	clrc
  4558  0618  0DB1               	rlf	___ftmul@f2,f
  4559  0619  0DB2               	rlf	___ftmul@f2+1,f
  4560  061A  0DB3               	rlf	___ftmul@f2+2,f
  4561  061B  3EFF               	addlw	-1
  4562  061C  1D03               	skipz
  4563  061D  2E17               	goto	u2215
  4564  061E  3001               	movlw	1
  4565  061F  02BC               	subwf	___ftmul@cntr,f
  4566  0620  1D03               	btfss	3,2
  4567  0621  2DFE               	goto	l1800
  4568  0622  3009               	movlw	9
  4569  0623  00B4               	movwf	??___ftmul
  4570  0624  0834               	movf	??___ftmul,w
  4571  0625  00BC               	movwf	___ftmul@cntr
  4572  0626                     l1812:	
  4573  0626  1C2E               	btfss	___ftmul@f1,0
  4574  0627  2E36               	goto	l1816
  4575  0628  0831               	movf	___ftmul@f2,w
  4576  0629  07B9               	addwf	___ftmul@f3_as_product,f
  4577  062A  0832               	movf	___ftmul@f2+1,w
  4578  062B  1103               	clrz
  4579  062C  1803               	skipnc
  4580  062D  0A32               	incf	___ftmul@f2+1,w
  4581  062E  1D03               	btfss	3,2
  4582  062F  07BA               	addwf	___ftmul@f3_as_product+1,f
  4583  0630  0833               	movf	___ftmul@f2+2,w
  4584  0631  1103               	clrz
  4585  0632  1803               	skipnc
  4586  0633  0A33               	incf	___ftmul@f2+2,w
  4587  0634  1D03               	btfss	3,2
  4588  0635  07BB               	addwf	___ftmul@f3_as_product+2,f
  4589  0636                     l1816:	
  4590  0636  3001               	movlw	1
  4591  0637                     u2255:	
  4592  0637  1003               	clrc
  4593  0638  0CB0               	rrf	___ftmul@f1+2,f
  4594  0639  0CAF               	rrf	___ftmul@f1+1,f
  4595  063A  0CAE               	rrf	___ftmul@f1,f
  4596  063B  3EFF               	addlw	-1
  4597  063C  1D03               	skipz
  4598  063D  2E37               	goto	u2255
  4599  063E  3001               	movlw	1
  4600  063F                     u2265:	
  4601  063F  1003               	clrc
  4602  0640  0CBB               	rrf	___ftmul@f3_as_product+2,f
  4603  0641  0CBA               	rrf	___ftmul@f3_as_product+1,f
  4604  0642  0CB9               	rrf	___ftmul@f3_as_product,f
  4605  0643  3EFF               	addlw	-1
  4606  0644  1D03               	skipz
  4607  0645  2E3F               	goto	u2265
  4608  0646  3001               	movlw	1
  4609  0647  02BC               	subwf	___ftmul@cntr,f
  4610  0648  1D03               	btfss	3,2
  4611  0649  2E26               	goto	l1812
  4612  064A  0839               	movf	___ftmul@f3_as_product,w
  4613  064B  00A0               	movwf	___ftpack@arg
  4614  064C  083A               	movf	___ftmul@f3_as_product+1,w
  4615  064D  00A1               	movwf	___ftpack@arg+1
  4616  064E  083B               	movf	___ftmul@f3_as_product+2,w
  4617  064F  00A2               	movwf	___ftpack@arg+2
  4618  0650  0838               	movf	___ftmul@exp,w
  4619  0651  00B4               	movwf	??___ftmul
  4620  0652  0834               	movf	??___ftmul,w
  4621  0653  00A3               	movwf	___ftpack@exp
  4622  0654  083D               	movf	___ftmul@sign,w
  4623  0655  00B5               	movwf	??___ftmul+1
  4624  0656  0835               	movf	??___ftmul+1,w
  4625  0657  00A4               	movwf	___ftpack@sign
  4626  0658  158A  2556         	fcall	___ftpack
  4627  065A  1283               	bcf	3,5	;RP0=0, select bank0
  4628  065B  1303               	bcf	3,6	;RP1=0, select bank0
  4629  065C  0820               	movf	?___ftpack,w
  4630  065D  00AE               	movwf	?___ftmul
  4631  065E  0821               	movf	?___ftpack+1,w
  4632  065F  00AF               	movwf	?___ftmul+1
  4633  0660  0822               	movf	?___ftpack+2,w
  4634  0661  00B0               	movwf	?___ftmul+2
  4635  0662  0008               	return
  4636  0663                     __end_of___ftmul:	
  4637                           
  4638                           	psect	text18
  4639  0C97                     __ptext18:	
  4640 ;; *************** function ___ftge *****************
  4641 ;; Defined at:
  4642 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
  4643 ;; Parameters:    Size  Location     Type
  4644 ;;  ff1             3    0[BANK0 ] float 
  4645 ;;  ff2             3    3[BANK0 ] float 
  4646 ;; Auto vars:     Size  Location     Type
  4647 ;;		None
  4648 ;; Return value:  Size  Location     Type
  4649 ;;		None               void
  4650 ;; Registers used:
  4651 ;;		wreg, status,2, status,0
  4652 ;; Tracked objects:
  4653 ;;		On entry : 0/0
  4654 ;;		On exit  : 0/0
  4655 ;;		Unchanged: 0/0
  4656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4657 ;;      Params:         0       6       0       0
  4658 ;;      Locals:         0       0       0       0
  4659 ;;      Temps:          0       6       0       0
  4660 ;;      Totals:         0      12       0       0
  4661 ;;Total ram usage:       12 bytes
  4662 ;; Hardware stack levels used:    1
  4663 ;; Hardware stack levels required when called:    2
  4664 ;; This function calls:
  4665 ;;		Nothing
  4666 ;; This function is called by:
  4667 ;;		_ADC_PF
  4668 ;; This function uses a non-reentrant model
  4669 ;;
  4670                           
  4671                           
  4672                           ;psect for function ___ftge
  4673  0C97                     ___ftge:	
  4674                           
  4675                           ;incstack = 0
  4676                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  4677  0C97  1283               	bcf	3,5	;RP0=0, select bank0
  4678  0C98  1303               	bcf	3,6	;RP1=0, select bank0
  4679  0C99  1FA2               	btfss	___ftge@ff1+2,7
  4680  0C9A  2CC0               	goto	l1760
  4681  0C9B  3000               	movlw	0
  4682  0C9C  00A6               	movwf	??___ftge
  4683  0C9D  3000               	movlw	0
  4684  0C9E  00A7               	movwf	??___ftge+1
  4685  0C9F  3080               	movlw	128
  4686  0CA0  00A8               	movwf	??___ftge+2
  4687  0CA1  0920               	comf	___ftge@ff1,w
  4688  0CA2  00A9               	movwf	??___ftge+3
  4689  0CA3  0921               	comf	___ftge@ff1+1,w
  4690  0CA4  00AA               	movwf	??___ftge+4
  4691  0CA5  0922               	comf	___ftge@ff1+2,w
  4692  0CA6  00AB               	movwf	??___ftge+5
  4693  0CA7  0AA9               	incf	??___ftge+3,f
  4694  0CA8  1903               	skipnz
  4695  0CA9  0AAA               	incf	??___ftge+4,f
  4696  0CAA  1903               	skipnz
  4697  0CAB  0AAB               	incf	??___ftge+5,f
  4698  0CAC  0829               	movf	??___ftge+3,w
  4699  0CAD  07A6               	addwf	??___ftge,f
  4700  0CAE  082A               	movf	??___ftge+4,w
  4701  0CAF  1803               	skipnc
  4702  0CB0  0F2A               	incfsz	??___ftge+4,w
  4703  0CB1  2CB3               	goto	u2101
  4704  0CB2  2CB4               	goto	u2102
  4705  0CB3                     u2101:	
  4706  0CB3  07A7               	addwf	??___ftge+1,f
  4707  0CB4                     u2102:	
  4708  0CB4  082B               	movf	??___ftge+5,w
  4709  0CB5  1803               	skipnc
  4710  0CB6  0F2B               	incfsz	??___ftge+5,w
  4711  0CB7  2CB9               	goto	u2103
  4712  0CB8  2CBA               	goto	u2104
  4713  0CB9                     u2103:	
  4714  0CB9  07A8               	addwf	??___ftge+2,f
  4715  0CBA                     u2104:	
  4716  0CBA  0826               	movf	??___ftge,w
  4717  0CBB  00A0               	movwf	___ftge@ff1
  4718  0CBC  0827               	movf	??___ftge+1,w
  4719  0CBD  00A1               	movwf	___ftge@ff1+1
  4720  0CBE  0828               	movf	??___ftge+2,w
  4721  0CBF  00A2               	movwf	___ftge@ff1+2
  4722  0CC0                     l1760:	
  4723  0CC0  1FA5               	btfss	___ftge@ff2+2,7
  4724  0CC1  2CE7               	goto	l1764
  4725  0CC2  3000               	movlw	0
  4726  0CC3  00A6               	movwf	??___ftge
  4727  0CC4  3000               	movlw	0
  4728  0CC5  00A7               	movwf	??___ftge+1
  4729  0CC6  3080               	movlw	128
  4730  0CC7  00A8               	movwf	??___ftge+2
  4731  0CC8  0923               	comf	___ftge@ff2,w
  4732  0CC9  00A9               	movwf	??___ftge+3
  4733  0CCA  0924               	comf	___ftge@ff2+1,w
  4734  0CCB  00AA               	movwf	??___ftge+4
  4735  0CCC  0925               	comf	___ftge@ff2+2,w
  4736  0CCD  00AB               	movwf	??___ftge+5
  4737  0CCE  0AA9               	incf	??___ftge+3,f
  4738  0CCF  1903               	skipnz
  4739  0CD0  0AAA               	incf	??___ftge+4,f
  4740  0CD1  1903               	skipnz
  4741  0CD2  0AAB               	incf	??___ftge+5,f
  4742  0CD3  0829               	movf	??___ftge+3,w
  4743  0CD4  07A6               	addwf	??___ftge,f
  4744  0CD5  082A               	movf	??___ftge+4,w
  4745  0CD6  1803               	skipnc
  4746  0CD7  0F2A               	incfsz	??___ftge+4,w
  4747  0CD8  2CDA               	goto	u2121
  4748  0CD9  2CDB               	goto	u2122
  4749  0CDA                     u2121:	
  4750  0CDA  07A7               	addwf	??___ftge+1,f
  4751  0CDB                     u2122:	
  4752  0CDB  082B               	movf	??___ftge+5,w
  4753  0CDC  1803               	skipnc
  4754  0CDD  0F2B               	incfsz	??___ftge+5,w
  4755  0CDE  2CE0               	goto	u2123
  4756  0CDF  2CE1               	goto	u2124
  4757  0CE0                     u2123:	
  4758  0CE0  07A8               	addwf	??___ftge+2,f
  4759  0CE1                     u2124:	
  4760  0CE1  0826               	movf	??___ftge,w
  4761  0CE2  00A3               	movwf	___ftge@ff2
  4762  0CE3  0827               	movf	??___ftge+1,w
  4763  0CE4  00A4               	movwf	___ftge@ff2+1
  4764  0CE5  0828               	movf	??___ftge+2,w
  4765  0CE6  00A5               	movwf	___ftge@ff2+2
  4766  0CE7                     l1764:	
  4767  0CE7  3080               	movlw	128
  4768  0CE8  06A2               	xorwf	___ftge@ff1+2,f
  4769  0CE9  3080               	movlw	128
  4770  0CEA  06A5               	xorwf	___ftge@ff2+2,f
  4771  0CEB  0825               	movf	___ftge@ff2+2,w
  4772  0CEC  0222               	subwf	___ftge@ff1+2,w
  4773  0CED  1D03               	skipz
  4774  0CEE  0008               	return
  4775  0CEF  0824               	movf	___ftge@ff2+1,w
  4776  0CF0  0221               	subwf	___ftge@ff1+1,w
  4777  0CF1  1D03               	skipz
  4778  0CF2  0008               	return
  4779  0CF3  0823               	movf	___ftge@ff2,w
  4780  0CF4  0220               	subwf	___ftge@ff1,w
  4781  0CF5  0008               	return
  4782  0CF6                     __end_of___ftge:	
  4783                           
  4784                           	psect	text19
  4785  0722                     __ptext19:	
  4786 ;; *************** function ___ftdiv *****************
  4787 ;; Defined at:
  4788 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdiv.c"
  4789 ;; Parameters:    Size  Location     Type
  4790 ;;  f2              3   30[BANK0 ] float 
  4791 ;;  f1              3   33[BANK0 ] float 
  4792 ;; Auto vars:     Size  Location     Type
  4793 ;;  f3              3   41[BANK0 ] float 
  4794 ;;  sign            1   45[BANK0 ] unsigned char 
  4795 ;;  exp             1   44[BANK0 ] unsigned char 
  4796 ;;  cntr            1   40[BANK0 ] unsigned char 
  4797 ;; Return value:  Size  Location     Type
  4798 ;;                  3   30[BANK0 ] float 
  4799 ;; Registers used:
  4800 ;;		wreg, status,2, status,0, pclath, cstack
  4801 ;; Tracked objects:
  4802 ;;		On entry : 0/0
  4803 ;;		On exit  : 0/0
  4804 ;;		Unchanged: 0/0
  4805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4806 ;;      Params:         0       6       0       0
  4807 ;;      Locals:         0       6       0       0
  4808 ;;      Temps:          0       4       0       0
  4809 ;;      Totals:         0      16       0       0
  4810 ;;Total ram usage:       16 bytes
  4811 ;; Hardware stack levels used:    1
  4812 ;; Hardware stack levels required when called:    3
  4813 ;; This function calls:
  4814 ;;		___ftpack
  4815 ;; This function is called by:
  4816 ;;		_ADC_RMS
  4817 ;;		_ADC_PF
  4818 ;; This function uses a non-reentrant model
  4819 ;;
  4820                           
  4821                           
  4822                           ;psect for function ___ftdiv
  4823  0722                     ___ftdiv:	
  4824                           
  4825                           ;incstack = 0
  4826                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  4827  0722  1283               	bcf	3,5	;RP0=0, select bank0
  4828  0723  1303               	bcf	3,6	;RP1=0, select bank0
  4829  0724  0841               	movf	___ftdiv@f1,w
  4830  0725  00C4               	movwf	??___ftdiv
  4831  0726  0842               	movf	___ftdiv@f1+1,w
  4832  0727  00C5               	movwf	??___ftdiv+1
  4833  0728  0843               	movf	___ftdiv@f1+2,w
  4834  0729  00C6               	movwf	??___ftdiv+2
  4835  072A  1003               	clrc
  4836  072B  0D45               	rlf	??___ftdiv+1,w
  4837  072C  0D46               	rlf	??___ftdiv+2,w
  4838  072D  00C7               	movwf	??___ftdiv+3
  4839  072E  0847               	movf	??___ftdiv+3,w
  4840  072F  00CC               	movwf	___ftdiv@exp
  4841  0730  084C               	movf	___ftdiv@exp,w
  4842  0731  1D03               	btfss	3,2
  4843  0732  2F3A               	goto	l1720
  4844  0733  3000               	movlw	0
  4845  0734  00BE               	movwf	?___ftdiv
  4846  0735  3000               	movlw	0
  4847  0736  00BF               	movwf	?___ftdiv+1
  4848  0737  3000               	movlw	0
  4849  0738  00C0               	movwf	?___ftdiv+2
  4850  0739  0008               	return
  4851  073A                     l1720:	
  4852  073A  083E               	movf	___ftdiv@f2,w
  4853  073B  00C4               	movwf	??___ftdiv
  4854  073C  083F               	movf	___ftdiv@f2+1,w
  4855  073D  00C5               	movwf	??___ftdiv+1
  4856  073E  0840               	movf	___ftdiv@f2+2,w
  4857  073F  00C6               	movwf	??___ftdiv+2
  4858  0740  1003               	clrc
  4859  0741  0D45               	rlf	??___ftdiv+1,w
  4860  0742  0D46               	rlf	??___ftdiv+2,w
  4861  0743  00C7               	movwf	??___ftdiv+3
  4862  0744  0847               	movf	??___ftdiv+3,w
  4863  0745  00CD               	movwf	___ftdiv@sign
  4864  0746  084D               	movf	___ftdiv@sign,w
  4865  0747  1D03               	btfss	3,2
  4866  0748  2F50               	goto	l1726
  4867  0749  3000               	movlw	0
  4868  074A  00BE               	movwf	?___ftdiv
  4869  074B  3000               	movlw	0
  4870  074C  00BF               	movwf	?___ftdiv+1
  4871  074D  3000               	movlw	0
  4872  074E  00C0               	movwf	?___ftdiv+2
  4873  074F  0008               	return
  4874  0750                     l1726:	
  4875  0750  3000               	movlw	0
  4876  0751  00C9               	movwf	___ftdiv@f3
  4877  0752  3000               	movlw	0
  4878  0753  00CA               	movwf	___ftdiv@f3+1
  4879  0754  3000               	movlw	0
  4880  0755  00CB               	movwf	___ftdiv@f3+2
  4881  0756  3089               	movlw	137
  4882  0757  074D               	addwf	___ftdiv@sign,w
  4883  0758  00C4               	movwf	??___ftdiv
  4884  0759  0844               	movf	??___ftdiv,w
  4885  075A  02CC               	subwf	___ftdiv@exp,f
  4886  075B  0841               	movf	___ftdiv@f1,w
  4887  075C  00C4               	movwf	??___ftdiv
  4888  075D  0842               	movf	___ftdiv@f1+1,w
  4889  075E  00C5               	movwf	??___ftdiv+1
  4890  075F  0843               	movf	___ftdiv@f1+2,w
  4891  0760  00C6               	movwf	??___ftdiv+2
  4892  0761  3010               	movlw	16
  4893  0762                     u2035:	
  4894  0762  1003               	clrc
  4895  0763  0CC6               	rrf	??___ftdiv+2,f
  4896  0764  0CC5               	rrf	??___ftdiv+1,f
  4897  0765  0CC4               	rrf	??___ftdiv,f
  4898  0766  3EFF               	addlw	-1
  4899  0767  1D03               	skipz
  4900  0768  2F62               	goto	u2035
  4901  0769  0844               	movf	??___ftdiv,w
  4902  076A  00C7               	movwf	??___ftdiv+3
  4903  076B  0847               	movf	??___ftdiv+3,w
  4904  076C  00CD               	movwf	___ftdiv@sign
  4905  076D  083E               	movf	___ftdiv@f2,w
  4906  076E  00C4               	movwf	??___ftdiv
  4907  076F  083F               	movf	___ftdiv@f2+1,w
  4908  0770  00C5               	movwf	??___ftdiv+1
  4909  0771  0840               	movf	___ftdiv@f2+2,w
  4910  0772  00C6               	movwf	??___ftdiv+2
  4911  0773  3010               	movlw	16
  4912  0774                     u2045:	
  4913  0774  1003               	clrc
  4914  0775  0CC6               	rrf	??___ftdiv+2,f
  4915  0776  0CC5               	rrf	??___ftdiv+1,f
  4916  0777  0CC4               	rrf	??___ftdiv,f
  4917  0778  3EFF               	addlw	-1
  4918  0779  1D03               	skipz
  4919  077A  2F74               	goto	u2045
  4920  077B  0844               	movf	??___ftdiv,w
  4921  077C  00C7               	movwf	??___ftdiv+3
  4922  077D  0847               	movf	??___ftdiv+3,w
  4923  077E  06CD               	xorwf	___ftdiv@sign,f
  4924  077F  3080               	movlw	128
  4925  0780  00C4               	movwf	??___ftdiv
  4926  0781  0844               	movf	??___ftdiv,w
  4927  0782  05CD               	andwf	___ftdiv@sign,f
  4928  0783  17C2               	bsf	___ftdiv@f1+1,7
  4929  0784  30FF               	movlw	255
  4930  0785  05C1               	andwf	___ftdiv@f1,f
  4931  0786  30FF               	movlw	255
  4932  0787  05C2               	andwf	___ftdiv@f1+1,f
  4933  0788  3000               	movlw	0
  4934  0789  05C3               	andwf	___ftdiv@f1+2,f
  4935  078A  17BF               	bsf	___ftdiv@f2+1,7
  4936  078B  30FF               	movlw	255
  4937  078C  05BE               	andwf	___ftdiv@f2,f
  4938  078D  30FF               	movlw	255
  4939  078E  05BF               	andwf	___ftdiv@f2+1,f
  4940  078F  3000               	movlw	0
  4941  0790  05C0               	andwf	___ftdiv@f2+2,f
  4942  0791  3018               	movlw	24
  4943  0792  00C4               	movwf	??___ftdiv
  4944  0793  0844               	movf	??___ftdiv,w
  4945  0794  00C8               	movwf	___ftdiv@cntr
  4946  0795                     l1740:	
  4947  0795  3001               	movlw	1
  4948  0796                     u2055:	
  4949  0796  1003               	clrc
  4950  0797  0DC9               	rlf	___ftdiv@f3,f
  4951  0798  0DCA               	rlf	___ftdiv@f3+1,f
  4952  0799  0DCB               	rlf	___ftdiv@f3+2,f
  4953  079A  3EFF               	addlw	-1
  4954  079B  1D03               	skipz
  4955  079C  2F96               	goto	u2055
  4956  079D  0840               	movf	___ftdiv@f2+2,w
  4957  079E  0243               	subwf	___ftdiv@f1+2,w
  4958  079F  1D03               	skipz
  4959  07A0  2FA7               	goto	u2065
  4960  07A1  083F               	movf	___ftdiv@f2+1,w
  4961  07A2  0242               	subwf	___ftdiv@f1+1,w
  4962  07A3  1D03               	skipz
  4963  07A4  2FA7               	goto	u2065
  4964  07A5  083E               	movf	___ftdiv@f2,w
  4965  07A6  0241               	subwf	___ftdiv@f1,w
  4966  07A7                     u2065:	
  4967  07A7  1C03               	skipc
  4968  07A8  2FB4               	goto	l1748
  4969  07A9  083E               	movf	___ftdiv@f2,w
  4970  07AA  02C1               	subwf	___ftdiv@f1,f
  4971  07AB  083F               	movf	___ftdiv@f2+1,w
  4972  07AC  1C03               	skipc
  4973  07AD  0F3F               	incfsz	___ftdiv@f2+1,w
  4974  07AE  02C2               	subwf	___ftdiv@f1+1,f
  4975  07AF  0840               	movf	___ftdiv@f2+2,w
  4976  07B0  1C03               	skipc
  4977  07B1  0A40               	incf	___ftdiv@f2+2,w
  4978  07B2  02C3               	subwf	___ftdiv@f1+2,f
  4979  07B3  1449               	bsf	___ftdiv@f3,0
  4980  07B4                     l1748:	
  4981  07B4  3001               	movlw	1
  4982  07B5                     u2075:	
  4983  07B5  1003               	clrc
  4984  07B6  0DC1               	rlf	___ftdiv@f1,f
  4985  07B7  0DC2               	rlf	___ftdiv@f1+1,f
  4986  07B8  0DC3               	rlf	___ftdiv@f1+2,f
  4987  07B9  3EFF               	addlw	-1
  4988  07BA  1D03               	skipz
  4989  07BB  2FB5               	goto	u2075
  4990  07BC  3001               	movlw	1
  4991  07BD  02C8               	subwf	___ftdiv@cntr,f
  4992  07BE  1D03               	btfss	3,2
  4993  07BF  2F95               	goto	l1740
  4994  07C0  0849               	movf	___ftdiv@f3,w
  4995  07C1  00A0               	movwf	___ftpack@arg
  4996  07C2  084A               	movf	___ftdiv@f3+1,w
  4997  07C3  00A1               	movwf	___ftpack@arg+1
  4998  07C4  084B               	movf	___ftdiv@f3+2,w
  4999  07C5  00A2               	movwf	___ftpack@arg+2
  5000  07C6  084C               	movf	___ftdiv@exp,w
  5001  07C7  00C4               	movwf	??___ftdiv
  5002  07C8  0844               	movf	??___ftdiv,w
  5003  07C9  00A3               	movwf	___ftpack@exp
  5004  07CA  084D               	movf	___ftdiv@sign,w
  5005  07CB  00C5               	movwf	??___ftdiv+1
  5006  07CC  0845               	movf	??___ftdiv+1,w
  5007  07CD  00A4               	movwf	___ftpack@sign
  5008  07CE  158A  2556         	fcall	___ftpack
  5009  07D0  1283               	bcf	3,5	;RP0=0, select bank0
  5010  07D1  1303               	bcf	3,6	;RP1=0, select bank0
  5011  07D2  0820               	movf	?___ftpack,w
  5012  07D3  00BE               	movwf	?___ftdiv
  5013  07D4  0821               	movf	?___ftpack+1,w
  5014  07D5  00BF               	movwf	?___ftdiv+1
  5015  07D6  0822               	movf	?___ftpack+2,w
  5016  07D7  00C0               	movwf	?___ftdiv+2
  5017  07D8  0008               	return
  5018  07D9                     __end_of___ftdiv:	
  5019                           
  5020                           	psect	text20
  5021  0489                     __ptext20:	
  5022 ;; *************** function ___ftadd *****************
  5023 ;; Defined at:
  5024 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftadd.c"
  5025 ;; Parameters:    Size  Location     Type
  5026 ;;  f1              3    8[BANK0 ] float 
  5027 ;;  f2              3   11[BANK0 ] float 
  5028 ;; Auto vars:     Size  Location     Type
  5029 ;;  exp1            1   20[BANK0 ] unsigned char 
  5030 ;;  exp2            1   19[BANK0 ] unsigned char 
  5031 ;;  sign            1   18[BANK0 ] unsigned char 
  5032 ;; Return value:  Size  Location     Type
  5033 ;;                  3    8[BANK0 ] float 
  5034 ;; Registers used:
  5035 ;;		wreg, status,2, status,0, pclath, cstack
  5036 ;; Tracked objects:
  5037 ;;		On entry : 0/0
  5038 ;;		On exit  : 0/0
  5039 ;;		Unchanged: 0/0
  5040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5041 ;;      Params:         0       6       0       0
  5042 ;;      Locals:         0       3       0       0
  5043 ;;      Temps:          0       4       0       0
  5044 ;;      Totals:         0      13       0       0
  5045 ;;Total ram usage:       13 bytes
  5046 ;; Hardware stack levels used:    1
  5047 ;; Hardware stack levels required when called:    3
  5048 ;; This function calls:
  5049 ;;		___ftpack
  5050 ;; This function is called by:
  5051 ;;		_ADC_PF
  5052 ;; This function uses a non-reentrant model
  5053 ;;
  5054                           
  5055                           
  5056                           ;psect for function ___ftadd
  5057  0489                     ___ftadd:	
  5058                           
  5059                           ;incstack = 0
  5060                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  5061  0489  1283               	bcf	3,5	;RP0=0, select bank0
  5062  048A  1303               	bcf	3,6	;RP1=0, select bank0
  5063  048B  0828               	movf	___ftadd@f1,w
  5064  048C  00AE               	movwf	??___ftadd
  5065  048D  0829               	movf	___ftadd@f1+1,w
  5066  048E  00AF               	movwf	??___ftadd+1
  5067  048F  082A               	movf	___ftadd@f1+2,w
  5068  0490  00B0               	movwf	??___ftadd+2
  5069  0491  1003               	clrc
  5070  0492  0D2F               	rlf	??___ftadd+1,w
  5071  0493  0D30               	rlf	??___ftadd+2,w
  5072  0494  00B1               	movwf	??___ftadd+3
  5073  0495  0831               	movf	??___ftadd+3,w
  5074  0496  00B4               	movwf	___ftadd@exp1
  5075  0497  082B               	movf	___ftadd@f2,w
  5076  0498  00AE               	movwf	??___ftadd
  5077  0499  082C               	movf	___ftadd@f2+1,w
  5078  049A  00AF               	movwf	??___ftadd+1
  5079  049B  082D               	movf	___ftadd@f2+2,w
  5080  049C  00B0               	movwf	??___ftadd+2
  5081  049D  1003               	clrc
  5082  049E  0D2F               	rlf	??___ftadd+1,w
  5083  049F  0D30               	rlf	??___ftadd+2,w
  5084  04A0  00B1               	movwf	??___ftadd+3
  5085  04A1  0831               	movf	??___ftadd+3,w
  5086  04A2  00B3               	movwf	___ftadd@exp2
  5087  04A3  0834               	movf	___ftadd@exp1,w
  5088  04A4  1903               	btfsc	3,2
  5089  04A5  2CB2               	goto	l1650
  5090  04A6  0833               	movf	___ftadd@exp2,w
  5091  04A7  0234               	subwf	___ftadd@exp1,w
  5092  04A8  1803               	skipnc
  5093  04A9  2CB9               	goto	l1654
  5094  04AA  0334               	decf	___ftadd@exp1,w
  5095  04AB  3AFF               	xorlw	255
  5096  04AC  0733               	addwf	___ftadd@exp2,w
  5097  04AD  00AE               	movwf	??___ftadd
  5098  04AE  3019               	movlw	25
  5099  04AF  022E               	subwf	??___ftadd,w
  5100  04B0  1C03               	skipc
  5101  04B1  2CB9               	goto	l1654
  5102  04B2                     l1650:	
  5103  04B2  082B               	movf	___ftadd@f2,w
  5104  04B3  00A8               	movwf	?___ftadd
  5105  04B4  082C               	movf	___ftadd@f2+1,w
  5106  04B5  00A9               	movwf	?___ftadd+1
  5107  04B6  082D               	movf	___ftadd@f2+2,w
  5108  04B7  00AA               	movwf	?___ftadd+2
  5109  04B8  0008               	return
  5110  04B9                     l1654:	
  5111  04B9  0833               	movf	___ftadd@exp2,w
  5112  04BA  1903               	btfsc	3,2
  5113  04BB  0008               	return
  5114  04BC  0834               	movf	___ftadd@exp1,w
  5115  04BD  0233               	subwf	___ftadd@exp2,w
  5116  04BE  1803               	skipnc
  5117  04BF  2CC8               	goto	l1660
  5118  04C0  0333               	decf	___ftadd@exp2,w
  5119  04C1  3AFF               	xorlw	255
  5120  04C2  0734               	addwf	___ftadd@exp1,w
  5121  04C3  00AE               	movwf	??___ftadd
  5122  04C4  3019               	movlw	25
  5123  04C5  022E               	subwf	??___ftadd,w
  5124  04C6  1803               	btfsc	3,0
  5125  04C7  0008               	return
  5126  04C8                     l1660:	
  5127  04C8  3006               	movlw	6
  5128  04C9  00AE               	movwf	??___ftadd
  5129  04CA  082E               	movf	??___ftadd,w
  5130  04CB  00B2               	movwf	___ftadd@sign
  5131  04CC  1BAA               	btfsc	___ftadd@f1+2,7
  5132  04CD  17B2               	bsf	___ftadd@sign,7
  5133  04CE  1BAD               	btfsc	___ftadd@f2+2,7
  5134  04CF  1732               	bsf	___ftadd@sign,6
  5135  04D0  17A9               	bsf	___ftadd@f1+1,7
  5136  04D1  30FF               	movlw	255
  5137  04D2  05A8               	andwf	___ftadd@f1,f
  5138  04D3  30FF               	movlw	255
  5139  04D4  05A9               	andwf	___ftadd@f1+1,f
  5140  04D5  3000               	movlw	0
  5141  04D6  05AA               	andwf	___ftadd@f1+2,f
  5142  04D7  17AC               	bsf	___ftadd@f2+1,7
  5143  04D8  30FF               	movlw	255
  5144  04D9  05AB               	andwf	___ftadd@f2,f
  5145  04DA  30FF               	movlw	255
  5146  04DB  05AC               	andwf	___ftadd@f2+1,f
  5147  04DC  3000               	movlw	0
  5148  04DD  05AD               	andwf	___ftadd@f2+2,f
  5149  04DE  0833               	movf	___ftadd@exp2,w
  5150  04DF  0234               	subwf	___ftadd@exp1,w
  5151  04E0  1803               	skipnc
  5152  04E1  2D08               	goto	l1682
  5153  04E2                     l1672:	
  5154  04E2  3001               	movlw	1
  5155  04E3                     u1865:	
  5156  04E3  1003               	clrc
  5157  04E4  0DAB               	rlf	___ftadd@f2,f
  5158  04E5  0DAC               	rlf	___ftadd@f2+1,f
  5159  04E6  0DAD               	rlf	___ftadd@f2+2,f
  5160  04E7  3EFF               	addlw	-1
  5161  04E8  1D03               	skipz
  5162  04E9  2CE3               	goto	u1865
  5163  04EA  3001               	movlw	1
  5164  04EB  02B3               	subwf	___ftadd@exp2,f
  5165  04EC  0833               	movf	___ftadd@exp2,w
  5166  04ED  0634               	xorwf	___ftadd@exp1,w
  5167  04EE  1903               	skipnz
  5168  04EF  2D03               	goto	l1680
  5169  04F0  3001               	movlw	1
  5170  04F1  02B2               	subwf	___ftadd@sign,f
  5171  04F2  0832               	movf	___ftadd@sign,w
  5172  04F3  3907               	andlw	7
  5173  04F4  1903               	btfsc	3,2
  5174  04F5  2D03               	goto	l1680
  5175  04F6  2CE2               	goto	l1672
  5176  04F7                     l1678:	
  5177  04F7  3001               	movlw	1
  5178  04F8                     u1895:	
  5179  04F8  1003               	clrc
  5180  04F9  0CAA               	rrf	___ftadd@f1+2,f
  5181  04FA  0CA9               	rrf	___ftadd@f1+1,f
  5182  04FB  0CA8               	rrf	___ftadd@f1,f
  5183  04FC  3EFF               	addlw	-1
  5184  04FD  1D03               	skipz
  5185  04FE  2CF8               	goto	u1895
  5186  04FF  3001               	movlw	1
  5187  0500  00AE               	movwf	??___ftadd
  5188  0501  082E               	movf	??___ftadd,w
  5189  0502  07B4               	addwf	___ftadd@exp1,f
  5190  0503                     l1680:	
  5191  0503  0834               	movf	___ftadd@exp1,w
  5192  0504  0633               	xorwf	___ftadd@exp2,w
  5193  0505  1903               	btfsc	3,2
  5194  0506  2D31               	goto	l560
  5195  0507  2CF7               	goto	l1678
  5196  0508                     l1682:	
  5197  0508  0834               	movf	___ftadd@exp1,w
  5198  0509  0233               	subwf	___ftadd@exp2,w
  5199  050A  1803               	skipnc
  5200  050B  2D31               	goto	l560
  5201  050C                     l1684:	
  5202  050C  3001               	movlw	1
  5203  050D                     u1925:	
  5204  050D  1003               	clrc
  5205  050E  0DA8               	rlf	___ftadd@f1,f
  5206  050F  0DA9               	rlf	___ftadd@f1+1,f
  5207  0510  0DAA               	rlf	___ftadd@f1+2,f
  5208  0511  3EFF               	addlw	-1
  5209  0512  1D03               	skipz
  5210  0513  2D0D               	goto	u1925
  5211  0514  3001               	movlw	1
  5212  0515  02B4               	subwf	___ftadd@exp1,f
  5213  0516  0833               	movf	___ftadd@exp2,w
  5214  0517  0634               	xorwf	___ftadd@exp1,w
  5215  0518  1903               	skipnz
  5216  0519  2D2D               	goto	l1692
  5217  051A  3001               	movlw	1
  5218  051B  02B2               	subwf	___ftadd@sign,f
  5219  051C  0832               	movf	___ftadd@sign,w
  5220  051D  3907               	andlw	7
  5221  051E  1903               	btfsc	3,2
  5222  051F  2D2D               	goto	l1692
  5223  0520  2D0C               	goto	l1684
  5224  0521                     l1690:	
  5225  0521  3001               	movlw	1
  5226  0522                     u1955:	
  5227  0522  1003               	clrc
  5228  0523  0CAD               	rrf	___ftadd@f2+2,f
  5229  0524  0CAC               	rrf	___ftadd@f2+1,f
  5230  0525  0CAB               	rrf	___ftadd@f2,f
  5231  0526  3EFF               	addlw	-1
  5232  0527  1D03               	skipz
  5233  0528  2D22               	goto	u1955
  5234  0529  3001               	movlw	1
  5235  052A  00AE               	movwf	??___ftadd
  5236  052B  082E               	movf	??___ftadd,w
  5237  052C  07B3               	addwf	___ftadd@exp2,f
  5238  052D                     l1692:	
  5239  052D  0834               	movf	___ftadd@exp1,w
  5240  052E  0633               	xorwf	___ftadd@exp2,w
  5241  052F  1D03               	skipz
  5242  0530  2D21               	goto	l1690
  5243  0531                     l560:	
  5244  0531  1FB2               	btfss	___ftadd@sign,7
  5245  0532  2D43               	goto	l1696
  5246  0533  30FF               	movlw	255
  5247  0534  06A8               	xorwf	___ftadd@f1,f
  5248  0535  30FF               	movlw	255
  5249  0536  06A9               	xorwf	___ftadd@f1+1,f
  5250  0537  30FF               	movlw	255
  5251  0538  06AA               	xorwf	___ftadd@f1+2,f
  5252  0539  3001               	movlw	1
  5253  053A  07A8               	addwf	___ftadd@f1,f
  5254  053B  3000               	movlw	0
  5255  053C  1803               	skipnc
  5256  053D  3001               	movlw	1
  5257  053E  07A9               	addwf	___ftadd@f1+1,f
  5258  053F  3000               	movlw	0
  5259  0540  1803               	skipnc
  5260  0541  3001               	movlw	1
  5261  0542  07AA               	addwf	___ftadd@f1+2,f
  5262  0543                     l1696:	
  5263  0543  1F32               	btfss	___ftadd@sign,6
  5264  0544  2D55               	goto	l1700
  5265  0545  30FF               	movlw	255
  5266  0546  06AB               	xorwf	___ftadd@f2,f
  5267  0547  30FF               	movlw	255
  5268  0548  06AC               	xorwf	___ftadd@f2+1,f
  5269  0549  30FF               	movlw	255
  5270  054A  06AD               	xorwf	___ftadd@f2+2,f
  5271  054B  3001               	movlw	1
  5272  054C  07AB               	addwf	___ftadd@f2,f
  5273  054D  3000               	movlw	0
  5274  054E  1803               	skipnc
  5275  054F  3001               	movlw	1
  5276  0550  07AC               	addwf	___ftadd@f2+1,f
  5277  0551  3000               	movlw	0
  5278  0552  1803               	skipnc
  5279  0553  3001               	movlw	1
  5280  0554  07AD               	addwf	___ftadd@f2+2,f
  5281  0555                     l1700:	
  5282  0555  01B2               	clrf	___ftadd@sign
  5283  0556  0828               	movf	___ftadd@f1,w
  5284  0557  07AB               	addwf	___ftadd@f2,f
  5285  0558  0829               	movf	___ftadd@f1+1,w
  5286  0559  1103               	clrz
  5287  055A  1803               	skipnc
  5288  055B  0A29               	incf	___ftadd@f1+1,w
  5289  055C  1D03               	btfss	3,2
  5290  055D  07AC               	addwf	___ftadd@f2+1,f
  5291  055E  082A               	movf	___ftadd@f1+2,w
  5292  055F  1103               	clrz
  5293  0560  1803               	skipnc
  5294  0561  0A2A               	incf	___ftadd@f1+2,w
  5295  0562  1D03               	btfss	3,2
  5296  0563  07AD               	addwf	___ftadd@f2+2,f
  5297  0564  1FAD               	btfss	___ftadd@f2+2,7
  5298  0565  2D78               	goto	l1710
  5299  0566  30FF               	movlw	255
  5300  0567  06AB               	xorwf	___ftadd@f2,f
  5301  0568  30FF               	movlw	255
  5302  0569  06AC               	xorwf	___ftadd@f2+1,f
  5303  056A  30FF               	movlw	255
  5304  056B  06AD               	xorwf	___ftadd@f2+2,f
  5305  056C  3001               	movlw	1
  5306  056D  07AB               	addwf	___ftadd@f2,f
  5307  056E  3000               	movlw	0
  5308  056F  1803               	skipnc
  5309  0570  3001               	movlw	1
  5310  0571  07AC               	addwf	___ftadd@f2+1,f
  5311  0572  3000               	movlw	0
  5312  0573  1803               	skipnc
  5313  0574  3001               	movlw	1
  5314  0575  07AD               	addwf	___ftadd@f2+2,f
  5315  0576  01B2               	clrf	___ftadd@sign
  5316  0577  0AB2               	incf	___ftadd@sign,f
  5317  0578                     l1710:	
  5318  0578  082B               	movf	___ftadd@f2,w
  5319  0579  00A0               	movwf	___ftpack@arg
  5320  057A  082C               	movf	___ftadd@f2+1,w
  5321  057B  00A1               	movwf	___ftpack@arg+1
  5322  057C  082D               	movf	___ftadd@f2+2,w
  5323  057D  00A2               	movwf	___ftpack@arg+2
  5324  057E  0834               	movf	___ftadd@exp1,w
  5325  057F  00AE               	movwf	??___ftadd
  5326  0580  082E               	movf	??___ftadd,w
  5327  0581  00A3               	movwf	___ftpack@exp
  5328  0582  0832               	movf	___ftadd@sign,w
  5329  0583  00AF               	movwf	??___ftadd+1
  5330  0584  082F               	movf	??___ftadd+1,w
  5331  0585  00A4               	movwf	___ftpack@sign
  5332  0586  158A  2556         	fcall	___ftpack
  5333  0588  1283               	bcf	3,5	;RP0=0, select bank0
  5334  0589  1303               	bcf	3,6	;RP1=0, select bank0
  5335  058A  0820               	movf	?___ftpack,w
  5336  058B  00A8               	movwf	?___ftadd
  5337  058C  0821               	movf	?___ftpack+1,w
  5338  058D  00A9               	movwf	?___ftadd+1
  5339  058E  0822               	movf	?___ftpack+2,w
  5340  058F  00AA               	movwf	?___ftadd+2
  5341  0590  0008               	return
  5342  0591                     __end_of___ftadd:	
  5343                           
  5344                           	psect	text21
  5345  07D9                     __ptext21:	
  5346 ;; *************** function ___awtoft *****************
  5347 ;; Defined at:
  5348 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awtoft.c"
  5349 ;; Parameters:    Size  Location     Type
  5350 ;;  c               2    8[BANK0 ] int 
  5351 ;; Auto vars:     Size  Location     Type
  5352 ;;  sign            1   13[BANK0 ] unsigned char 
  5353 ;; Return value:  Size  Location     Type
  5354 ;;                  3    8[BANK0 ] float 
  5355 ;; Registers used:
  5356 ;;		wreg, status,2, status,0, pclath, cstack
  5357 ;; Tracked objects:
  5358 ;;		On entry : 0/0
  5359 ;;		On exit  : 0/0
  5360 ;;		Unchanged: 0/0
  5361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5362 ;;      Params:         0       3       0       0
  5363 ;;      Locals:         0       1       0       0
  5364 ;;      Temps:          0       2       0       0
  5365 ;;      Totals:         0       6       0       0
  5366 ;;Total ram usage:        6 bytes
  5367 ;; Hardware stack levels used:    1
  5368 ;; Hardware stack levels required when called:    3
  5369 ;; This function calls:
  5370 ;;		___ftpack
  5371 ;; This function is called by:
  5372 ;;		_ADC_PF
  5373 ;; This function uses a non-reentrant model
  5374 ;;
  5375                           
  5376                           
  5377                           ;psect for function ___awtoft
  5378  07D9                     ___awtoft:	
  5379                           
  5380                           ;incstack = 0
  5381                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  5382  07D9  1283               	bcf	3,5	;RP0=0, select bank0
  5383  07DA  1303               	bcf	3,6	;RP1=0, select bank0
  5384  07DB  01AD               	clrf	___awtoft@sign
  5385  07DC  1FA9               	btfss	___awtoft@c+1,7
  5386  07DD  2FE5               	goto	l1640
  5387  07DE  09A8               	comf	___awtoft@c,f
  5388  07DF  09A9               	comf	___awtoft@c+1,f
  5389  07E0  0AA8               	incf	___awtoft@c,f
  5390  07E1  1903               	skipnz
  5391  07E2  0AA9               	incf	___awtoft@c+1,f
  5392  07E3  01AD               	clrf	___awtoft@sign
  5393  07E4  0AAD               	incf	___awtoft@sign,f
  5394  07E5                     l1640:	
  5395  07E5  0828               	movf	___awtoft@c,w
  5396  07E6  00A0               	movwf	___ftpack@arg
  5397  07E7  0829               	movf	___awtoft@c+1,w
  5398  07E8  00A1               	movwf	___ftpack@arg+1
  5399  07E9  01A2               	clrf	___ftpack@arg+2
  5400  07EA  308E               	movlw	142
  5401  07EB  00AB               	movwf	??___awtoft
  5402  07EC  082B               	movf	??___awtoft,w
  5403  07ED  00A3               	movwf	___ftpack@exp
  5404  07EE  082D               	movf	___awtoft@sign,w
  5405  07EF  00AC               	movwf	??___awtoft+1
  5406  07F0  082C               	movf	??___awtoft+1,w
  5407  07F1  00A4               	movwf	___ftpack@sign
  5408  07F2  158A  2556         	fcall	___ftpack
  5409  07F4  1283               	bcf	3,5	;RP0=0, select bank0
  5410  07F5  1303               	bcf	3,6	;RP1=0, select bank0
  5411  07F6  0820               	movf	?___ftpack,w
  5412  07F7  00A8               	movwf	?___awtoft
  5413  07F8  0821               	movf	?___ftpack+1,w
  5414  07F9  00A9               	movwf	?___awtoft+1
  5415  07FA  0822               	movf	?___ftpack+2,w
  5416  07FB  00AA               	movwf	?___awtoft+2
  5417  07FC  0008               	return
  5418  07FD                     __end_of___awtoft:	
  5419                           
  5420                           	psect	text22
  5421  0D56                     __ptext22:	
  5422 ;; *************** function ___ftpack *****************
  5423 ;; Defined at:
  5424 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  5425 ;; Parameters:    Size  Location     Type
  5426 ;;  arg             3    0[BANK0 ] unsigned um
  5427 ;;  exp             1    3[BANK0 ] unsigned char 
  5428 ;;  sign            1    4[BANK0 ] unsigned char 
  5429 ;; Auto vars:     Size  Location     Type
  5430 ;;		None
  5431 ;; Return value:  Size  Location     Type
  5432 ;;                  3    0[BANK0 ] float 
  5433 ;; Registers used:
  5434 ;;		wreg, status,2, status,0
  5435 ;; Tracked objects:
  5436 ;;		On entry : 0/0
  5437 ;;		On exit  : 0/0
  5438 ;;		Unchanged: 0/0
  5439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5440 ;;      Params:         0       5       0       0
  5441 ;;      Locals:         0       0       0       0
  5442 ;;      Temps:          0       3       0       0
  5443 ;;      Totals:         0       8       0       0
  5444 ;;Total ram usage:        8 bytes
  5445 ;; Hardware stack levels used:    1
  5446 ;; Hardware stack levels required when called:    2
  5447 ;; This function calls:
  5448 ;;		Nothing
  5449 ;; This function is called by:
  5450 ;;		___awtoft
  5451 ;;		___ftadd
  5452 ;;		___ftdiv
  5453 ;;		___ftmul
  5454 ;;		___lwtoft
  5455 ;; This function uses a non-reentrant model
  5456 ;;
  5457                           
  5458                           
  5459                           ;psect for function ___ftpack
  5460  0D56                     ___ftpack:	
  5461                           
  5462                           ;incstack = 0
  5463                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  5464  0D56  1283               	bcf	3,5	;RP0=0, select bank0
  5465  0D57  1303               	bcf	3,6	;RP1=0, select bank0
  5466  0D58  0823               	movf	___ftpack@exp,w
  5467  0D59  1903               	btfsc	3,2
  5468  0D5A  2D60               	goto	l1506
  5469  0D5B  0822               	movf	___ftpack@arg+2,w
  5470  0D5C  0421               	iorwf	___ftpack@arg+1,w
  5471  0D5D  0420               	iorwf	___ftpack@arg,w
  5472  0D5E  1D03               	skipz
  5473  0D5F  2D73               	goto	l1512
  5474  0D60                     l1506:	
  5475  0D60  3000               	movlw	0
  5476  0D61  00A0               	movwf	?___ftpack
  5477  0D62  3000               	movlw	0
  5478  0D63  00A1               	movwf	?___ftpack+1
  5479  0D64  3000               	movlw	0
  5480  0D65  00A2               	movwf	?___ftpack+2
  5481  0D66  0008               	return
  5482  0D67                     l1510:	
  5483  0D67  3001               	movlw	1
  5484  0D68  00A5               	movwf	??___ftpack
  5485  0D69  0825               	movf	??___ftpack,w
  5486  0D6A  07A3               	addwf	___ftpack@exp,f
  5487  0D6B  3001               	movlw	1
  5488  0D6C                     u1455:	
  5489  0D6C  1003               	clrc
  5490  0D6D  0CA2               	rrf	___ftpack@arg+2,f
  5491  0D6E  0CA1               	rrf	___ftpack@arg+1,f
  5492  0D6F  0CA0               	rrf	___ftpack@arg,f
  5493  0D70  3EFF               	addlw	-1
  5494  0D71  1D03               	skipz
  5495  0D72  2D6C               	goto	u1455
  5496  0D73                     l1512:	
  5497  0D73  30FE               	movlw	254
  5498  0D74  0522               	andwf	___ftpack@arg+2,w
  5499  0D75  1903               	btfsc	3,2
  5500  0D76  2D8E               	goto	l529
  5501  0D77  2D67               	goto	l1510
  5502  0D78                     l1514:	
  5503  0D78  3001               	movlw	1
  5504  0D79  00A5               	movwf	??___ftpack
  5505  0D7A  0825               	movf	??___ftpack,w
  5506  0D7B  07A3               	addwf	___ftpack@exp,f
  5507  0D7C  3001               	movlw	1
  5508  0D7D  07A0               	addwf	___ftpack@arg,f
  5509  0D7E  3000               	movlw	0
  5510  0D7F  1803               	skipnc
  5511  0D80  3001               	movlw	1
  5512  0D81  07A1               	addwf	___ftpack@arg+1,f
  5513  0D82  3000               	movlw	0
  5514  0D83  1803               	skipnc
  5515  0D84  3001               	movlw	1
  5516  0D85  07A2               	addwf	___ftpack@arg+2,f
  5517  0D86  3001               	movlw	1
  5518  0D87                     u1475:	
  5519  0D87  1003               	clrc
  5520  0D88  0CA2               	rrf	___ftpack@arg+2,f
  5521  0D89  0CA1               	rrf	___ftpack@arg+1,f
  5522  0D8A  0CA0               	rrf	___ftpack@arg,f
  5523  0D8B  3EFF               	addlw	-1
  5524  0D8C  1D03               	skipz
  5525  0D8D  2D87               	goto	u1475
  5526  0D8E                     l529:	
  5527  0D8E  30FF               	movlw	255
  5528  0D8F  0522               	andwf	___ftpack@arg+2,w
  5529  0D90  1903               	btfsc	3,2
  5530  0D91  2D9D               	goto	l1522
  5531  0D92  2D78               	goto	l1514
  5532  0D93                     l1520:	
  5533  0D93  3001               	movlw	1
  5534  0D94  02A3               	subwf	___ftpack@exp,f
  5535  0D95  3001               	movlw	1
  5536  0D96                     u1495:	
  5537  0D96  1003               	clrc
  5538  0D97  0DA0               	rlf	___ftpack@arg,f
  5539  0D98  0DA1               	rlf	___ftpack@arg+1,f
  5540  0D99  0DA2               	rlf	___ftpack@arg+2,f
  5541  0D9A  3EFF               	addlw	-1
  5542  0D9B  1D03               	skipz
  5543  0D9C  2D96               	goto	u1495
  5544  0D9D                     l1522:	
  5545  0D9D  1BA1               	btfsc	___ftpack@arg+1,7
  5546  0D9E  2DA3               	goto	l536
  5547  0D9F  3002               	movlw	2
  5548  0DA0  0223               	subwf	___ftpack@exp,w
  5549  0DA1  1803               	skipnc
  5550  0DA2  2D93               	goto	l1520
  5551  0DA3                     l536:	
  5552  0DA3  1823               	btfsc	___ftpack@exp,0
  5553  0DA4  2DAB               	goto	l537
  5554  0DA5  30FF               	movlw	255
  5555  0DA6  05A0               	andwf	___ftpack@arg,f
  5556  0DA7  307F               	movlw	127
  5557  0DA8  05A1               	andwf	___ftpack@arg+1,f
  5558  0DA9  30FF               	movlw	255
  5559  0DAA  05A2               	andwf	___ftpack@arg+2,f
  5560  0DAB                     l537:	
  5561  0DAB  1003               	clrc
  5562  0DAC  0CA3               	rrf	___ftpack@exp,f
  5563  0DAD  0823               	movf	___ftpack@exp,w
  5564  0DAE  00A5               	movwf	??___ftpack
  5565  0DAF  01A6               	clrf	??___ftpack+1
  5566  0DB0  01A7               	clrf	??___ftpack+2
  5567  0DB1  3010               	movlw	16
  5568  0DB2                     u1535:	
  5569  0DB2  1003               	clrc
  5570  0DB3  0DA5               	rlf	??___ftpack,f
  5571  0DB4  0DA6               	rlf	??___ftpack+1,f
  5572  0DB5  0DA7               	rlf	??___ftpack+2,f
  5573  0DB6  3EFF               	addlw	-1
  5574  0DB7  1D03               	skipz
  5575  0DB8  2DB2               	goto	u1535
  5576  0DB9  0825               	movf	??___ftpack,w
  5577  0DBA  04A0               	iorwf	___ftpack@arg,f
  5578  0DBB  0826               	movf	??___ftpack+1,w
  5579  0DBC  04A1               	iorwf	___ftpack@arg+1,f
  5580  0DBD  0827               	movf	??___ftpack+2,w
  5581  0DBE  04A2               	iorwf	___ftpack@arg+2,f
  5582  0DBF  0824               	movf	___ftpack@sign,w
  5583  0DC0  1903               	btfsc	3,2
  5584  0DC1  0008               	return
  5585  0DC2  17A2               	bsf	___ftpack@arg+2,7
  5586  0DC3  0008               	return
  5587  0DC4                     __end_of___ftpack:	
  5588                           
  5589                           	psect	text23
  5590  0A01                     __ptext23:	
  5591 ;; *************** function _Init *****************
  5592 ;; Defined at:
  5593 ;;		line 69 in file "main.c"
  5594 ;; Parameters:    Size  Location     Type
  5595 ;;		None
  5596 ;; Auto vars:     Size  Location     Type
  5597 ;;		None
  5598 ;; Return value:  Size  Location     Type
  5599 ;;                  1    wreg      void 
  5600 ;; Registers used:
  5601 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5602 ;; Tracked objects:
  5603 ;;		On entry : 0/0
  5604 ;;		On exit  : 0/0
  5605 ;;		Unchanged: 0/0
  5606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5607 ;;      Params:         0       0       0       0
  5608 ;;      Locals:         0       0       0       0
  5609 ;;      Temps:          0       0       0       0
  5610 ;;      Totals:         0       0       0       0
  5611 ;;Total ram usage:        0 bytes
  5612 ;; Hardware stack levels used:    1
  5613 ;; Hardware stack levels required when called:    4
  5614 ;; This function calls:
  5615 ;;		_ADC_Init
  5616 ;;		_Init_Setup
  5617 ;;		_UART_Init
  5618 ;;		_UART_Write
  5619 ;; This function is called by:
  5620 ;;		_main
  5621 ;; This function uses a non-reentrant model
  5622 ;;
  5623                           
  5624                           
  5625                           ;psect for function _Init
  5626  0A01                     _Init:	
  5627                           
  5628                           ;main.c: 70: ADC_Init();
  5629                           
  5630                           ;incstack = 0
  5631                           ; Regs used in _Init: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5632  0A01  158A  2213  158A   	fcall	_ADC_Init
  5633                           
  5634                           ;main.c: 71: UART_Init();
  5635  0A04  158A  2241  158A   	fcall	_UART_Init
  5636                           
  5637                           ;main.c: 72: UART_Write("WELCOME MAAM");
  5638  0A07  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  5639  0A08  1283               	bcf	3,5	;RP0=0, select bank0
  5640  0A09  1303               	bcf	3,6	;RP1=0, select bank0
  5641  0A0A  00A1               	movwf	UART_Write@data
  5642  0A0B  3080               	movlw	128
  5643  0A0C  00A2               	movwf	UART_Write@data+1
  5644  0A0D  158A  22BF  158A   	fcall	_UART_Write
  5645                           
  5646                           ;main.c: 73: Init_Setup();
  5647  0A10  158A  2259         	fcall	_Init_Setup
  5648  0A12  0008               	return
  5649  0A13                     __end_of_Init:	
  5650                           
  5651                           	psect	text24
  5652  0ABF                     __ptext24:	
  5653 ;; *************** function _UART_Write *****************
  5654 ;; Defined at:
  5655 ;;		line 42 in file "uart.c"
  5656 ;; Parameters:    Size  Location     Type
  5657 ;;  data            2    1[BANK0 ] PTR const unsigned char 
  5658 ;;		 -> UART_Send@txt(8), STR_3(13), STR_2(13), STR_1(13), 
  5659 ;; Auto vars:     Size  Location     Type
  5660 ;;  i               1    4[BANK0 ] unsigned char 
  5661 ;; Return value:  Size  Location     Type
  5662 ;;                  1    wreg      void 
  5663 ;; Registers used:
  5664 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5665 ;; Tracked objects:
  5666 ;;		On entry : 0/0
  5667 ;;		On exit  : 0/0
  5668 ;;		Unchanged: 0/0
  5669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5670 ;;      Params:         0       2       0       0
  5671 ;;      Locals:         0       1       0       0
  5672 ;;      Temps:          0       1       0       0
  5673 ;;      Totals:         0       4       0       0
  5674 ;;Total ram usage:        4 bytes
  5675 ;; Hardware stack levels used:    1
  5676 ;; Hardware stack levels required when called:    3
  5677 ;; This function calls:
  5678 ;;		_UART_PutC
  5679 ;; This function is called by:
  5680 ;;		_main
  5681 ;;		_Init
  5682 ;;		_Measure
  5683 ;;		_UART_Send
  5684 ;; This function uses a non-reentrant model
  5685 ;;
  5686                           
  5687                           
  5688                           ;psect for function _UART_Write
  5689  0ABF                     _UART_Write:	
  5690                           
  5691                           ;uart.c: 43: uint8_t i = 0;
  5692                           
  5693                           ;incstack = 0
  5694                           ; Regs used in _UART_Write: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5695  0ABF  1283               	bcf	3,5	;RP0=0, select bank0
  5696  0AC0  1303               	bcf	3,6	;RP1=0, select bank0
  5697  0AC1  01A4               	clrf	UART_Write@i
  5698  0AC2                     l2246:	
  5699                           ;uart.c: 44: while (data[i] != '\0')
  5700                           
  5701  0AC2  0824               	movf	UART_Write@i,w
  5702  0AC3  0721               	addwf	UART_Write@data,w
  5703  0AC4  0084               	movwf	4
  5704  0AC5  0822               	movf	UART_Write@data+1,w
  5705  0AC6  1803               	skipnc
  5706  0AC7  0A22               	incf	UART_Write@data+1,w
  5707  0AC8  00FF               	movwf	127
  5708  0AC9  158A  2000  158A   	fcall	stringtab
  5709  0ACC  3A00               	xorlw	0
  5710  0ACD  1903               	btfsc	3,2
  5711  0ACE  2AE3               	goto	l2248
  5712                           
  5713                           ;uart.c: 45: UART_PutC (data[i++]);
  5714  0ACF  0824               	movf	UART_Write@i,w
  5715  0AD0  0721               	addwf	UART_Write@data,w
  5716  0AD1  0084               	movwf	4
  5717  0AD2  0822               	movf	UART_Write@data+1,w
  5718  0AD3  1803               	skipnc
  5719  0AD4  0A22               	incf	UART_Write@data+1,w
  5720  0AD5  00FF               	movwf	127
  5721  0AD6  158A  2000  158A   	fcall	stringtab
  5722  0AD9  158A  21C5  158A   	fcall	_UART_PutC
  5723  0ADC  3001               	movlw	1
  5724  0ADD  1283               	bcf	3,5	;RP0=0, select bank0
  5725  0ADE  1303               	bcf	3,6	;RP1=0, select bank0
  5726  0ADF  00A3               	movwf	??_UART_Write
  5727  0AE0  0823               	movf	??_UART_Write,w
  5728  0AE1  07A4               	addwf	UART_Write@i,f
  5729  0AE2  2AC2               	goto	l2246
  5730  0AE3                     l2248:	
  5731                           
  5732                           ;uart.c: 46: UART_PutC('\n');
  5733  0AE3  300A               	movlw	10
  5734  0AE4  158A  21C5  158A   	fcall	_UART_PutC
  5735                           
  5736                           ;uart.c: 47: UART_PutC('\r');
  5737  0AE7  300D               	movlw	13
  5738  0AE8  158A  21C5         	fcall	_UART_PutC
  5739  0AEA  0008               	return
  5740  0AEB                     __end_of_UART_Write:	
  5741                           
  5742                           	psect	text25
  5743  09C5                     __ptext25:	
  5744 ;; *************** function _UART_PutC *****************
  5745 ;; Defined at:
  5746 ;;		line 35 in file "uart.c"
  5747 ;; Parameters:    Size  Location     Type
  5748 ;;  data            1    wreg     const unsigned char 
  5749 ;; Auto vars:     Size  Location     Type
  5750 ;;  data            1    0[BANK0 ] const unsigned char 
  5751 ;; Return value:  Size  Location     Type
  5752 ;;                  1    wreg      void 
  5753 ;; Registers used:
  5754 ;;		wreg
  5755 ;; Tracked objects:
  5756 ;;		On entry : 0/0
  5757 ;;		On exit  : 0/0
  5758 ;;		Unchanged: 0/0
  5759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5760 ;;      Params:         0       0       0       0
  5761 ;;      Locals:         0       1       0       0
  5762 ;;      Temps:          0       0       0       0
  5763 ;;      Totals:         0       1       0       0
  5764 ;;Total ram usage:        1 bytes
  5765 ;; Hardware stack levels used:    1
  5766 ;; Hardware stack levels required when called:    2
  5767 ;; This function calls:
  5768 ;;		Nothing
  5769 ;; This function is called by:
  5770 ;;		_UART_Write
  5771 ;;		_UART_Send
  5772 ;; This function uses a non-reentrant model
  5773 ;;
  5774                           
  5775                           
  5776                           ;psect for function _UART_PutC
  5777  09C5                     _UART_PutC:	
  5778                           
  5779                           ;incstack = 0
  5780                           ; Regs used in _UART_PutC: [wreg]
  5781                           ;UART_PutC@data stored from wreg
  5782  09C5  1283               	bcf	3,5	;RP0=0, select bank0
  5783  09C6  1303               	bcf	3,6	;RP1=0, select bank0
  5784  09C7  00A0               	movwf	UART_PutC@data
  5785  09C8                     l263:	
  5786                           ;uart.c: 36: while(TXIF==0);
  5787                           
  5788  09C8  1C8C               	btfss	12,1	;volatile
  5789  09C9  29C8               	goto	l263
  5790                           
  5791                           ;uart.c: 37: TXIF=0;
  5792  09CA  108C               	bcf	12,1	;volatile
  5793                           
  5794                           ;uart.c: 38: TXREG = data;
  5795  09CB  0820               	movf	UART_PutC@data,w
  5796  09CC  0095               	movwf	21	;volatile
  5797  09CD  0008               	return
  5798  09CE                     __end_of_UART_PutC:	
  5799                           
  5800                           	psect	text26
  5801  0A41                     __ptext26:	
  5802 ;; *************** function _UART_Init *****************
  5803 ;; Defined at:
  5804 ;;		line 7 in file "uart.c"
  5805 ;; Parameters:    Size  Location     Type
  5806 ;;		None
  5807 ;; Auto vars:     Size  Location     Type
  5808 ;;		None
  5809 ;; Return value:  Size  Location     Type
  5810 ;;                  1    wreg      void 
  5811 ;; Registers used:
  5812 ;;		wreg
  5813 ;; Tracked objects:
  5814 ;;		On entry : 0/0
  5815 ;;		On exit  : 0/0
  5816 ;;		Unchanged: 0/0
  5817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5818 ;;      Params:         0       0       0       0
  5819 ;;      Locals:         0       0       0       0
  5820 ;;      Temps:          0       0       0       0
  5821 ;;      Totals:         0       0       0       0
  5822 ;;Total ram usage:        0 bytes
  5823 ;; Hardware stack levels used:    1
  5824 ;; Hardware stack levels required when called:    2
  5825 ;; This function calls:
  5826 ;;		Nothing
  5827 ;; This function is called by:
  5828 ;;		_Init
  5829 ;; This function uses a non-reentrant model
  5830 ;;
  5831                           
  5832                           
  5833                           ;psect for function _UART_Init
  5834  0A41                     _UART_Init:	
  5835                           
  5836                           ;uart.c: 8: TRISCbits.TRISC4 = 0; TRISCbits.TRISC5 = 1;
  5837                           
  5838                           ;incstack = 0
  5839                           ; Regs used in _UART_Init: [wreg]
  5840  0A41  1683               	bsf	3,5	;RP0=1, select bank1
  5841  0A42  1303               	bcf	3,6	;RP1=0, select bank1
  5842  0A43  1207               	bcf	7,4	;volatile
  5843  0A44  1687               	bsf	7,5	;volatile
  5844                           
  5845                           ;uart.c: 9: SPBRG = 51;
  5846  0A45  3033               	movlw	51
  5847  0A46  1283               	bcf	3,5	;RP0=0, select bank0
  5848  0A47  1303               	bcf	3,6	;RP1=0, select bank0
  5849  0A48  0093               	movwf	19	;volatile
  5850                           
  5851                           ;uart.c: 10: TXSTAbits.BRGH = 1;
  5852  0A49  1516               	bsf	22,2	;volatile
  5853                           
  5854                           ;uart.c: 12: TXSTAbits.SYNC = 0;
  5855  0A4A  1216               	bcf	22,4	;volatile
  5856                           
  5857                           ;uart.c: 13: RCSTAbits.SPEN = 1;
  5858  0A4B  1797               	bsf	23,7	;volatile
  5859                           
  5860                           ;uart.c: 14: TXSTAbits.TXEN = 1;
  5861  0A4C  1696               	bsf	22,5	;volatile
  5862                           
  5863                           ;uart.c: 15: RCSTAbits.CREN = 1;
  5864  0A4D  1617               	bsf	23,4	;volatile
  5865                           
  5866                           ;uart.c: 16: TXSTAbits.TX9 = 0;
  5867  0A4E  1316               	bcf	22,6	;volatile
  5868                           
  5869                           ;uart.c: 17: RCSTAbits.RX9 = 0;
  5870  0A4F  1317               	bcf	23,6	;volatile
  5871                           
  5872                           ;uart.c: 19: PIE1bits.RCIE = 1;
  5873  0A50  1683               	bsf	3,5	;RP0=1, select bank1
  5874  0A51  1303               	bcf	3,6	;RP1=0, select bank1
  5875  0A52  168C               	bsf	12,5	;volatile
  5876                           
  5877                           ;uart.c: 20: PIR1bits.RCIF = 0;
  5878  0A53  1283               	bcf	3,5	;RP0=0, select bank0
  5879  0A54  1303               	bcf	3,6	;RP1=0, select bank0
  5880  0A55  128C               	bcf	12,5	;volatile
  5881                           
  5882                           ;uart.c: 21: INTCONbits.GIE = 1;
  5883  0A56  178B               	bsf	11,7	;volatile
  5884                           
  5885                           ;uart.c: 22: INTCONbits.PEIE = 1;
  5886  0A57  170B               	bsf	11,6	;volatile
  5887  0A58  0008               	return
  5888  0A59                     __end_of_UART_Init:	
  5889                           
  5890                           	psect	text27
  5891  0A59                     __ptext27:	
  5892 ;; *************** function _Init_Setup *****************
  5893 ;; Defined at:
  5894 ;;		line 7 in file "setup.c"
  5895 ;; Parameters:    Size  Location     Type
  5896 ;;		None
  5897 ;; Auto vars:     Size  Location     Type
  5898 ;;		None
  5899 ;; Return value:  Size  Location     Type
  5900 ;;                  1    wreg      void 
  5901 ;; Registers used:
  5902 ;;		wreg
  5903 ;; Tracked objects:
  5904 ;;		On entry : 0/0
  5905 ;;		On exit  : 0/0
  5906 ;;		Unchanged: 0/0
  5907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5908 ;;      Params:         0       0       0       0
  5909 ;;      Locals:         0       0       0       0
  5910 ;;      Temps:          0       0       0       0
  5911 ;;      Totals:         0       0       0       0
  5912 ;;Total ram usage:        0 bytes
  5913 ;; Hardware stack levels used:    1
  5914 ;; Hardware stack levels required when called:    2
  5915 ;; This function calls:
  5916 ;;		Nothing
  5917 ;; This function is called by:
  5918 ;;		_Init
  5919 ;; This function uses a non-reentrant model
  5920 ;;
  5921                           
  5922                           
  5923                           ;psect for function _Init_Setup
  5924  0A59                     _Init_Setup:	
  5925                           
  5926                           ;setup.c: 13: TRISA = 0x07;
  5927                           
  5928                           ;incstack = 0
  5929                           ; Regs used in _Init_Setup: [wreg]
  5930  0A59  3007               	movlw	7
  5931  0A5A  1683               	bsf	3,5	;RP0=1, select bank1
  5932  0A5B  1303               	bcf	3,6	;RP1=0, select bank1
  5933  0A5C  0085               	movwf	5	;volatile
  5934                           
  5935                           ;setup.c: 14: TRISC = 0x23;
  5936  0A5D  3023               	movlw	35
  5937  0A5E  0087               	movwf	7	;volatile
  5938                           
  5939                           ;setup.c: 17: OPTION_REGbits.T0CS = 0;
  5940  0A5F  1281               	bcf	1,5	;volatile
  5941                           
  5942                           ;setup.c: 18: OPTION_REGbits.PSA = 0;
  5943  0A60  1181               	bcf	1,3	;volatile
  5944                           
  5945                           ;setup.c: 19: OPTION_REGbits.PS0 = 0;
  5946  0A61  1001               	bcf	1,0	;volatile
  5947                           
  5948                           ;setup.c: 20: OPTION_REGbits.PS1 = 1;
  5949  0A62  1481               	bsf	1,1	;volatile
  5950                           
  5951                           ;setup.c: 21: OPTION_REGbits.PS2 = 0;
  5952  0A63  1101               	bcf	1,2	;volatile
  5953                           
  5954                           ;setup.c: 22: INTCONbits.T0IE = 1;
  5955  0A64  168B               	bsf	11,5	;volatile
  5956                           
  5957                           ;setup.c: 23: TMR0 = 6;
  5958  0A65  3006               	movlw	6
  5959  0A66  1283               	bcf	3,5	;RP0=0, select bank0
  5960  0A67  1303               	bcf	3,6	;RP1=0, select bank0
  5961  0A68  0081               	movwf	1	;volatile
  5962                           
  5963                           ;setup.c: 26: T1CONbits.TMR1CS = 0;
  5964  0A69  1090               	bcf	16,1	;volatile
  5965                           
  5966                           ;setup.c: 27: T1CONbits.T1CKPS0 = 0;
  5967  0A6A  1210               	bcf	16,4	;volatile
  5968                           
  5969                           ;setup.c: 28: T1CONbits.T1CKPS1 = 1;
  5970  0A6B  1690               	bsf	16,5	;volatile
  5971                           
  5972                           ;setup.c: 29: T1CONbits.TMR1ON = 0;
  5973  0A6C  1010               	bcf	16,0	;volatile
  5974                           
  5975                           ;setup.c: 33: OPTION_REGbits.INTEDG = 1;
  5976  0A6D  1683               	bsf	3,5	;RP0=1, select bank1
  5977  0A6E  1303               	bcf	3,6	;RP1=0, select bank1
  5978  0A6F  1701               	bsf	1,6	;volatile
  5979                           
  5980                           ;setup.c: 34: OPTION_REGbits.nRAPU = 0;
  5981  0A70  1381               	bcf	1,7	;volatile
  5982                           
  5983                           ;setup.c: 35: INTCONbits.INTE = 1;
  5984  0A71  160B               	bsf	11,4	;volatile
  5985                           
  5986                           ;setup.c: 36: INTCONbits.GIE = 1;
  5987  0A72  178B               	bsf	11,7	;volatile
  5988                           
  5989                           ;setup.c: 37: INTCONbits.PEIE = 1;
  5990  0A73  170B               	bsf	11,6	;volatile
  5991                           
  5992                           ;setup.c: 40: PORTC = 0x04;
  5993  0A74  3004               	movlw	4
  5994  0A75  1283               	bcf	3,5	;RP0=0, select bank0
  5995  0A76  1303               	bcf	3,6	;RP1=0, select bank0
  5996  0A77  0087               	movwf	7	;volatile
  5997  0A78  0008               	return
  5998  0A79                     __end_of_Init_Setup:	
  5999                           
  6000                           	psect	text28
  6001  0A13                     __ptext28:	
  6002 ;; *************** function _ADC_Init *****************
  6003 ;; Defined at:
  6004 ;;		line 7 in file "adc.c"
  6005 ;; Parameters:    Size  Location     Type
  6006 ;;		None
  6007 ;; Auto vars:     Size  Location     Type
  6008 ;;		None
  6009 ;; Return value:  Size  Location     Type
  6010 ;;                  1    wreg      void 
  6011 ;; Registers used:
  6012 ;;		wreg, status,2
  6013 ;; Tracked objects:
  6014 ;;		On entry : 0/0
  6015 ;;		On exit  : 0/0
  6016 ;;		Unchanged: 0/0
  6017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6018 ;;      Params:         0       0       0       0
  6019 ;;      Locals:         0       0       0       0
  6020 ;;      Temps:          0       0       0       0
  6021 ;;      Totals:         0       0       0       0
  6022 ;;Total ram usage:        0 bytes
  6023 ;; Hardware stack levels used:    1
  6024 ;; Hardware stack levels required when called:    2
  6025 ;; This function calls:
  6026 ;;		Nothing
  6027 ;; This function is called by:
  6028 ;;		_Init
  6029 ;; This function uses a non-reentrant model
  6030 ;;
  6031                           
  6032                           
  6033                           ;psect for function _ADC_Init
  6034  0A13                     _ADC_Init:	
  6035                           
  6036                           ;adc.c: 8: CMCON0 = 0x07 ;
  6037                           
  6038                           ;incstack = 0
  6039                           ; Regs used in _ADC_Init: [wreg+status,2]
  6040  0A13  3007               	movlw	7
  6041  0A14  1283               	bcf	3,5	;RP0=0, select bank0
  6042  0A15  1303               	bcf	3,6	;RP1=0, select bank0
  6043  0A16  0099               	movwf	25	;volatile
  6044                           
  6045                           ;adc.c: 9: ANSEL = 0x03;
  6046  0A17  3003               	movlw	3
  6047  0A18  1683               	bsf	3,5	;RP0=1, select bank1
  6048  0A19  1303               	bcf	3,6	;RP1=0, select bank1
  6049  0A1A  0091               	movwf	17	;volatile
  6050                           
  6051                           ;adc.c: 10: ADCON0 = 0x81;
  6052  0A1B  3081               	movlw	129
  6053  0A1C  1283               	bcf	3,5	;RP0=0, select bank0
  6054  0A1D  1303               	bcf	3,6	;RP1=0, select bank0
  6055  0A1E  009F               	movwf	31	;volatile
  6056                           
  6057                           ;adc.c: 11: ADCON1 = 0x50;
  6058  0A1F  3050               	movlw	80
  6059  0A20  1683               	bsf	3,5	;RP0=1, select bank1
  6060  0A21  1303               	bcf	3,6	;RP1=0, select bank1
  6061  0A22  009F               	movwf	31	;volatile
  6062                           
  6063                           ;adc.c: 12: ADRESH = 0;
  6064  0A23  1283               	bcf	3,5	;RP0=0, select bank0
  6065  0A24  1303               	bcf	3,6	;RP1=0, select bank0
  6066  0A25  019E               	clrf	30	;volatile
  6067                           
  6068                           ;adc.c: 13: ADRESL = 0;
  6069  0A26  1683               	bsf	3,5	;RP0=1, select bank1
  6070  0A27  1303               	bcf	3,6	;RP1=0, select bank1
  6071  0A28  019E               	clrf	30	;volatile
  6072  0A29  0008               	return
  6073  0A2A                     __end_of_ADC_Init:	
  6074                           
  6075                           	psect	text29
  6076  0A79                     __ptext29:	
  6077 ;; *************** function _Button_Press *****************
  6078 ;; Defined at:
  6079 ;;		line 52 in file "setup.c"
  6080 ;; Parameters:    Size  Location     Type
  6081 ;;		None
  6082 ;; Auto vars:     Size  Location     Type
  6083 ;;  input           1    2[BANK0 ] unsigned char 
  6084 ;; Return value:  Size  Location     Type
  6085 ;;                  1    wreg      unsigned char 
  6086 ;; Registers used:
  6087 ;;		wreg, status,2, status,0
  6088 ;; Tracked objects:
  6089 ;;		On entry : 0/0
  6090 ;;		On exit  : 0/0
  6091 ;;		Unchanged: 0/0
  6092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6093 ;;      Params:         0       0       0       0
  6094 ;;      Locals:         0       1       0       0
  6095 ;;      Temps:          0       2       0       0
  6096 ;;      Totals:         0       3       0       0
  6097 ;;Total ram usage:        3 bytes
  6098 ;; Hardware stack levels used:    1
  6099 ;; Hardware stack levels required when called:    2
  6100 ;; This function calls:
  6101 ;;		Nothing
  6102 ;; This function is called by:
  6103 ;;		_main
  6104 ;; This function uses a non-reentrant model
  6105 ;;
  6106                           
  6107                           
  6108                           ;psect for function _Button_Press
  6109  0A79                     _Button_Press:	
  6110                           
  6111                           ;setup.c: 53: static uint8_t switch_state = 0;
  6112                           ;setup.c: 54: uint8_t input = (PORTC & 0x02);
  6113                           
  6114                           ;incstack = 0
  6115                           ; Regs used in _Button_Press: [wreg+status,2+status,0]
  6116  0A79  1283               	bcf	3,5	;RP0=0, select bank0
  6117  0A7A  1303               	bcf	3,6	;RP1=0, select bank0
  6118  0A7B  0807               	movf	7,w	;volatile
  6119  0A7C  3902               	andlw	2
  6120  0A7D  00A0               	movwf	??_Button_Press
  6121  0A7E  0820               	movf	??_Button_Press,w
  6122  0A7F  00A2               	movwf	Button_Press@input
  6123                           
  6124                           ;setup.c: 55: if((switch_state==0)&&(input)){
  6125  0A80  0877               	movf	Button_Press@switch_state,w
  6126  0A81  1D03               	btfss	3,2
  6127  0A82  2A95               	goto	l2132
  6128  0A83  0822               	movf	Button_Press@input,w
  6129  0A84  1903               	btfsc	3,2
  6130  0A85  2A95               	goto	l2132
  6131                           
  6132                           ;setup.c: 56: _delay((unsigned long)((5)*(8000000/4000.0)));
  6133  0A86  300D               	movlw	13
  6134  0A87  1283               	bcf	3,5	;RP0=0, select bank0
  6135  0A88  1303               	bcf	3,6	;RP1=0, select bank0
  6136  0A89  00A1               	movwf	??_Button_Press+1
  6137  0A8A  30FB               	movlw	251
  6138  0A8B  00A0               	movwf	??_Button_Press
  6139  0A8C                     u3127:	
  6140  0A8C  0BA0               	decfsz	??_Button_Press,f
  6141  0A8D  2A8C               	goto	u3127
  6142  0A8E  0BA1               	decfsz	??_Button_Press+1,f
  6143  0A8F  2A8C               	goto	u3127
  6144  0A90  0000               	nop
  6145                           
  6146                           ;setup.c: 57: switch_state = 1;
  6147  0A91  01F7               	clrf	Button_Press@switch_state
  6148  0A92  0AF7               	incf	Button_Press@switch_state,f
  6149                           
  6150                           ;setup.c: 58: return 'T';
  6151  0A93  3054               	movlw	84
  6152  0A94  0008               	return
  6153  0A95                     l2132:	
  6154                           
  6155                           ;setup.c: 59: }
  6156                           ;setup.c: 60: if(input == 0)
  6157  0A95  1283               	bcf	3,5	;RP0=0, select bank0
  6158  0A96  1303               	bcf	3,6	;RP1=0, select bank0
  6159  0A97  0822               	movf	Button_Press@input,w
  6160  0A98  1903               	btfsc	3,2
  6161                           
  6162                           ;setup.c: 61: switch_state = 0;
  6163  0A99  01F7               	clrf	Button_Press@switch_state
  6164                           
  6165                           ;setup.c: 62: return 0;
  6166  0A9A  3000               	movlw	0
  6167  0A9B  0008               	return
  6168  0A9C                     __end_of_Button_Press:	
  6169                           
  6170                           	psect	text30
  6171  0C40                     __ptext30:	
  6172 ;; *************** function _ISR *****************
  6173 ;; Defined at:
  6174 ;;		line 41 in file "main.c"
  6175 ;; Parameters:    Size  Location     Type
  6176 ;;		None
  6177 ;; Auto vars:     Size  Location     Type
  6178 ;;		None
  6179 ;; Return value:  Size  Location     Type
  6180 ;;                  1    wreg      void 
  6181 ;; Registers used:
  6182 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6183 ;; Tracked objects:
  6184 ;;		On entry : 0/0
  6185 ;;		On exit  : 0/0
  6186 ;;		Unchanged: 0/0
  6187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6188 ;;      Params:         0       0       0       0
  6189 ;;      Locals:         0       0       0       0
  6190 ;;      Temps:          7       0       0       0
  6191 ;;      Totals:         7       0       0       0
  6192 ;;Total ram usage:        7 bytes
  6193 ;; Hardware stack levels used:    1
  6194 ;; Hardware stack levels required when called:    1
  6195 ;; This function calls:
  6196 ;;		_UART_GetC
  6197 ;; This function is called by:
  6198 ;;		Interrupt level 1
  6199 ;; This function uses a non-reentrant model
  6200 ;;
  6201                           
  6202                           
  6203                           ;psect for function _ISR
  6204  0C40                     _ISR:	
  6205                           
  6206                           ;main.c: 42: if(INTCONbits.INTF){
  6207  0C40  1C8B               	btfss	11,1	;volatile
  6208  0C41  2C4B               	goto	i1l2212
  6209                           
  6210                           ;main.c: 43: PF_FLAG = 1;
  6211  0C42  1683               	bsf	3,5	;RP0=1, select bank1
  6212  0C43  1303               	bcf	3,6	;RP1=0, select bank1
  6213  0C44  01AC               	clrf	_PF_FLAG^(0+128)
  6214  0C45  0AAC               	incf	_PF_FLAG^(0+128),f
  6215                           
  6216                           ;main.c: 44: ++ZERO_CROSS;
  6217  0C46  3001               	movlw	1
  6218  0C47  00F0               	movwf	??_ISR
  6219  0C48  0870               	movf	??_ISR,w
  6220  0C49  07AA               	addwf	_ZERO_CROSS^(0+128),f
  6221                           
  6222                           ;main.c: 45: INTCONbits.INTF = 0;
  6223  0C4A  108B               	bcf	11,1	;volatile
  6224  0C4B                     i1l2212:	
  6225                           
  6226                           ;main.c: 46: }
  6227                           ;main.c: 47: if(INTCONbits.T0IF){
  6228  0C4B  1D0B               	btfss	11,2	;volatile
  6229  0C4C  2C7E               	goto	i1l2230
  6230                           
  6231                           ;main.c: 48: TMR0 = 6;
  6232  0C4D  3006               	movlw	6
  6233  0C4E  1283               	bcf	3,5	;RP0=0, select bank0
  6234  0C4F  0081               	movwf	1	;volatile
  6235                           
  6236                           ;main.c: 49: if((++TIME_MS)>=1000){
  6237  0C50  3001               	movlw	1
  6238  0C51  1683               	bsf	3,5	;RP0=1, select bank1
  6239  0C52  1303               	bcf	3,6	;RP1=0, select bank1
  6240  0C53  07A0               	addwf	_TIME_MS^(0+128),f
  6241  0C54  1803               	skipnc
  6242  0C55  0AA1               	incf	(_TIME_MS+1)^(0+128),f
  6243  0C56  3000               	movlw	0
  6244  0C57  07A1               	addwf	(_TIME_MS+1)^(0+128),f
  6245  0C58  3003               	movlw	3
  6246  0C59  0221               	subwf	(_TIME_MS+1)^(0+128),w
  6247  0C5A  30E8               	movlw	232
  6248  0C5B  1903               	skipnz
  6249  0C5C  0220               	subwf	_TIME_MS^(0+128),w
  6250  0C5D  1C03               	skipc
  6251  0C5E  2C7D               	goto	i1l2228
  6252                           
  6253                           ;main.c: 50: TIME_MS = 0;
  6254  0C5F  01A0               	clrf	_TIME_MS^(0+128)
  6255  0C60  01A1               	clrf	(_TIME_MS+1)^(0+128)
  6256                           
  6257                           ;main.c: 51: if((++TIME_S)>60){
  6258  0C61  3001               	movlw	1
  6259  0C62  00F0               	movwf	??_ISR
  6260  0C63  0870               	movf	??_ISR,w
  6261  0C64  07F9               	addwf	_TIME_S,f
  6262  0C65  303D               	movlw	61
  6263  0C66  0279               	subwf	_TIME_S,w
  6264  0C67  1803               	btfsc	3,0
  6265                           
  6266                           ;main.c: 52: TIME_S = 0;
  6267  0C68  01F9               	clrf	_TIME_S
  6268                           
  6269                           ;main.c: 53: }
  6270                           ;main.c: 54: CHAR_STATE = 'S';
  6271  0C69  3053               	movlw	83
  6272  0C6A  00F0               	movwf	??_ISR
  6273  0C6B  0870               	movf	??_ISR,w
  6274  0C6C  00A9               	movwf	_CHAR_STATE^(0+128)
  6275                           
  6276                           ;main.c: 55: FREQUENCY_ARRAY[TIME_S%4] = ZERO_CROSS;
  6277  0C6D  082A               	movf	_ZERO_CROSS^(0+128),w
  6278  0C6E  00F0               	movwf	??_ISR
  6279  0C6F  01F1               	clrf	??_ISR+1
  6280  0C70  0879               	movf	_TIME_S,w
  6281  0C71  3903               	andlw	3
  6282  0C72  00F2               	movwf	??_ISR+2
  6283  0C73  0772               	addwf	??_ISR+2,w
  6284  0C74  3EAD               	addlw	(low (_FREQUENCY_ARRAY| 0))& (0+255)
  6285  0C75  0084               	movwf	4
  6286  0C76  0870               	movf	??_ISR,w
  6287  0C77  1383               	bcf	3,7	;select IRP bank1
  6288  0C78  0080               	movwf	0
  6289  0C79  0A84               	incf	4,f
  6290  0C7A  0871               	movf	??_ISR+1,w
  6291  0C7B  0080               	movwf	0
  6292                           
  6293                           ;main.c: 56: ZERO_CROSS = 0;
  6294  0C7C  01AA               	clrf	_ZERO_CROSS^(0+128)
  6295  0C7D                     i1l2228:	
  6296                           
  6297                           ;main.c: 57: }
  6298                           ;main.c: 58: INTCONbits.T0IF = 0;
  6299  0C7D  110B               	bcf	11,2	;volatile
  6300  0C7E                     i1l2230:	
  6301                           
  6302                           ;main.c: 59: }
  6303                           ;main.c: 60: if(PIR1bits.RCIF){
  6304  0C7E  1283               	bcf	3,5	;RP0=0, select bank0
  6305  0C7F  1E8C               	btfss	12,5	;volatile
  6306  0C80  2C8C               	goto	i1l173
  6307                           
  6308                           ;main.c: 61: CHAR_STATE = UART_GetC();
  6309  0C81  158A  21B5  158A   	fcall	_UART_GetC
  6310  0C84  00F0               	movwf	??_ISR
  6311  0C85  0870               	movf	??_ISR,w
  6312  0C86  1683               	bsf	3,5	;RP0=1, select bank1
  6313  0C87  1303               	bcf	3,6	;RP1=0, select bank1
  6314  0C88  00A9               	movwf	_CHAR_STATE^(0+128)
  6315                           
  6316                           ;main.c: 62: PIR1bits.RCIF = 0;
  6317  0C89  1283               	bcf	3,5	;RP0=0, select bank0
  6318  0C8A  1303               	bcf	3,6	;RP1=0, select bank0
  6319  0C8B  128C               	bcf	12,5	;volatile
  6320  0C8C                     i1l173:	
  6321  0C8C  0876               	movf	??_ISR+6,w
  6322  0C8D  00FF               	movwf	127
  6323  0C8E  0875               	movf	??_ISR+5,w
  6324  0C8F  008A               	movwf	10
  6325  0C90  0874               	movf	??_ISR+4,w
  6326  0C91  0084               	movwf	4
  6327  0C92  0E73               	swapf	(??_ISR+3)^(0+-128),w
  6328  0C93  0083               	movwf	3
  6329  0C94  0EFE               	swapf	126,f
  6330  0C95  0E7E               	swapf	126,w
  6331  0C96  0009               	retfie
  6332  0C97                     __end_of_ISR:	
  6333                           
  6334                           	psect	intentry
  6335  0004                     __pintentry:	
  6336                           ;incstack = 0
  6337                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6338                           
  6339  0004                     interrupt_function:	
  6340  007E                     saved_w	set	btemp
  6341  0004  00FE               	movwf	btemp
  6342  0005  0E03               	swapf	3,w
  6343  0006  00F3               	movwf	??_ISR+3
  6344  0007  0804               	movf	4,w
  6345  0008  00F4               	movwf	??_ISR+4
  6346  0009  080A               	movf	10,w
  6347  000A  00F5               	movwf	??_ISR+5
  6348  000B  1283               	bcf	3,5	;RP0=0, select bank0
  6349  000C  1303               	bcf	3,6	;RP1=0, select bank0
  6350  000D  087F               	movf	btemp+1,w
  6351  000E  00F6               	movwf	??_ISR+6
  6352  000F  158A  2C40         	ljmp	_ISR
  6353                           
  6354                           	psect	text31
  6355  09B5                     __ptext31:	
  6356 ;; *************** function _UART_GetC *****************
  6357 ;; Defined at:
  6358 ;;		line 26 in file "uart.c"
  6359 ;; Parameters:    Size  Location     Type
  6360 ;;		None
  6361 ;; Auto vars:     Size  Location     Type
  6362 ;;		None
  6363 ;; Return value:  Size  Location     Type
  6364 ;;                  1    wreg      unsigned char 
  6365 ;; Registers used:
  6366 ;;		wreg
  6367 ;; Tracked objects:
  6368 ;;		On entry : 0/0
  6369 ;;		On exit  : 0/0
  6370 ;;		Unchanged: 0/0
  6371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6372 ;;      Params:         0       0       0       0
  6373 ;;      Locals:         0       0       0       0
  6374 ;;      Temps:          0       0       0       0
  6375 ;;      Totals:         0       0       0       0
  6376 ;;Total ram usage:        0 bytes
  6377 ;; Hardware stack levels used:    1
  6378 ;; This function calls:
  6379 ;;		Nothing
  6380 ;; This function is called by:
  6381 ;;		_ISR
  6382 ;; This function uses a non-reentrant model
  6383 ;;
  6384                           
  6385                           
  6386                           ;psect for function _UART_GetC
  6387  09B5                     _UART_GetC:	
  6388                           
  6389                           ;uart.c: 27: if (OERR) {
  6390                           
  6391                           ;incstack = 0
  6392                           ; Regs used in _UART_GetC: [wreg]
  6393  09B5  1283               	bcf	3,5	;RP0=0, select bank0
  6394  09B6  1303               	bcf	3,6	;RP1=0, select bank0
  6395  09B7  1C97               	btfss	23,1	;volatile
  6396  09B8  29BB               	goto	i1l2188
  6397                           
  6398                           ;uart.c: 28: CREN = 0;
  6399  09B9  1217               	bcf	23,4	;volatile
  6400                           
  6401                           ;uart.c: 29: CREN = 1;
  6402  09BA  1617               	bsf	23,4	;volatile
  6403  09BB                     i1l2188:	
  6404                           
  6405                           ;uart.c: 30: }
  6406                           ;uart.c: 31: return RCREG;
  6407  09BB  0814               	movf	20,w	;volatile
  6408  09BC  0008               	return
  6409  09BD                     __end_of_UART_GetC:	
  6410  007E                     btemp	set	126	;btemp
  6411  007E                     wtemp0	set	126


Data Sizes:
    Strings     13
    Constant    0
    Data        10
    BSS         48
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      10
    BANK0            80     80      80
    BANK1            80     20      75
    BANK2            80      0       0

Pointer List with Targets:

    floatTostr@txt	PTR unsigned char  size(1) Largest target is 8
		 -> UART_Send@txt(BANK0[8]), 

    UART_Write@data	PTR const unsigned char  size(2) Largest target is 13
		 -> UART_Send@txt(BANK0[8]), STR_3(CODE[13]), STR_2(CODE[13]), STR_1(CODE[13]), 

    AVG@ARRAY	PTR unsigned int  size(1) Largest target is 8
		 -> POWER_FACTOR_ARRAY(BANK1[8]), CURRENT_ARRAY(BANK1[8]), VOLT_ARRAY(BANK1[8]), FREQUENCY_ARRAY(BANK1[8]), 

    ADC_PF@ARRAY	PTR unsigned int  size(1) Largest target is 8
		 -> POWER_FACTOR_ARRAY(BANK1[8]), 

    ADC_RMS@ARRAY	PTR unsigned int  size(1) Largest target is 8
		 -> CURRENT_ARRAY(BANK1[8]), VOLT_ARRAY(BANK1[8]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Measure
    _Send->_UART_Send
    _UART_Send->_floatTostr
    _floatTostr->___lwmod
    ___lwmod->___lwdiv
    _Measure->_ADC_RMS
    _AVG->___lldiv
    _ADC_RMS->___fttol
    _ADC_PF->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftdiv
    ___ftmul->___awtoft
    ___ftdiv->___ftmul
    ___ftadd->___ftpack
    ___awtoft->___ftpack
    _Init->_UART_Write
    _UART_Write->_UART_PutC

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Measure
    _Measure->_ADC_PF

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   31110
                                             79 BANK0      1     1      0
                       _Button_Press
                               _Init
                            _Measure
                               _Send
                         _UART_Write
                            ___lwmod
 ---------------------------------------------------------------------------------
 (1) _Send                                                 5     5      0    3375
                                             33 BANK0      4     4      0
                       _Toggle_Relay
                          _UART_Send
 ---------------------------------------------------------------------------------
 (2) _UART_Send                                           15    12      3    3375
                                             18 BANK0     15    12      3
                          _UART_PutC
                         _UART_Write
                         _floatTostr
 ---------------------------------------------------------------------------------
 (3) _floatTostr                                           4     1      3    1835
                                             14 BANK0      4     1      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              6     2      4     795
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _Toggle_Relay                                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Measure                                              5     5      0   26053
                                             78 BANK0      1     1      0
                                             16 BANK1      4     4      0
                             _ADC_PF
                            _ADC_RMS
                                _AVG
                         _UART_Write
 ---------------------------------------------------------------------------------
 (2) _AVG                                                 17    15      2     814
                                             14 BANK0     17    15      2
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     268
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _ADC_RMS                                             18    14      4    8766
                                             60 BANK0     18    14      4
                           _ADC_Read
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) _ADC_Read                                             5     3      2      44
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _ADC_PF                                              27    26      1   16015
                                             60 BANK0      5     4      1
                                              0 BANK1     16    16      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                            ___lwdiv
                           ___lwtoft
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     396
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             4     1      3    1980
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     692
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     411
                                             46 BANK0     14    10      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     130
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    3132
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                              12     6      6     242
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    2556
                                             30 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    2984
                                              8 BANK0     13     7      6
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    1943
                                              8 BANK0      6     3      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1746
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _Init                                                 0     0      0     421
                           _ADC_Init
                         _Init_Setup
                          _UART_Init
                         _UART_Write
 ---------------------------------------------------------------------------------
 (1) _UART_Write                                           4     2      2     421
                                              1 BANK0      4     2      2
                          _UART_PutC
 ---------------------------------------------------------------------------------
 (2) _UART_PutC                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _UART_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_Setup                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Button_Press                                         3     3      0      45
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  7     7      0       0
                                              0 COMMON     7     7      0
                          _UART_GetC
 ---------------------------------------------------------------------------------
 (6) _UART_GetC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Button_Press
   _Init
     _ADC_Init
     _Init_Setup
     _UART_Init
     _UART_Write
       _UART_PutC
   _Measure
     _ADC_PF
       ___awtoft
         ___ftpack
         ___wmul (ARG)
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftneg
       ___fttol
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwdiv
       ___lwtoft
         ___ftpack
       ___wmul
     _ADC_RMS
       _ADC_Read
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
     _AVG
       ___lldiv
     _UART_Write
       _UART_PutC
   _Send
     _Toggle_Relay
     _UART_Send
       _UART_PutC
       _UART_Write
         _UART_PutC
       _floatTostr
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
   _UART_Write
     _UART_PutC
   ___lwmod
     ___lwdiv (ARG)

 _ISR (ROOT)
   _UART_GetC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      0       0       7        0.0%
BITBANK2            50      0       0       6        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     14      4B       5       93.8%
BITBANK1            50      0       0       4        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     50      50       3      100.0%
BITBANK0            50      0       0       9        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      7       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      A5      10        0.0%
ABS                  0      0      A5       8        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Apr 05 14:04:38 2021

                       pc 0002                _ZERO_CROSS 00AA                _VOLT_ARRAY 00C5  
             __CFG_CP$OFF 0000                        l61 0B3B                        l54 0B10  
                      l72 0052                        l74 00E8                        l69 0049  
                      l78 0110                        l79 0130                        fsr 0004  
     ___wmul@multiplicand 0022              ___ftadd@exp1 0034              ___ftadd@exp2 0033  
            ___ftadd@sign 0032                       l263 09C8                       l183 0F55  
                     l620 0EAB                       l536 0DA3                       l560 0531  
                     l368 0AA8                       l537 0DAB                       l529 0D8E  
                     _AVG 0DC4              __CFG_CPD$OFF 0000                       _ISR 0C40  
         __end_of_ADC_RMS 0B4C                       fsr0 0004                       indf 0000  
            __CFG_IESO$ON 0000              __CFG_FOSC$HS 0000                      AVG@i 003E  
                    ?_AVG 002E                      ?_ISR 0070              ___ftdiv@cntr 0048  
            ___ftdiv@sign 004D                      l2022 0E11                      l2016 0DD6  
                    l2026 0E19                      l2132 0A95                      l2300 00E9  
                    l1510 0D67                      l1520 0D93                      l1512 0D73  
                    l2304 0105                      l2312 0135                      l1522 0D9D  
                    l1514 0D78                      l1506 0D60                      l2330 02AE  
                    l2314 015A                      l1700 0555                      l2252 0AA0  
                    l2092 09EE                      l2246 0AC2                      l1710 0578  
                    l2342 0342                      l2248 0AE3                      l1640 07E5  
                    l1720 073A                      l1800 05FE                      l1552 0BEB  
                    l1544 0BC7                      l1650 04B2                      l1546 0BD5  
                    l2354 0461                      l2450 06A2                      l1570 0B62  
                    l1660 04C8                      l1740 0795                      l1812 0626  
                    l1804 060E                      l1556 0BF6                      l2348 0424  
                    l2428 0C2B                      l1654 04B9                      l1726 0750  
                    l2286 0040                      l1574 0B70                      l2470 0EC6  
                    l1680 0503                      l1672 04E2                      l1760 0CC0  
                    l1816 0636                      l1840 0E51                      l1568 0B54  
                    l1690 0521                      l1682 0508                      l2466 0713  
                    l1578 0B7B                      l2482 0F4B                      l1692 052D  
                    l1684 050C                      l1748 07B4                      l1764 0CE7  
                    l1860 0E93                      l1588 0AF5                      l1924 0B47  
                    l1916 0B25                      l2476 0EE5                      l2492 0BAB  
                    l1678 04F7                      l1782 05A9                      l2486 0B83  
                    l1696 0543                      l1872 0EBC                      l1866 0EA0  
                    l1858 0E83                      l1882 0D08                      l1788 05BF  
                    l1868 0EAE                      l1892 0D40                      l1884 0D18  
                    l1896 0D4D                      STR_1 0810                      STR_2 0810  
                    STR_3 0810                      _CREN 00BC                      u2101 0CB3  
                    u2102 0CB4                      u2103 0CB9                      u2104 0CBA  
                    u3000 0481                      u2121 0CDA                      u2122 0CDB  
                    u3010 0C05                      u2035 0762                      u2123 0CE0  
                    u2124 0CE1                      u2045 0774                      u2205 060F  
                    u2055 0796                      u2215 0617                      u2065 07A7  
                    u2305 0E58                      u2075 07B5                      u2165 05CB  
                    u1605 0BEC                      u3117 0B0A                      u2405 0D0C  
                    u3127 0A8C                      u1535 0DB2                      u1455 0D6C  
                    u2255 0637                      u2175 05DD                      u2335 0E84  
                    u2265 063F                      u2425 0D1A                      u1475 0D87  
                    u2435 0D2F                      u1635 0B57                      u3075 0ECE  
                    u2365 0EA2                      u1565 0BCA                      u2445 0D41  
                    u3085 0F34                      u1495 0D96                      u1655 0B68  
                    u1585 0BD6                      u2465 0B35                      u1665 0B71  
                    u1595 0BE2                      u2475 0B41                      u1925 050D  
                    u1695 0AFC                      u1865 04E3                      u1955 0522  
                    u1895 04F8                      u2865 0AA9                      u2875 0AB0  
                    u2990 0480                      _OERR 00B9                      _TMR0 0001  
                    _TXIF 0061                      _Init 0A01                      _Send 0EC5  
           __CFG_FCMEN$ON 0000                      _main 0B80              ___ftpack@arg 0020  
            ___ftpack@exp 0023                      btemp 007E          __end_of_ADC_Init 0A2A  
        __end_of_ADC_Read 0B1B             __CFG_BOREN$ON 0000                      start 0011  
           __CFG_MCLRE$ON 0000              ___ftmul@cntr 003C              ___ftmul@sign 003D  
         __end_of_Measure 0722                     ??_AVG 0030                     ??_ISR 0070  
            ___fttol@exp1 005B              ___fttol@lval 0057                     ?_Init 0070  
                   ?_Send 0070                     ?_main 0070           __end_of___ftadd 0591  
           __CFG_WDTE$OFF 0000           __end_of___ftdiv 07D9           __end_of___ftneg 09D8  
                   _ANSEL 0091           __end_of___lldiv 0D56           __end_of___ftmul 0663  
         __end_of___fttol 0EC5           __end_of___lwdiv 0BFB                     i1l173 0C8C  
         __end_of___lwmod 0B80                     _RCREG 0014                     _TMR1H 000F  
                   _TMR1L 000E                     _SPBRG 0013                     _PORTC 0007  
                   _TRISA 0085                     _TRISC 0087                     _TXREG 0015  
           __CFG_PWRTE$ON 0000        __size_of_UART_GetC 0008               ?_UART_Write 0021  
      __size_of_UART_Init 0018        __size_of_UART_Send 0045        __size_of_UART_PutC 0009  
           ?_Button_Press 0070             ___awtoft@sign 002D             ___ftpack@sign 0024  
                   pclath 000A                     status 0003                     wtemp0 007E  
         __initialization 0013              __end_of_Init 0A13              __end_of_Send 0F56  
              _Init_Setup 0A59              __end_of_main 0BBD                 ??_ADC_RMS 0060  
                  ??_Init 0025                    ??_Send 0041                    ??_main 006F  
           ___fttol@sign1 0056                    AVG@avg 003C                    AVG@ret 0038  
          ??_Button_Press 0020                    _ADCON0 001F                    _ADCON1 009F  
                  _ADC_PF 002A                    _ADRESH 001E                    _ADRESL 009E  
                  _CMCON0 0019          __end_of___awtoft 07FD          __end_of___ftpack 0DC4  
                  i1l2212 0C4B                    i1l2230 0C7E                    i1l2228 0C7D  
                  i1l2188 09BB          __end_of___lwtoft 0A41                    _TIME_S 0079  
               ??_Measure 006E         __end_of_UART_GetC 09BD         __end_of_UART_Init 0A59  
       __end_of_UART_Send 0C40         __end_of_UART_PutC 09CE                    ___ftge 0C97  
     __size_of_UART_Write 002C                    ___wmul 0A9C                 ??___ftadd 002E  
               ??___ftdiv 0044                 ??___ftneg 0023                 ??___lldiv 0028  
               ??___ftmul 0034                 ??___fttol 0052                 ??___lwdiv 0024  
               ??___lwmod 002C     ___ftmul@f3_as_product 0039                 ?_ADC_Init 0070  
               ?_ADC_Read 0020                    saved_w 007E   __end_of__initialization 0027  
             _Measure$304 00DD                ___ftadd@f1 0028                ___ftadd@f2 002B  
              ___ftge@ff1 0020                ___ftge@ff2 0023                ___ftdiv@f1 0041  
              ___ftdiv@f2 003E                ___ftdiv@f3 0049                ___ftneg@f1 0020  
              ___awtoft@c 0028                ___ftmul@f1 002E                ___ftmul@f2 0031  
              ___fttol@f1 004E            __pcstackCOMMON 0070               ?_Init_Setup 0070  
            __pidataBANK1 09D8                ___lwtoft@c 0028                   ADC_PF@i 00D9  
          _OPTION_REGbits 0081                ??_ADC_Init 0020                ??_ADC_Read 0022  
                 ?_ADC_PF 005C              ADC_RMS@ARRAY 0067                __pbssBANK1 00A0  
              ADC_RMS@ANC 005C                ADC_PF@temp 00D4                ADC_PF@step 00D1  
            ADC_RMS@index 005F                ADC_RMS@max 0068                ADC_RMS@min 006A  
              __pmaintext 0B80             floatTostr@num 002E             floatTostr@txt 0030  
    __end_of_Button_Press 0A9C                   ?___ftge 0020                   ?___wmul 0020  
              __pintentry 0004                   _ADC_RMS 0B1B                 ?___awtoft 0028  
               ?___ftpack 0020                 ?___lwtoft 0028                   _A_VALUE 00A4  
                 _GO_DONE 00F9              ??_UART_Write 0023                   _PF_FLAG 00AC  
                 _F_VALUE 00E9                   _PF_SIGN 00AB                   _TIME_MS 00A0  
     __size_of_Init_Setup 0020           __size_of_ADC_PF 045F                __stringtab 0800  
              _floatTostr 0F56                   _V_VALUE 00A6                   _Measure 0663  
         __size_of___ftge 005F                   ___ftadd 0489                   ___ftdiv 0722  
                 ___ftneg 09CE                   ___lldiv 0CF6           __size_of___wmul 0023  
      __end_of_UART_Write 0AEB                   ___ftmul 0591                   ___fttol 0E37  
                 ___lwdiv 0BBD                   ___lwmod 0B4C                ??___awtoft 002B  
              ??___ftpack 0025                   __ptext1 0EC5                   __ptext2 0BFB  
                 __ptext3 0F56                   __ptext4 0B4C                   __ptext5 09E2  
                 __ptext6 0663                   __ptext7 0DC4                   __ptext8 0CF6  
                 __ptext9 0B1B                ??___lwtoft 002B              __size_of_AVG 0073  
             UART_Send@ch 0034              __size_of_ISR 0057                 _T1CONbits 0010  
           ?_Toggle_Relay 0070               UART_Write@i 0024                   clrloop0 09BE  
    end_of_initialization 0027           ___lldiv@divisor 0020           ___lldiv@counter 002D  
         ADC_PF@rad_angle 00DA                 _RCSTAbits 0017                 _UART_GetC 09B5  
               _UART_Init 0A41                 _UART_Send 0BFB                 _UART_PutC 09C5  
          UART_Write@data 0021            ??_Toggle_Relay 0020                 _TRISCbits 0087  
       __size_of_ADC_Init 0017         __size_of_ADC_Read 0030               ?_floatTostr 002E  
          __end_of_ADC_PF 0489               ___ftdiv@exp 004C                 _TXSTAbits 0016  
   __size_of_Button_Press 0023                 Measure@in 00A8               ___ftmul@exp 0038  
            ??_Init_Setup 0020            __end_of___ftge 0CF6            __end_of___wmul 0ABF  
              ?_UART_GetC 0070                ?_UART_Init 0070                ?_UART_Send 0032  
              ?_UART_PutC 0070       start_initialization 0013               __end_of_AVG 0E37  
             __end_of_ISR 0C97              _Button_Press 0A79                  ??_ADC_PF 005D  
      __end_of_Init_Setup 0A79                  ADC_RMS@i 0066                  ??___ftge 0026  
                AVG@ARRAY 003D                  ??___wmul 0024                init_fetch0 09F1  
             __pdataBANK1 00E1                  ?_ADC_RMS 005C           _FREQUENCY_ARRAY 00AD  
     __size_of_floatTostr 00AA                  AVG@index 002E         __size_of___awtoft 0024  
       __size_of___ftpack 006E               __pbssCOMMON 0077                 ___latbits 0001  
       __size_of___lwtoft 0017             __pcstackBANK0 0020             __pcstackBANK1 00CD  
             ADC_PF@ARRAY 00CD               ADC_PF@angle 00D7               ADC_PF@index 005C  
                ?_Measure 0070      __end_of_Toggle_Relay 09F1          ___lwdiv@dividend 0022  
             ADC_RMS@read 006C               ADC_RMS@rate 005D                  ?___ftadd 0028  
                ?___ftdiv 003E                  ?___ftneg 0020                  ?___lldiv 0020  
                ?___ftmul 002E                  ?___fttol 004E                  ?___lwdiv 0020  
                ?___lwmod 0028               ??_UART_GetC 0070               ??_UART_Init 0020  
             ??_UART_Send 0035               ??_UART_PutC 0020             UART_Send@F988 00E1  
               __pstrings 0800        _POWER_FACTOR_ARRAY 00B5             UART_Send@temp 0032  
                _ADC_Init 0A13                  _ADC_Read 0AEB               ADC_Read@ANC 0024  
           UART_PutC@data 0020          ___lwdiv@quotient 0025         interrupt_function 0004  
          ___wmul@product 0024                 clear_ram0 09BD                  _PIE1bits 008C  
                _PIR1bits 000C                  _PF_VALUE 00A2          __size_of_ADC_RMS 0031  
              _ADCON0bits 001F               __stringbase 080F         ___wmul@multiplier 0020  
              _ADC_PF$960 00CE              ??_floatTostr 0031  Button_Press@switch_state 0077  
        __size_of_Measure 00BF                _CHAR_STATE 00A9          __size_of___ftadd 0108  
        __size_of___ftdiv 00B7          __size_of___ftneg 000A          __size_of___lldiv 0060  
        __size_of___ftmul 00D2          __size_of___fttol 008E          __size_of___lwdiv 003E  
        __size_of___lwmod 0034                  ___awtoft 07D9                  ___ftpack 0D56  
      __end_of__stringtab 0810        __end_of_floatTostr 1000                  ___lwtoft 0A2A  
         ___lwdiv@divisor 0020           ___lwdiv@counter 0027                  __ptext10 0AEB  
                __ptext11 002A                  __ptext20 0489                  __ptext12 0A9C  
                __ptext21 07D9                  __ptext13 0A2A                  __ptext30 0C40  
                __ptext22 0D56                  __ptext14 0BBD                  __ptext31 09B5  
                __ptext23 0A01                  __ptext15 0E37                  __ptext24 0ABF  
                __ptext16 09CE                  __ptext25 09C5                  __ptext17 0591  
                __ptext26 0A41                  __ptext18 0C97                  __ptext27 0A59  
                __ptext19 0722                  __ptext28 0A13                  __ptext29 0A79  
            UART_Send@txt 0039     __size_of_Toggle_Relay 000F             __size_of_Init 0012  
           __size_of_Send 0091             __size_of_main 003D          Toggle_Relay@read 0078  
              _INTCONbits 000B              _Toggle_Relay 09E2                  init_ram0 09F5  
       Button_Press@input 0022                  intlevel1 0000          ___lwmod@dividend 002A  
        ___lldiv@dividend 0024                 stringcode 080A          ___lldiv@quotient 0029  
         ___lwmod@divisor 0028           ___lwmod@counter 002D                  stringdir 080A  
                stringtab 0800                _UART_Write 0ABF             _CURRENT_ARRAY 00BD  
